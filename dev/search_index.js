var documenterSearchIndex = {"docs":
[{"location":"components/#components","page":"Components","title":"Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Describe electric power system components models.","category":"page"},{"location":"modelling-concepts/#modelling-concepts","page":"Modelling Concepts","title":"Modeling Concepts","text":"","category":"section"},{"location":"modelling-concepts/","page":"Modelling Concepts","title":"Modelling Concepts","text":"Presents the fundamental concepts behind ePowerSim modeling.","category":"page"},{"location":"api/#api","page":"Api","title":"API","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"Types and functions documentation in ePowerSim.","category":"page"},{"location":"api/#Module-Index","page":"Api","title":"Module Index","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"   Modules = [ ePowerSim]\n   Order   = [:function]","category":"page"},{"location":"api/#Detailed-API","page":"Api","title":"Detailed API","text":"","category":"section"},{"location":"api/#ePowerSim.Ac_A_gen_avr-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Ac_A_gen_avr","text":"Gen state vars coupling to imalgebraicvars of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ac_A_gen_gov-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Ac_A_gen_gov","text":"Gen state vars coupling to imalgberaicvars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ac_S_gen_avr-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Ac_S_gen_avr","text":"Gen state vars coupling to state of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ac_S_gen_gov-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Ac_S_gen_gov","text":"Gen state vars coupling to state vars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ac_gen_avr-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Ac_gen_avr","text":"Gen state vars coupling to state of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_avr_t0_cb","text":"Algebraic variables of avr avr_t0_cb\n\n         v_ref    vr1_hat   vf\n\nv_ref         -1        0       0\n\nvr1_hat        0       -1       0\n\nvf             0        0      -1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_avr_t1_cb","text":"Algebraic variables of avr avr_t1_cb\n\n         v_ref   vf\n\nv_ref         -1     0\n\nvf             0    -1 \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_avr_t1_cb_sauer","text":"Algebraic variables of avr avr_t1_cb_sauer\n\n         v_ref   vf\n\nv_ref         -1     0\n\nvf             0    -1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_gov_ieee_tgov1_cb","text":"Algebraic variables of gov gov_ieee_tgov1\n\n      τm_tilade     ω_ref\n\nτm_tilade   -1         Dt/ωs     \n\nω_ref      0           -1 \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_gov_t0_cb","text":"Algebraic variables of gov gov_t0_cb\n\n        τm_tilade  #ω_ref      phat_in   p_in\n\nτm_tilade   -1           0           0       0\n\n#ω_ref       0          -1           0       0\n\nphat_in      0       1/(R*ωs)       (-1)     0\n\np_in         0           0           1      (-1)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_gov_t1_cb","text":"Algebraic variables of gov gov_t1_cb\n\n        τm_tilade   #ω_ref      phat_in\n\nτm_tilade   -1           0           0   \n\n#ω_ref       0          -1           0   \n\nphat_in      0           0          -1  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_A_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_A_gov_t1_cb_sauer","text":"Algebraic variables of gov gov_t1_cb_sauer\n\n         #ω_ref   τm_tilade\n\nω_ref        -1       0\n\nτm_tilade      0       -1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_avr_t0_cb","text":"Coupling between algebraic variables and state variables of avr avr_t0_cb\n\n     vm     vr1    vr2   vf_tilade\n\nv_ref     0      0      0      0\n\nvr1_hat   0      1      0      0\n\nvf        0      0      0      1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_avr_t1_cb","text":"Coupling between algebraic variables and state variables of avr avr_t1_cb\n\n     vm     vr1    vr2   vf_tilade  \n\n      0      0      0      0\n\nv_ref\n\nvf       0      0      0      1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_avr_t1_cb_sauer","text":"Coupling between algebraic variables and state variables of avr avr_t1_cb_sauer\n\n    vr1    vr2   vf_tilade\n\nv_ref    0      0      0\n\nvf       0      0      1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_gov_ieee_tgov1_cb","text":"Coupling between algebraic variables and state variables of gov gov_ieee_tgov1\n\n        xg1       xg2\n\nτm_tilade   T2/T3     1       \n\nω_ref      0         0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_gov_t0_cb","text":"Coupling between algebraic variables and state variables of gov gov_t0_cb\n\n        xg1                   xg2     xg3\n\nτm_tilade   (T4/T5)* (T3/Tc)    T4/T5     1    \n\nω_ref       0                     0       0\n\nphat_in      0                     0       0\n\np_in        0                     0       0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_gov_t1_cb","text":"Coupling between algebraic variables and state variables of gov gov_t1_cb\n\n        xg1                   xg2     xg3\n\nτm_tilade   (T4/T5)* (T3/Tc)    T4/T5     1    \n\nω_ref     0                     0       0\n\nphat_in      0                     0       0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_S_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_S_gov_t1_cb_sauer","text":"Coupling between algebraic variables and state variables of gov gov_t1_cb_sauer\n\n        xg1     xg2\n\nω_ref       0        0  \n\nτm_tilade    0        1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_avr_t0_cb","text":"Coupling between algebraic variables of avr avr_t0_cb, and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nv_ref      0        0            0          0\n\nvr1_hat    0        0            0          0\n\nvf         0        0            0          0 \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_avr_t1_cb","text":"Coupling between algebraic variables of avr avr_t1_cb, and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nv_ref      0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_avr_t1_cb_sauer","text":"Coupling between algebraic variables of avr avr_t1_cb_sauer and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nv_ref      0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_gov_ieee_tgov1_cb","text":"Coupling between algebraic variables of gov gov_ieee_tgov1, and state equations of generator\n\n         δ   u_gen_ω       e_d_dash e_q_dash\n\nτmtilade   0  (-Dt/ωref0)          0       0     \n\nω_ref       0    0               0       0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_gov_t0_cb","text":"Coupling between algebraic variables of gov gov_t0_cb, and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nτm_tilade  0        0            0          0    \n\nω_ref    0        0            0          0\n\nphat_in    0    -1/(R*ω)         0          0\n\np_in       0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_gov_t1_cb","text":"Coupling between algebraic variables of gov gov_t1_cb, and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nτm_tilade  0        0            0          0    \n\n#ω_ref     0        0            0          0\n\nphat_in    0   -1/(R*ωs)         0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_A_Sgen_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_A_Sgen_gov_t1_cb_sauer","text":"Coupling between algebraic variables of gov gov_t1_cb_sauer, and state equations of generator\n\n        δ      u_gen_ω     e_d_dash   e_q_dash\n\nω_ref      0        0            0          0\n\nτm_tilade  0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A__gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A__gov_t0_cb","text":"Coupling between state variables and algebraic variables of gov gov_t0_cb\n\n τm_tilade     ω_ref    phat_in   p_in\n\nxg1   0             0        1/Ts      0       \n\nxg2   0             0         0        0\n\nxg3   0             0         0        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_avr_t0_cb","text":"Coupling between state variables and algebraic variables of avr avr_t0_cb!\n\n         v_ref           vr1_hat     vf\n\nvm            0              0           0\n\nvr1           0              0           0\n\nvr2           0              0           0\n\nvf_tilade     0              1/Te        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_avr_t1_cb","text":"Coupling between state variables and algebraic variables of avr avr_t1_cb!\n\n         v_ref   vf\n\nvm            0     0\n\nvr1           0     0\n\nvr2           0     0\n\nvf_tilade     0     0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_avr_t1_cb_sauer","text":"Coupling between state variables and algebraic variables of avr avr_t1_cb_sauer\n\n         v_ref      vf\n\nvr1           0        0\n\nvr2           0        0\n\nvf_tilade     0        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_gov_ieee_tgov1_cb","text":"Coupling between state variables and algebraic variables of gov gov_ieee_tgov1\n\n τm_tilade    #ω_ref\n\nxg1   0        1/(R * ω_ref0)  \n\nxg2   0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_gov_t1_cb","text":"Coupling between state variables and algebraic variables of gov gov_t1_cb\n\n τm_tilade     #ω_ref    phat_in\n\nxg1   0             0         1    \n\nxg2   0             0         0     \n\nxg3   0             0         0     \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Ax_S_A_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Ax_S_A_gov_t1_cb_sauer","text":"Coupling between state variables and algebraic variables of gov gov_t1_cb_sauer\n\n       ω_ref            τm_tilade\n\nxg1    1/(R * ω_ref0)         0   \n\nxg2         0                 0    \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_avr_t0_cb","text":"Coupling between algebraic variables of avr avr_t0_cb, and network\n\n        id      iq            pg         vh\n\nv_ref      0        0            0          0\n\nvr1_hat    0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_avr_t1_cb","text":"Coupling between algebraic variables of avr avr_t1_cb, and network\n\n        id      iq            pg         vh\n\nv_ref      0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_avr_t1_cb_sauer","text":"Coupling between algebraic variables of avr avr_t1_cb_sauer, and network\n\n        id      iq            pg         vh\n\nv_ref      0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_gov_ieee_tgov1_cb","text":"Coupling between algebraic variables of gov gov_ieee_tgov1, and network injections  id,  iq,  ph,  vh,\n\n          id  iq  ph  vh\n\nτm_tilade   0    0   0   0     \n\nω_ref       0    0   0   0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_gov_t0_cb","text":"Coupling between algebraic variables of gov gov_t0_cb, and network injections  id,  iq,  ph,  vh,\n\n          id  iq  ph  vh\n\nτm_tilade   0    0   0   0     \n\n#ω_ref      0    0   0   0\n\nphat_in     0    0   0   0\n\np_in        0    0   0   0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_gov_t1_cb","text":"Coupling between algebraic variables of gov gov_t1_cb, and network injections  id,  iq,  ph,  vh,\n\n          id  iq  ph  vh\n\nτm_tilade    0    0   0   0     \n\n#ω_ref       0    0   0   0\n\nphat_in      0    0   0   0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Bx_A_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Bx_A_gov_t1_cb_sauer","text":"Coupling between algebraic variables of gov gov_t1_cb_sauer, and network\n\n        id      iq            pg         vh\n\nω_ref      0        0            0          0\n\nτm_tilade  0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_avr_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_avr_t0_cb","text":"Coupling between algebraic variables of avr avr_t0_cb, and set points\n\n         ωs    ω_ref0       v_ref0   p_order0\n\nv_ref      0        0            1          0\n\nvr1_hat    0        0            0          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_avr_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_avr_t1_cb","text":"Coupling between algebraic variables of avr avr_t1_cb, and set points\n\n         ωs    ω_ref0       v_ref0   p_order0\n\nv_ref      0        0            1          0\n\nvf         0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_avr_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_avr_t1_cb_sauer","text":"Coupling between algebraic variables of avr avr_t1_cb_sauer, and set points\n\n         ωs    ω_ref0       v_ref   p_order0\n\nv_ref       0        0            1          0\n\nvf          0        0            0          0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_gov_ieee_tgov1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_gov_ieee_tgov1_cb","text":"Coupling between algebraic variables of gov gov_ieee_tgov1, and set points ωs, ωref0, vref0, p_order0\n\n        ωs  ω_ref0  v_ref0  p_order0\n\nτm_tilade   0  Dt/(ωs)   0        0     \n\nω_ref       0    1       0        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_gov_t0_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_gov_t0_cb","text":"Coupling between algebraic variables of gov gov_t0_cb, and set points ωs, ωref0, vref0, p_order0\n\n        ωs   #ω_ref0      v_ref0  p_order0\n\nτm_tilade   0     0            0        0     \n\n#ω_ref      0     1            0        0\n\nphat_in     0  1/(R*ωs)        0        1\n\np_in        0     0            0        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_gov_t1_cb-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_gov_t1_cb","text":"Coupling between algebraic variables of gov gov_ieee_tgov1, and set points ωs, ωref0, vref0, p_order0\n\n        ωs  ω_ref0  v_ref0  p_order0\n\nτm_tilade   0    0       0        0     \n\n#ω_ref      0    1       0        0\n\nphat_in     0  1/(R*ωs)  0        1\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Cx_A_gov_t1_cb_sauer-Tuple{Any}","page":"Api","title":"ePowerSim.Cx_A_gov_t1_cb_sauer","text":"Coupling between algebraic variables of gov gov_t1_cb_sauer, and set points\n\n        ωs     ω_ref0    v_ref0  p_order0\n\n#ω_ref      0        1         0        0\n\nτm_tilade    0        0         0        0\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.DAE_BoolVector-Tuple{Any, Any}","page":"Api","title":"ePowerSim.DAE_BoolVector","text":"DAE_BoolVector(\n    state_size, algebraic_size )\n\nReturns the boolean vector for a differential algebraic equations\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.DAE_MassMatrix-Tuple{Any, Any}","page":"Api","title":"ePowerSim.DAE_MassMatrix","text":"DAE_MassMatrix(\n    state_size, algebraic_size )\n\nReturns the mass matrix for a differential algebraic equations\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.PiModel-NTuple{5, Any}","page":"Api","title":"ePowerSim.PiModel","text":"PiModel(\n    y, y_shunt_km, y_shunt_mk, t_km, t_mk )\n\nReturns a PiModel for a line.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Qmax_Qmin_limit_violation-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.Qmax_Qmin_limit_violation","text":"Qmax_Qmin_limit_violation(\n    genQ, gen_Qmax, gen_Qmin)\n\nReturns lists of Qmax_limit_violation and Qmim_limit_violation\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SC_Ax_gen_S_avr_A-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SC_Ax_gen_S_avr_A","text":"Gen state vars coupling to imalgebraicvars of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SC_Ax_gen_S_avr_S-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SC_Ax_gen_S_avr_S","text":"Gen state vars coupling to state of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SC_Ax_gen_S_gov_A-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SC_Ax_gen_S_gov_A","text":"Gen state vars coupling to imalgberaicvars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SC_Ax_gen_S_gov_S-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SC_Ax_gen_S_gov_S","text":"Gen state vars coupling to state vars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SM_Ax_gen_S_avr_A-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SM_Ax_gen_S_avr_A","text":"Gen state vars coupling to imalgebraicvars of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SM_Ax_gen_S_avr_S-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SM_Ax_gen_S_avr_S","text":"Gen state vars coupling to state of avr\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SM_Ax_gen_S_gov_A-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SM_Ax_gen_S_gov_A","text":"Gen state vars coupling to imalgberaicvars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SM_Ax_gen_S_gov_S-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SM_Ax_gen_S_gov_S","text":"Gen state vars coupling to state vars of gov\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Sbus-Tuple{Any, Any}","page":"Api","title":"ePowerSim.Sbus","text":"Sbus(V, Ybus)\n\nReturns complex power at nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.SbusC-Tuple{Any, Any}","page":"Api","title":"ePowerSim.SbusC","text":"SbusC(V, Ybus)\n\nReturns complex power at nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Scenario-Tuple{Float64, Float64}","page":"Api","title":"ePowerSim.Scenario","text":"This was taken from JuMP tutoria:\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Sevf-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.Sevf","text":"Sevf(Ae, Be, vf_tilade)\n\nReturns an excitation.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Sf-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.Sf","text":"Sf(V, Ct, Yt)\n\nReturns complex power from nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.St-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.St","text":"St(V, Ct, Yt)\n\nReturns complex power to nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.ThermalGenerator-NTuple{4, Float64}","page":"Api","title":"ePowerSim.ThermalGenerator","text":"This was taken from JuMP tutoria:\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.V_C2R-Tuple{Any}","page":"Api","title":"ePowerSim.V_C2R","text":"V_C2R(V)\n\nReturns a tuple of a vector of voltage magnitudes and a vector of voltage angles for a given vector of complex voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.V_R2C-Tuple{Any}","page":"Api","title":"ePowerSim.V_R2C","text":"V_R2C(V)\n\nReturns a vector of complex voltage for a given concatenated flattened vector of voltage magnitudes and voltage angles.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.VΘ_to_u-Tuple{Any}","page":"Api","title":"ePowerSim.VΘ_to_u","text":"VΘ_to_u(VΘ)\n\nReturns a complex value for a given list of angle and magnitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.WindGenerator-Tuple{Float64}","page":"Api","title":"ePowerSim.WindGenerator","text":"This was taken from JuMP tutoria:\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.Z_dq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.Z_dq","text":"Z_dq(ra, X_d_dash, X_q_dash)\n\nReturns Z_dq matrix transform for a generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.anonymus_func","page":"Api","title":"ePowerSim.anonymus_func","text":"anonymus_func(x)\n\nReturns a place holder for an anonymus function that produce nothing.\n\nIt is needed in struct that do not have some functions implemented.\n\n\n\n\n\n","category":"function"},{"location":"api/#ePowerSim.cartesian_to_polar-Tuple{Any}","page":"Api","title":"ePowerSim.cartesian_to_polar","text":"cartesian_to_polar(ur_ui)\n\nReturns the polar values for a cartesian complex values.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.cb_fun_affect_anti_windup_lower_lim!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.cb_fun_affect_anti_windup_lower_lim!","text":"Note that the plantsswitches is a vector of vectors plantsswitches = [[0], [0], [0]]\n\nEach vector in plants_switches\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.center_of_intertia-NTuple{4, Any}","page":"Api","title":"ePowerSim.center_of_intertia","text":"center_of_intertia(\n    vec_H, vec_ω, vec_δ, ωs )\n\nReturns center of inertial for δ_coi, ω_coi, M_T, vec_M.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.conj_x_from_xr_xi-Tuple{Any}","page":"Api","title":"ePowerSim.conj_x_from_xr_xi","text":"conj_x_from_xr_xi(ur_ui)\n\nReturns the complex conjugate for a list containing real part and imaginary part of a complex voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.convert_dataframe_selected_cols_types-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.convert_dataframe_selected_cols_types","text":"convert_dataframe_selected_cols_types(\n    df, cols_types, cols_names )\n\nConverts a selected columns to specific types in a dataframe.\n\nThe function was created because of the challenges of getting is_slack column as a Bool in dyn_plant.csv\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.convert_to_consecutive_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.convert_to_consecutive_idxs","text":"convert_to_consecutive_idxs(\n    flat_vh_flat_θh_Idx )\n\nConverts non consecutive idxs to a consecutive idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.convert_to_non_consecutive_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.convert_to_non_consecutive_idxs","text":"convert_to_non_consecutive_idxs(\n    flat_vh_idx_flat_θh_idx_in_flat_vh_θh )\n\nConverts consecutive idxs to non consecutive idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_avr_parameters_lib-Tuple{}","page":"Api","title":"ePowerSim.create_avr_parameters_lib","text":"create_avr_parameters_lib\n\nCrerates a json file that contains parameters of dynamic models of avr. Values of some parameters of some avr are already defined in the function. This can be extended by adding parameters values and symbolic name of the avr type.\n\nIt creates a dictionary that associates the symbolic name of a avr type with its dyanamic parameters. The dictionary is subsequently written to a json file for persistence.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_dynamic_components_parameters_libs_json-Tuple{}","page":"Api","title":"ePowerSim.create_dynamic_components_parameters_libs_json","text":"create_dynamic_components_parameters_libs_json\n\nCreates a json file that contains parameters of dynamic models of generators, automatic-voltage regulator, governors, powers sytems stabiliers in some appropriate folders under components_libs_dir.\n\nAssistant functions:\n\nget_sub_components_libs_dir:   get_sub_components_libs_files\n\ncreate_generators_dynamic_parameters_lib  create_gov_parameters_lib  create_avr_parameters_lib  create_pss_parameters_lib\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_generators_dynamic_parameters_lib-Tuple{}","page":"Api","title":"ePowerSim.create_generators_dynamic_parameters_lib","text":"create_generators_dynamic_parameters_lib\n\nCrerates a json file that contains parameters of dynamic models of generators. Values of some parameters of some generators are already defined in the function. This can be extended by adding parameters values and symbolic name of the generator type.\n\nIt creates a dictionary that associates the symbolic name of a generator type with its dyanamic parameters. The dictionary is subsequently written to a json file for persistence.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_gov_parameters_lib-Tuple{}","page":"Api","title":"ePowerSim.create_gov_parameters_lib","text":"create_gov_parameters_lib\n\nCrerates a json file that contains parameters of dynamic models of governors. Values of some parameters of some governors are already defined in the function. This can be extended by adding parameters values and symbolic name of the governor type.\n\nIt creates a dictionary that associates the symbolic name of a governor type with its dyanamic parameters. The dictionary is subsequently written to a json file for persistence.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_idxs-Tuple{Any, Any}","page":"Api","title":"ePowerSim.create_idxs","text":"create_idxs(offs, dims)\n\nCreate indexes for stacked array of dimensions dims using the offsets offs\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_offsets-Tuple{Any}","page":"Api","title":"ePowerSim.create_offsets","text":"create_offsets(\n    dims;\n    counter=0)::Vector{Int}\n\nCreate offsets for stacked array of dimensions dims.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_pss_parameters_lib-Tuple{}","page":"Api","title":"ePowerSim.create_pss_parameters_lib","text":"create_pss_parameters_lib(\n\nCrerates a json file that contains parameters of dynamic models of pss. Values of some parameters of some pss are already defined in the function. This can be extended by adding parameters values and symbolic name of the pss type.\n\nIt creates a dictionary that associates the symbolic name of a pss type with its dyanamic parameters. The dictionary is subsequently written to a json file for persistence.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_size_offset_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.create_size_offset_Idx","text":"create_size_dims_offset_Idx(comps_dims)\n\nCreate indexes  of dimensions dims.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_u_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.create_u_idxs","text":"create_u_idxs(offs)\n\nCreate indexes of ur and ui for stacked array of dimensions dims using the offsets offs\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_x_dst_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.create_x_dst_idxs","text":"create_x_dst_idxs(offs)\n\nCreate indexes of dst-end (h) flow in an edge, xkr and xki for stacked array of dimensions dims using the offsets offs\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.create_x_src_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.create_x_src_idxs","text":"create_i_src_idxs(offs)\n\nCreate indexes of src-end (h) flow in an edge, xhr and xhi for stacked array of dimensions dims using the offsets offs\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.created_csv_cases_data_folders-Tuple{Any, Any}","page":"Api","title":"ePowerSim.created_csv_cases_data_folders","text":"created_csv_cases_data_folders\n\nCreates csv files for matpower cases in associated cases folders.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.dict_reverse_keys_values_pair-Tuple{Any}","page":"Api","title":"ePowerSim.dict_reverse_keys_values_pair","text":"dict_reverse_keys_values_pair(\n    a_dict)\n\nReturns a reverse pair of a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.disaggregate_sta_pf_keywords_parameter-Tuple{Any}","page":"Api","title":"ePowerSim.disaggregate_sta_pf_keywords_parameter","text":"disaggregate_sta_pf_keywords_parameter(\n    pf_kw_para)\n\nReturns disaggregated constituent of pfkwpara.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.driver_extract_matpower_case_name-Tuple{String}","page":"Api","title":"ePowerSim.driver_extract_matpower_case_name","text":"Test drives extract_matpower_case_name\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.driver_extract_matpower_scalar-Tuple{String}","page":"Api","title":"ePowerSim.driver_extract_matpower_scalar","text":"Test drives extract_matpower_scalar\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.driver_parse_matpower_data_as_csv-Tuple{String}","page":"Api","title":"ePowerSim.driver_parse_matpower_data_as_csv","text":"Test drives parse_matpower_data_as_csv\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.driver_parse_matpower_data_header-Tuple{String}","page":"Api","title":"ePowerSim.driver_parse_matpower_data_header","text":"Test drives parse_matpower_data_header\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.dynamic_nodal_current_balance-Tuple{Any, Any}","page":"Api","title":"ePowerSim.dynamic_nodal_current_balance","text":"dynamic_nodal_current_balance(\n    x_s, x_d)\n\nReturns dynamic nodal current balance at a node.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.edges_current_partial_sum-Tuple{Any}","page":"Api","title":"ePowerSim.edges_current_partial_sum","text":"edges_current_partial_sum(\n    ih_or_ik )\n\nReturns sum of current from source or destination edges connected to a node.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.eighth-Tuple{Any}","page":"Api","title":"ePowerSim.eighth","text":"eighth(elements_container)\n\nReturns the eighth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.exciter_saturation_function-NTuple{4, Any}","page":"Api","title":"ePowerSim.exciter_saturation_function","text":"exciter_saturation_function(\n    K_e, V_R_max, S_E_max, S_E0_75max)\n\nReturns an exciter saturation parameters A_x, and B_x.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.exciter_saturation_function-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.exciter_saturation_function","text":"exciter_saturation_function(\n    (K_e, V_R_max), S_E_max, S_E0_75max)\n\nReturns an exciter saturation parameters A_x, and B_x.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.exciter_saturation_function-Tuple{Any, Any}","page":"Api","title":"ePowerSim.exciter_saturation_function","text":"exciter_saturation_function(\n    ( efd_1, S_E_1 ), ( efd_2, S_E_2 ) )\n\nReturns an exciter saturation parameters A_x, and B_x.\n\nPower system modeling, computation and control.\n\npage:243\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.export_maptpower_cases_to_csv-Tuple{Any, Any}","page":"Api","title":"ePowerSim.export_maptpower_cases_to_csv","text":"export_maptpower_cases_to_csv\n\nExports all matpower case files in a given directory to csv files in associated cases folders.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.export_maptpower_data_to_csv-Tuple{Any, Any}","page":"Api","title":"ePowerSim.export_maptpower_data_to_csv","text":"export_maptpower_data_to_csv\n\nExports contents of sections of a matpower file as csv files to a specified directory.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.extract_matpower_case_name-Tuple{AbstractString}","page":"Api","title":"ePowerSim.extract_matpower_case_name","text":"extract_matpower_case_name\n\nReturns the case name of a MATPOWER file.\n\nThe first line of every matpower file contains function name for the file, e.g. \"function mpc = case5\".\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.extract_matpower_scalar-Tuple{AbstractString}","page":"Api","title":"ePowerSim.extract_matpower_scalar","text":"extract_matpower_scalar\n\nBreaks up matlab strings of the form 'name = value;'\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.fifth-Tuple{Any}","page":"Api","title":"ePowerSim.fifth","text":"fifth(elements_container)\n\nReturns the fifth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.find_V_idx_in_sparse_matrix_IJV-NTuple{4, Any}","page":"Api","title":"ePowerSim.find_V_idx_in_sparse_matrix_IJV","text":" find_V_idx_in_sparse_matrix_IJV(\n     row_idx,\n     col_idx,\n     sparse_row_idxs,\n     sparse_col_idxs )\n\nReturns an index in V of a sparse matrix, where sparse_row_idxs[idx] = row_idx && sparse_col_idxs[idx] = col_idx. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.find_dst-Tuple{Any}","page":"Api","title":"ePowerSim.find_dst","text":"find_dst(row)\n\nReturns destination nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.find_node_incident_edges-Tuple{Any}","page":"Api","title":"ePowerSim.find_node_incident_edges","text":"find_node_incident_edges(row)\n\nReturns a node incident edges.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.find_src-Tuple{Any}","page":"Api","title":"ePowerSim.find_src","text":"find_src(row)\n\nReturns source nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.flat_reals_to_complex-Tuple{Any, Any}","page":"Api","title":"ePowerSim.flat_reals_to_complex","text":"flat_reals_to_complex(\n    P_flat, Q_flat )\n\nReturns a vector of complex values for a list of real part and a list of imaginary part.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.fourth-Tuple{Any}","page":"Api","title":"ePowerSim.fourth","text":"fourth(elements_container)\n\nReturns the fourth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.gS-Tuple{Any, Any}","page":"Api","title":"ePowerSim.gS","text":"gS(V, p)\n\nReturns complex power injections at nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.generate_labels_by_nodes_idxs_and_vars-Tuple{Any, Any}","page":"Api","title":"ePowerSim.generate_labels_by_nodes_idxs_and_vars","text":"generate_labels_by_nodes_idxs_and_vars(\n    nodes_idxs,\n    nodes_vars_syms;\n    label_prefix = \"bus\" )\n\nReturn labels for nodes variables.\n\nExample\n\ntgensnodes_idx = [1, 2, 3]\n\ntstatevarssymsinternal_mode = [:δ, :ω]\n\ngeneratelabelsbynodesidxsandvars(     tgensnodesidx,     tstatevarssymsinternalmode)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.generate_net_bus_volts_labels-Tuple{Any}","page":"Api","title":"ePowerSim.generate_net_bus_volts_labels","text":"generate_net_bus_volts_labels(\n    network_bus_names)\n\nReturns buses voltage labels for real part and imaginary part od buses voltages.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.gens_and_non_gens_u_Idx_in_ranges-NTuple{4, Any}","page":"Api","title":"ePowerSim.gens_and_non_gens_u_Idx_in_ranges","text":"gens_and_non_gens_u_Idx_in_ranges(\n    all_nodes_idx,\n    gens_nodes_idx,\n    non_gens_nodes_idx,\n    nodes_u_Idx_in_ranges )\n\nReturns generators and non-geenrators voltage indices in form of ranges.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Cbn_by_orientations-Tuple{Any}","page":"Api","title":"ePowerSim.get_Cbn_by_orientations","text":"get_Cbn_by_orientations(edges_collection)\n\nReturns branches to nodes connectivity matrix Cbn.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Cnb_by_orientations-Tuple{Any}","page":"Api","title":"ePowerSim.get_Cnb_by_orientations","text":"get_Cnb_by_orientations(edges_collection)\n\nReturns nodes to branches connectivity matrix Cnb.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Dyn_Nodes_Branches_data_from_json_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_Dyn_Nodes_Branches_data_from_json_file","text":"This function get_Dyn_Nodes_Branches_data_from_json_file is not fully implented and tested.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_StructTypes_exclude_fieldnames-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_StructTypes_exclude_fieldnames","text":"get_StructTypes_exclude_fieldnames\n\nReturns a set of properties (fieldnames) of a structure that are not in non-excluded list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ybus-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ybus","text":"get_Ybus(\n    edge_data_from_json,\n    shunt_data_from_json;\n    basekV = 1.0,\n    baseMVA = 1.0,\n    line_data_in_pu = true )\n\nReturns network sparse admittance matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ybus_and_related_matrices-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ybus_and_related_matrices","text":"get_Ybus_and_related_matrices(\n    edge_data_from_json,\n    shunt_data_from_json;\n    basekV = 1.0,\n    baseMVA = 1.0,\n    line_data_in_pu = true )\n\nReturns constituent objects for building Ybus.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ynet","text":"get_Ynet(\n    edge_data_from_json,\n    shunt_data_from_json;\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0,\n    line_data_in_pu = true)\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_and_related_vectors-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ynet_and_related_vectors","text":"get_Ynet_and_related_vectors(\n    edge_data_from_json,\n    shunt_data_from_json;\n    basekV = 1.0,\n    baseMVA = 1.0,\n    line_data_in_pu = true )\n\nReturns constituent objects for building Ynet.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_real_imag_Idxs_wt_rows_Idxs_in_flattend-Tuple{Any}","page":"Api","title":"ePowerSim.get_Ynet_real_imag_Idxs_wt_rows_Idxs_in_flattend","text":"get_Ynet_real_imag_Idxs_wt_rows_Idxs_in_flattend(\n    Ynet)\n\nReturns namedtuples of Ynet_rows_Idxs_in_flattend, and  Ynet_real_imag_Idxs_in_flattend.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_sp_sh-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ynet_sp_sh","text":"get_Ynet(\n    edge_data_from_json,\n    shunt_data_from_json;\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0,\n    line_data_in_pu = true)\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data-NTuple{7, Any}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data(\n    edges_r, edges_x, edges_b,\n    edges_ratio, edges_angle,\n    Gs, Bs;\n    edges_fbus,\n    edges_tbus,\n    edges_type,    \n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA=1.0,\n    basekV=1.0,\n    line_data_in_pu = true)\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data-Tuple{}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data(\n    ;edges_fbus, edges_tbus,\n    edges_type,\n    edges_r, edges_x, edges_b,\n    edges_ratio, edges_angle,\n    Gs, Bs,\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA=1.0,\n    basekV=1.0,\n    line_data_in_pu = true)\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic-NTuple{10, Any}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic(\n    branches_fbus,\n    branches_tbus,\n    r,\n    x,\n    b,\n    ratio,\n    angle,\n    edge_type,    \n    Gs,\n    Bs;\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0 )\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic-NTuple{11, Any}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic(\n    branches_fbus,\n    branches_tbus,\n    r, x, b,\n    ratio, angle,\n    edge_type,\n    buses_idx,\n    Gs, Bs;\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0 )\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic(\n    branches_fbus,\n    branches_tbus,\n    r,\n    x,\n    b,\n    ratio,\n    angle,        \n    Gs,\n    Bs;\n    edges_type,\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0 )\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_diff-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Ynet_wt_nodes_idx_wt_adjacent_nodes_diff","text":"get_Ynet_wt_nodes_idx_wt_adjacent_nodes_diff(\n    Ynet_wt_nodes_idx_wt_adjacent_nodes_1,\n    Ynet_wt_nodes_idx_wt_adjacent_nodes_2)\n\nReturns the difference between two Ynetwtnodesidxwtadjacentnodes data structure.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Yπ_net-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Yπ_net","text":"get_Yπ_net(\n    edge_data_from_json,\n    shunt_data_from_json;\n    # all_nodes_idx,\n    # n2s_all_nodes_idx,\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0,\n    line_data_in_pu = true,\n    orientated_bool = false )\n\nReturns nodes incident edges elementary admittance matrices yπ.\n\nswapyπdiagonal_elements is used to ensure a proper orientation of elementary yπ based on an edge orientation (i,j) i.e (from, to). Since an edge is connected to two nodes; node i and node k, a primary node checks if the first index in (i,j) is the same as its index. if from idx is the same as the index of the primary node, yπ is accepted, otherwise, values in the diagonal of yπ are swapped. This is important for branches  element whose elementaray admittance yπ matrix are not symetrix\n\nA primary node is the first node in each row of nodes_idx_with_adjacent_nodes_idx\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_Yπ_net_and_related_vectors-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_Yπ_net_and_related_vectors","text":"get_Yπ_net_and_related_vectors(\n    edge_data_from_json,\n    shunt_data_from_json;\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    basekV = 1.0,\n    baseMVA = 1.0,\n    baseShunt = 1.0,\n    line_data_in_pu = true,\n    orientated_bool = true )\n\nReturns constituent objects for building Yπ_net.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_flattend_vars_or_paras_and_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_a_flattend_vars_or_paras_and_Idx","text":"get_a_flattend_vars_or_paras_and_Idx(\n    vec_of_vec_var )\n\nReturns indices in a flattened vectors for a vector of vectors.\n\nd = [ [1,2], [3,4], [5,6]]\n\ne = [[10,11,12], [13,14,15], [16,17,18]]\n\ntestdata2 = [d, e]\n\ndimsvarsorparastypes = length.([first(d), first(e) ] )\n\nteste = getpervarsorparastopernode( testdata2  )\n\ntestt = getpernodeparatopervarsorparas(      teste,     dimsvarsorparastypes )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_flattened_by_per_vars_or_paras-Tuple{Any}","page":"Api","title":"ePowerSim.get_a_flattened_by_per_vars_or_paras","text":"get_a_flattened_by_per_vars_or_paras(\n    list_vars_or_paras )\n\nReturns for a vector of vectors list_vars_or_paras a  flattened vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_dyn_idq-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_a_gen_dyn_idq","text":"get_a_gen_dyn_idq(\n    vh, θh,\n    δ_ω_ed_eq,\n    ra_Xd_dash_Xq_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_dyn_idq-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_a_gen_dyn_idq","text":"get_a_gen_dyn_idq(\n    vh, θh,\n    δ, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_dyn_idq-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_a_gen_dyn_idq","text":"get_a_gen_dyn_idq(\n    vh, θh,\n    δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_dyn_idq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_gen_dyn_idq","text":"get_a_gen_dyn_idq(\n    vh_θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_ph-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_a_gen_ph","text":"get_a_gen_ph(\n    vd, vq ,id ,iq)\n\nReturns a generator active power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_qh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_a_gen_qh","text":"get_a_gen_qh(\n    vd, vq ,id ,iq)\n\nReturns a generator reactive power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_vd-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_gen_vd","text":" get_a_gen_vd(\n    gen_δ, gen_vh, gen_θh)\n\nReturns a generator directive axis voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_gen_vq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_gen_vq","text":" get_a_gen_vq(\n    gen_δ, gen_vh, gen_θh)\n\nReturns a generator quardrature axis voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_model_integrated_intra_dyn_current_balance_pf_ΔI_idq_mismatch-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_model_integrated_intra_dyn_current_balance_pf_ΔI_idq_mismatch","text":"IgilocloadrealB = ( idi * sin(δi) + iqi * cos(δ_i) )\n\nIgilocloadimagB = ( iqi * sin(δi) - idi * cos(δ_i) )\n\nIgilocloadrealA =     ( Ploci * cos(θi) + Qloci * sin(θi) ) / vhi \n\nIgilocloadimagA =     ( Ploci * sin(θi) - Qloci * cos(θi)) / vhi\n\nIgilocloadrealC = sum( vhk * Yik * cos( θk + α_ik  ) )\n\nIgilocloadrealC = -sum( vhk * Yik * sin( θk + α_ik  ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_n2s_dict-Tuple{Any}","page":"Api","title":"ePowerSim.get_a_n2s_dict","text":"get_a_n2s_dict(a_type_idxs )\n\nReturns \"indices to ordinal\" dictionaries of indices of a list.\n\nExample\n\natypeidx = Union{Symbol,String,Int64}[1,2,\"dayo\", :yusuff]\n\nn2satype =  getan2sdict(atype_idx )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_n2s_net_group-Tuple{Any}","page":"Api","title":"ePowerSim.get_a_n2s_net_group","text":"get_a_n2s_net_group(\n    a_net_group_idxs;\n    loc_load_exist = false,\n    transmission_group = false )\n\nReturns  streamlined idxs conversion dictionary\n\nn2s_gens_idx =\n    get_a_n2s_net_group(gens_nodes_idx)\n\nn2s_transmission_idxs =\n    get_a_n2s_net_group(transmission_nodes_idx;\n    transmission_group = true)\n\nn2s_gens_with_loc_load_idxs =\n    get_a_n2s_net_group(gens_with_loc_load_idx;\n    loc_load_exist = true)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_namedtuple_dict_types_dyn_or_output_func-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_a_namedtuple_dict_types_dyn_or_output_func","text":"get_a_namedtuple_dict_types_dyn_or_output_func(\n    types_func,\n    dae_or_ode_type)\n\nIt return a singleton namedtuple. The property of the namedtuple is the type of modelling, which could either be :ode or :dae, while the property value is a dictionary of component models and their specific associated functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_state_algb_vars_indices_in_syms-Tuple{}","page":"Api","title":"ePowerSim.get_a_node_state_algb_vars_indices_in_syms","text":"get_a_node_state_algb_vars_indices_in_syms(\n    ; node_syms_labels = node_syms_labels,\n    bus_name = bus_name, vars = [:ω, :δ])\n\nReturns indices of state_algebraic variables of a node in the node syms list.\n\nIt is meant to extract the indices in sol.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_state_algb_vars_indices_in_system-Tuple{}","page":"Api","title":"ePowerSim.get_a_node_state_algb_vars_indices_in_system","text":"get_a_node_state_algb_vars_indices_in_system(\n    ; network_vars_labels = network_vars_labels,\n    bus_name = bus_name,\n    vars = [:ω, :δ])\n\nReturns indices of state_algebraic variables of a node in the systems.\n\nIt is meant to extract the indices in sol.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_states_indices_in_system-Tuple{}","page":"Api","title":"ePowerSim.get_a_node_states_indices_in_system","text":"get_a_node_states_indices_in_system(\n    ; network_vars_labels = network_vars_labels,\n    bus_name = bus_name,\n    vars = [:δ, :ed_dash, :eq_dash])\n\nReturns indices of a list of state variables vars of a plant in the network state.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_states_vars_syms_in_system-Tuple{}","page":"Api","title":"ePowerSim.get_a_node_states_vars_syms_in_system","text":"get_a_node_states_vars_syms_in_system(\n    ; network_vars_labels = network_vars_labels,\n    bus_name = bus_name,\n    vars = [:δ, :ed_dash, :eq_dash])\n\nReturns labels of a list of state variables vars of a plant in the network state labels.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_type_tup_idx_PQ_data_by_generic-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_node_type_tup_idx_PQ_data_by_generic","text":"get_a_node_type_tup_idx_PQ_data_by_generic(\n    idx, Pd, Qd;\n    baseMVA = 1.0,\n    node_type = :load )\n\nReturns a tuple of (idx, Bus, P, Q, node_type) for non-generation node.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_uh_x_conj_∑_ynj_x_vj-NTuple{5, Any}","page":"Api","title":"ePowerSim.get_a_node_uh_x_conj_∑_ynj_x_vj","text":"The first element of nthnodeidxandadjnodesidx is the idx of the node\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_node_∑_ynj_x_vj_by_Ybus-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_a_node_∑_ynj_x_vj_by_Ybus","text":"Columns are used because Julia access matrix via cols. It does not make any diffence, because Ybus is symetric.\n\nYbus_nth_col = Ybus[:,nth] == Ybus_nth_row = Ybus[nth,:]\n\nYbus_nth_col' * (vh .* exp.( im * θh ))\n\ngetanode∑ynjxvjbyYbus(     vh,     θh,     Ybus[:,1] )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_a_status_steady_state_data-Tuple{Any}","page":"Api","title":"ePowerSim.get_a_status_steady_state_data","text":"get_a_status_steady_state_data(\n    system_status;\n    <keyword arguments>)\n\nIt is used to simplify generation of parameters or data of a system that are needed for simulation.\n\nArguments\n\nnet_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow. pf_alg: power flow solver abstol: the absolute error tolerance reltol: the relative error tolerance on_fault_time: the on fault time clear_fault_time: the clear fault time list_fault_point_from_node_a::Vector{Float64}=[0.3]: the list containing a ratio of the fault point from the source (from) orientation of lines list_fault_resistance::Vector{Float64} = [0.001]: the list containing fault resistances of each fault in the network. list_no_line_circuit::Vector{Float64} = [4]: the list containing the number of circuits per faulted lines list_edges_to_have_fault::Vector{Int64} = [2]: the list containing indices of lines that should have a fault.   clear_fault_selection_list::Vector{Int64} = [1]: the list containing indices of faulted lines to be cleared in list_edges_to_have_fault. ode_alg: the ode solver. daealg: the dae solver. dt: the solve interval. `withfaults::Bool=false`: a legacy boolean variable.\n\nsystem_status: can take the form of the following\n:pre_fault_state\n:fault_state \n:post_fault_state\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_absract_type_dict_subsubtypes-Tuple{Any}","page":"Api","title":"ePowerSim.get_absract_type_dict_subsubtypes","text":"get_absract_type_dict_subsubtypes(\n    absract_type )\n\nReturns a dictionary of symbol to subsubtypes of an abstract types, e,g. AbstractPowerSystemComponent. This is used to translate a symbol of a type to type\n\nExample\n\nget_absract_type_dict_subsubtypes(\n    absract_type )\n\ndictsymboltypes = getabsracttypedictsubsubtypes(     AbstractPowerSystemComponent )\n\ndict_symbol_types[:pss_t2_cb] will return pss_t2_cb\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_abstract_type_dict_subtypes-Tuple{Any}","page":"Api","title":"ePowerSim.get_abstract_type_dict_subtypes","text":"get_abstract_type_dict_subtypes(\n    absract_type )\n\nReturns a dictionary of concrete subtypes of absract_type.\n\nThe set of abstract types currently defined in the package are:\n\nSdAvr, SdBranchElement, SdGen, SdGenPlant, SdGov, SdNonGen, SdNonGenPlant, SdPss.\n\nThey are subtypes of\n\nAbstractPowerSystemComponent\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_algebraic_vars_labels-Tuple{Any}","page":"Api","title":"ePowerSim.get_algebraic_vars_labels","text":"get_algebraic_vars_labels(\n    dyn_pf_fun_kwd_net_idxs;\n    label_prefix = \"bus\" )\n\nReturn plants algebraic variable symbols or lables for all generator plants  in a flattened vector.\n\nArguments\n\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\nlabel_prefix::String=\"bus\": the label that should be used as a prefix.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_case_data_by_csv-Tuple{Any}","page":"Api","title":"ePowerSim.get_case_data_by_csv","text":"get_case_data_by_csv(\n    case_name;\n    <keyword arguments> )\n\nReturns selected static parameters and dynamic types of components from network model csv files.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_comp_vector_of_nt_by_lens-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_comp_vector_of_nt_by_lens","text":"get_comp_vector_of_namedtuple_by_lens\n\nThis functions uses a lens function for filtering.\n\nThe inputs are a lens_func and a collection of namedtuple data\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_components_libs_and_case_data-Tuple{Any}","page":"Api","title":"ePowerSim.get_components_libs_and_case_data","text":"get_components_libs_and_case_data(\n    case_name;\n    <keyword arguments> )\n\nReturns selected static parameters and dynamic types of components from network model csv files.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_components_properties_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_components_properties_by_json","text":"get_components_properties_by_json(\n    plant_generators_data_from_json;\n    <keyword arguments>)\n\nReturns a vector of properties of components selected by the variables sequence_order and selection.\n\nArguments\n\nsequence_order::Tuple{Symbol}=(:components_data, :gen): the selection order of components data.\nselections::Tuple{Symbol}=(:P, :Q): the tuple of parameters data to be selected.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_csv2tex-Tuple{Any}","page":"Api","title":"ePowerSim.get_csv2tex","text":"get_csv2tex(\n    csv_file;\n    wt_new_header_bool      = false,\n    wt_selected_colums_bool = false,\n    new_header              = nothing,\n    delim              = ',',\n    normalizenames     = true,\n    selected_colums    = [] )\n\nConverts a csv data to tex table.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_df2tex-Tuple{Any}","page":"Api","title":"ePowerSim.get_df2tex","text":" get_df2tex(df)\n\nConverts  a dataframe to a tex table.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_first_to_tenth_funs-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_first_to_tenth_funs","text":"get_dict_first_to_tenth_funs(\n    no_nth_funcs)\n\nReturns a dictionary of n numbers of functions first, second ... tenth.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_n2s_streamlined_idx_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_n2s_streamlined_idx_by_mpc","text":"get_dict_n2s_streamlined_idx_by_mpc(mpc_bus)\n\nReturns \"indices to ordinal\" dictionaries of indices of various type of nodes in a network.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_net_streamlined_idx_by_nodes_type_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_net_streamlined_idx_by_nodes_type_idxs","text":"get_dict_net_streamlined_idx_by_nodes_type_idxs(\n    net_nodes_type_idxs)\n\nReturns \"indices to ordinal\" dictionaries of indices of various type of nodes in a network.\n\nThese are:\n\nn2s_slack_gens_idx,  n2s_non_slack_gens_idx,  n2s_gens_idx,  n2s_non_gens_idx,  n2s_load_idx,  n2s_gens_with_loc_load_idxs,  n2s_transmission_idxs,  n2s_all_nodes_idx,  n2s_nodes_with_demands_idx\n\nIt aligns indices of node types with the indices of parameters of node types.\n\nConsider a 14 nodes network, where 6 nodes are generator nodes, 1 node is a transmission node, and 7 nodes are load nodes.\n\nThe indices of generator nodes in the network are gennodesidx = [1,2,3,6,8]. The size of gen_nodes_idx is 5.\n\nLets define an array for reactive power, Qg = [-0.169, 0.42, 0.234, 0.122, 0.174]\n\nHow do we access the reactive power of the fifth generator, whose index in the network is 8? It is evident that Qg[8] will throw an error.\n\nA way out is to use a dictionary\n\nn2stypeidx = OrderedDict(     idx => ord     for (idx, ord) in         zip(gennodesidx,             collect(1:length(gennodesidx)) ))\n\ni.e n2stypeidx = Dict(1=>1, 2=>2, 3=3, 6=>4, 8=5)\n\nThe reactive power of the fifth generator can be subsequently accessed as :\n\nQg[ n2stypeidx[ 8 ] ]\n\nNote n2stypeidx[ 8 ] will produced 5.\n\nThe beauty of this is that, indices of nodes are not resticted to numbers. Strings, symbols can be used as indices.\n\nIf gennodesidx had been,\n\ngennodesidx =     [\"node-gauteng\",\"node-limpopo\",\"node-wc\",\"node-ec\", \"node-nw\"]\n\nn2stypeidx = OrderedDict(     idx => ord     for (idx, ord) in         zip(gennodesidx,             collect(1:length(gennodesidx)) ))\n\nQg[ n2stypeidx[ \"node-nw\" ] ] will produce, the reactive power of the fifth generator,\n\nA generic function could be defined\n\nfunction getn2sany( anetgroup_idxs)\n\nreturn OrderedDict{Union{Symbol,String,Int64},Int64}(\n        net_idx =>idx\n        for (net_idx, idx) in zip(\n            a_net_group_idxs,\n            collect(1:length(\n                a_net_group_idxs )) ) )\n\nend\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_net_to_streamlined_idx_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_net_to_streamlined_idx_by_mpc","text":"get_dict_net_to_streamlined_idx_by_mpc(mpc_bus)\n\nReturns \"indices to ordinal\" dictionaries of indices of various type of nodes in a network.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_nt_params_from_json_lib_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_nt_params_from_json_lib_file","text":"get_dict_nt_params_from_json_lib_file(\n    json_nt_params_libs_file )\n\nReturns a dictionary of namedtuples of components parameters from a json library file\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_states_syms_from_json_lib_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_states_syms_from_json_lib_file","text":"get_dict_states_syms_from_json_lib_file(\n    json_states_syms_lib_file)\n\nConverts values read from json_states_syms_lib_file to symbols\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_struct_name_type-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_struct_name_type","text":"get_dict_struct_name_type(\n    list_struct_sym_types)\n\nReturns a mapping of data structure symbolic names to data structures. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dict_types_dyn_or_output_func-Tuple{Any}","page":"Api","title":"ePowerSim.get_dict_types_dyn_or_output_func","text":"get_dict_types_dyn_or_output_func(\n    types_func)\n\nIt converts a list of functions into a dictionaly of functions. A key in the dictionary is a type of a model of component, and the value is a specific function that is applicable to the component.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_V_ref_Tm_vh_id_iq_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_V_ref_Tm_vh_id_iq_Idx","text":"get_dyn_vh_id_iq_V_ref_Tm_Idx(\n    gens_nodes_idx)\n\nReturns indices of V_ref, Tm, vh, id, iq in a flattened vector V_ref_Tm_vh_id_iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_red_vh_θh_idq-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_dyn_red_vh_θh_idq","text":"get_dyn_red_vh_θh_idq(\n    uh,\n    δ_ω_ed_dash_eq_dash_view;\n    <keywords arguments> )\n\nArguments\n\ngens_vh\nraXddashXqdash_view\nredvhθh_idx\nn2sgensidx\nn2snongens_idx\ngensnodesidx\nnodes_size\n\nReturns [ red_vh_θh; gens_idq_flat ].\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_v_ref_p_order_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_v_ref_p_order_Png_Qng_Pll_Qll_Idx","text":"get_dyn_v_ref_p_order_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of v_ref, p_order, Png, Qng, Pll, Qll in a flattened vector v_ref_p_order_Png_Qng_Pll_Qll.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_vh_id_iq_V_ref_Tm_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_vh_id_iq_V_ref_Tm_Idx","text":"get_dyn_vh_id_iq_V_ref_Tm_Idx(\n    gens_nodes_idx;\n    reverse_idx = false)\n\nReturns indices of vh, id, iq, V_ref, Tm in a flattened vector vh_id_iq_V_ref_Tm.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_vh_id_iq_ωref0_vref0_porder0_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_vh_id_iq_ωref0_vref0_porder0_Idx","text":"get_dyn_vh_id_iq_ωref0_vref0_porder0_Idx(\n    gens_nodes_idx;\n    reverse_idx = false)\n\nReturns indices of vh, id, iq, ωref0, vref0, porder0 in a flattened vector vh_id_iq_ωref0_vref0_porder0.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx","text":"get_dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of δ, ed_dash, eq_dash, Png, Qng, Pll, Qll in a flattened vector δ_ed_dash_eq_dash_Png_Qng_Pll_Qll.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx","text":"get_dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of δ, eq_dash, Png, Qng, Pll, Qll in a flattened vector δ_eq_dash_Png_Qng_Pll_Qll.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx","text":"get_dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of ω_ref, v_ref, p_order, Png, Qng, Pll, Qll in a flattened vector v_ref_p_order_Png_Qng_Pll_Qll.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dyn_ωref0_vref0_porder0_id_iq_vh_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_dyn_ωref0_vref0_porder0_id_iq_vh_Idx","text":"get_dyn_ωref0_vref0_porder0_id_iq_vh_Idx(\n    gens_nodes_idx)\n\nReturns indices of ωref0, vref0, porder0, id, iq, vh in a flattened vector ωref0_vref0_porder0_id_iq_vh.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_components_parameters_libs_from_json-Tuple{}","page":"Api","title":"ePowerSim.get_dynamic_components_parameters_libs_from_json","text":"get_dynamic_components_parameters_libs_from_json\n\nReturns parameters of dynamic devices in the package parameters library.\n\nThe function is a dual of create_dynamic_components_parameters_libs_jsonrequires,\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_comps_init_out_dyn_callback_funcs-Tuple{Any}","page":"Api","title":"ePowerSim.get_dynamic_comps_init_out_dyn_callback_funcs","text":"get_dynamic_comps_init_out_dyn_callback_funcs(\n    gens_govs_avrs_types)\n\nReturns namedtuples of dynamic components functions comps_callback_paras_funs, comps_init_funs, comps_output_funs, ode_comps_dyn_funs, dae_comps_dyn_funs, comps_dyn_funs.\n\nArguments\n\n`gens_govs_avrs_states_syms: the namedtuple of states variables symbols of generators, governors and automatic voltage regulators. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_id_iq_pg_vh_by_ur_ui-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_id_iq_pg_vh_by_ur_ui","text":"get_dynamic_id_iq_pg_vh_by_ur_ui(\n    u_r, u_i, δ,\n    ed_dash,\n    eq_dash,\n    ra,\n    X_d_dash,\n    X_q_dash )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_id_iq_pg_vh_by_ur_ui-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_dynamic_id_iq_pg_vh_by_ur_ui","text":"get_dynamic_id_iq_pg_vh_by_ur_ui(\n    u_r, u_i, δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_id_iq_pg_vh_by_vhθh-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_id_iq_pg_vh_by_vhθh","text":"get_dynamic_id_iq_pg_vh_by_vhθh(\n    vh, θh, δ, ed_dash, eq_dash, ra,\n    X_d_dash, X_q_dash )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_id_iq_pg_vh_by_vhθh-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_dynamic_id_iq_pg_vh_by_vhθh","text":"get_dynamic_id_iq_pg_vh_by_vhθh(\n    vh, θh, δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_ur_ui-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_ur_ui","text":"get_dynamic_idq_ur_ui(\n    u_r, u_i, δ_ω_ed_eq, ra_X_d_dash_X_q_dash)\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_ur_ui-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_ur_ui","text":"get_dynamic_idq_ur_ui(\n    u_r, u_i, δ, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash)\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_vhθh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_vhθh","text":"get_dynamic_idq_vhθh(\n    vh,\n    θh,\n    δ_ω_ed_eq,\n    ra_Xd_dash_Xq_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_vhθh-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_vhθh","text":"get_dynamic_idq_vhθh(\n    vh,\n    θh,\n    δ,\n    ed_dash,\n    eq_dash,\n    ra,\n    X_d_dash,\n    X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_vhθh-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_vhθh","text":"get_dynamic_idq_vhθh(\n    vh,\n    θh,\n    δ,\n    ω,\n    ed_dash,\n    eq_dash,\n    ra,\n    X_d_dash,\n    X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_vhθh-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_vhθh","text":"get_dynamic_idq_vhθh(\n    vh_θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_θ_π_ur_ui-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_θ_π_ur_ui","text":"get_dynamic_idq_θ_π_ur_ui(\n    u_r, u_i, δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash)\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_θ_π_vhθh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_θ_π_vhθh","text":"get_dynamic_idq_θ_π_vhθh(\n    vh,\n    θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_θ_π_vhθh-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_θ_π_vhθh","text":"get_dynamic_idq_θ_π_vhθh(\n    vh, θh,\n    δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_idq_θ_π_vhθh-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_dynamic_idq_θ_π_vhθh","text":"get_dynamic_idq_θ_π_vhθh(\n    vh_θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_pg_from_id_iq-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_pg_from_id_iq","text":"get_dynamic_pg_from_id_iq(\n   id, iq, δ, ed_dash, eq_dash,  ra,\n   X_d_dash, X_q_dash)\n\nReturns a generator active power  for a given id, iq, δ, ed_dash, eq_dash,  ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_pg_from_id_iq-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_dynamic_pg_from_id_iq","text":"get_dynamic_pg_from_id_iq(\n    id, iq, δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash)\n\nReturns a generator active power  for a given id, iq, δ, ed_dash, eq_dash,  ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_ph_by_vhθh_δ_idq-NTuple{5, Any}","page":"Api","title":"ePowerSim.get_dynamic_ph_by_vhθh_δ_idq","text":"get_dynamic_ph_by_vhθh_δ_idq(\n    vh, θh, δ, id, iq )\n\nReturns a generator active power for a given vh, θh, δ, id, and iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_ph_by_vhθh_δ_idq-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_ph_by_vhθh_δ_idq","text":"get_dynamic_ph_by_vhθh_δ_idq(\n    vh, θh, δ, ω, ed_dash,\n    eq_dash, id, iq )\n\nReturns a generator active power for a given vh, θh, δ, ω, ed_dash, eq_dash, id, and iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_qh_by_vhθh_δ_idq-NTuple{5, Any}","page":"Api","title":"ePowerSim.get_dynamic_qh_by_vhθh_δ_idq","text":"get_dynamic_qh_by_vhθh_δ_idq(\n    vh, θh, δ, id, iq )\n\nReturns a generator reactive power for a given vh, θh, δ, id, and iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_qh_by_vhθh_δ_idq-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_qh_by_vhθh_δ_idq","text":"get_dynamic_qh_by_vhθh_δ_idq(\n    vh, θh, δ, ω, ed_dash,\n    eq_dash, id, iq )\n\nReturns a generator active power for a given vh, θh, δ, ω, ed_dash, eq_dash, id, and iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_dynamic_τe_from_id_iq-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_dynamic_τe_from_id_iq","text":"get_dynamic_τe_from_id_iq(\n   id, iq, δ, ed_dash, eq_dash,  ra,\n   X_d_dash, X_q_dash)\n\nReturns a generator torque  for a given id, iq, δ, ed_dash, eq_dash,  ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edge_y_data_by_generic-NTuple{10, Any}","page":"Api","title":"ePowerSim.get_edge_y_data_by_generic","text":"get_edge_y_data_by_generic(\n    fbus, tbus,\n    r, x, b,\n    ratio, angle,\n    status,\n    baseMVA, basekV)\n\nReturns per unit π parameters for branches admittances.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edge_y_line_data_by_generic-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_edge_y_line_data_by_generic","text":"get_edge_y_line_data_by_generic(\n    fbus, tbus,\n    r, x, b,\n    ratio, angle,\n    status,\n    baseMVA, basekV)\n\nReturns per unit π parameters for branches admittances.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edge_y_transformer_data_by_generic-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_edge_y_transformer_data_by_generic","text":"get_edge_y_transformer_data_by_generic(\n    fbus, tbus,\n    r, x, b,\n    ratio, angle,\n    status,\n    baseMVA, basekV)\n\nReturns per unit π parameters for transformers admittances.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edges_Ybr_by_generic-NTuple{8, Any}","page":"Api","title":"ePowerSim.get_edges_Ybr_by_generic","text":"get_edges_Ybr_by_generic(\n    r, x, b,\n    ratio, angle,\n    edge_type,\n    Gs, Bs;\n    baseMVA = 1.0,\n    basekV = 1.0 )\n\nReturns a list of per unit π admittance matrices for branches.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edges_Ybr_cal_and_edges_orientation_by_generic-NTuple{10, Any}","page":"Api","title":"ePowerSim.get_edges_Ybr_cal_and_edges_orientation_by_generic","text":"get_edges_Ybr_cal_and_edges_orientation_by_generic(\n    branches_fbus,\n    branches_tbus,\n    r, x, b,\n    ratio, angle,\n    edge_type,\n    Gs, Bs;\n    baseMVA = 1.0, basekV = 1.0 )\n\nReturns namedtuple of branches π admittance matrices and branches orientations.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edges_orientation-Tuple{Any}","page":"Api","title":"ePowerSim.get_edges_orientation","text":"get_edges_orientation(edges_collection)\n\nReturns edges orientation (src, dst).\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edges_orientation_by_generic-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_edges_orientation_by_generic","text":"get_edges_orientation_by_generic(\n    branches_fbus,\n    branches_tbus )\n\nReturns branches orientations in form of a list of tuples (src, dst).\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_edges_r_x_b_ratio_angle_idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_edges_r_x_b_ratio_angle_idx","text":"get_edges_r_x_b_ratio_angle_idx(\n    edges_size)\n\nReturns indices of r, x, b, ratio and angle in a flattened vector edges_r_x_b_ratio_angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_eigens-Tuple{Any}","page":"Api","title":"ePowerSim.get_eigens","text":"get_eigens This function returns eigen values, left and right eigen vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_eigens_via_arblib-Tuple{Any}","page":"Api","title":"ePowerSim.get_eigens_via_arblib","text":"https://arblib.org/acb_mat.html#acb-mat-eigenvalues\n\nhttps://github.com/kalmarek/Arblib.jl\n\nmatrixrows, matrixcols = size(system_matrix)\n\neigval = Arblib.AcbVector(zeros(matrixrows))\n\nAcbsystemmatrix = Arblib.AcbMatrix(system_matrix)\n\neigvecsleft  = similar(Acbsystem_matrix)\n\neigvecsright = similar(Acbsystem_matrix)\n\nreturncode = Arblib.approxeigqr!(     eigval,     eigvecsleft,     eigvecsright,     Acbsystemmatrix,     Mag(),     0,     Arblib.precision(Acbsystem_matrix) )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_flat_full_vh_θh_and_idxs-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_flat_full_vh_θh_and_idxs","text":"get_flat_full_vh_θh_and_idxs(\n    vh, θh)\n\nReturns a flattened concatenated full_vh_θh and indices in the flattened vector.  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_flat_intg_vh_θh_id_iq_and_idxs-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_flat_intg_vh_θh_id_iq_and_idxs","text":"get_flat_intg_vh_θh_id_iq_and_idxs(\n    vh, θh, gens_i_d_0, gens_i_q_0 )\n\nReturns a flattened concatenated vec_intg_vh_θh_id_iq and indices in the flattened vector.  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_flattened_to_components_vector_var_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_flattened_to_components_vector_var_Idx","text":"get_flattened_to_components_vector_var_Idx(\n    vec_of_vec_var )\n\nReturns indices in a flattened vector for each vector in a vector of vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_node_static_data_tup_by_mpc-NTuple{10, Any}","page":"Api","title":"ePowerSim.get_gen_node_static_data_tup_by_mpc","text":"get_gen_node_static_data_tup_by_mpc(\n    idx,\n    vmax,vmin,\n    Pg,Qg,\n    Vg,\n    Qmax, Qmin,\n    Pmax, Pmin;\n    mpc_baseMVA = 1.0 )\n\nReturns a generator's index and static parameters as a tuple of index and namedtuple of static parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_dict_static_data_by_mpc-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_dict_static_data_by_mpc","text":"get_gen_nodes_dict_static_data_by_mpc(\n    mpc_bus,\n    mpc_gen;\n    mpc_baseMVA = 1.0 )\n\nReturns an OrderedDict of static data indexed by generators indices.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_static_tup_data_by_mpc-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_static_tup_data_by_mpc","text":"get_gen_nodes_static_tup_data_by_mpc(\n    mpc_bus,\n    mpc_gen;\n    mpc_baseMVA=1.0 )\n\nReturns a list of static parameters for single or multi generators per node for all generation nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_δ_ω_ed_dash_eq_dash-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_δ_ω_ed_dash_eq_dash","text":"get_gen_nodes_δ_ω_ed_dash_eq_dash(\n    state, nodes_δ_ω_ed_dash_eq_dash_Idxs )\n\nReturns a flattened vector of gensδ, gensω, genseddash, genseqdash based on nodesδωeddasheqdash_Idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_δ_ω_ed_dash_eq_dash_views-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_δ_ω_ed_dash_eq_dash_views","text":"get_gen_nodes_δ_ω_ed_dash_eq_dash_views(\n    state, nodes_δ_ω_ed_dash_eq_dash_Idxs )\n\nReturns a flattened view of gensδ, gensω, genseddash, genseqdash based on nodesδωeddasheqdash_Idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_ω_ed_dash_eq_dash-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_ω_ed_dash_eq_dash","text":"get_gen_nodes_ω_ed_dash_eq_dash(\n    state, nodes_ω_ed_dash_eq_dash_Idxs )\n\nReturns a flattened vector of gensω, genseddash, genseqdash based on nodesωeddasheqdash_Idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_nodes_ω_ed_dash_eq_dash_views-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_gen_nodes_ω_ed_dash_eq_dash_views","text":"get_gen_nodes_ω_ed_dash_eq_dash_views(\n    state, nodes_ω_ed_dash_eq_dash_Idxs )\n\nReturns a flattend view of gensω, genseddash, genseqdash based on nodesωeddasheqdash_Idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_plants_gens_properties_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_gen_plants_gens_properties_by_json","text":"This function returns a vector of properties of generator nodes, selected by the variables sequence_order and selection.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_plants_local_load_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_gen_plants_local_load_by_json","text":"This function returns a vector of local loads of generators otherwise, it returns an empty vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gen_sub_static_data_tup_by_mpc-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gen_sub_static_data_tup_by_mpc","text":"get_gen_sub_static_data_tup_by_mpc(\n    idx,\n    n2s_gens_idx,\n    mpc_gen )\n\nReturns a tuple of static parameters for a generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gencost_data_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_gencost_data_by_mpc","text":"get_gencost_data_by_mpc(\n    mpc_gencost;\n    mpc_baseMVA =\n        1.0)\n\nReturns a dict Dict{:cost_type,:startup,:shutdown,:n,:c_n_1,:c_1,:c_0 } for generators operation cost.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_Pg_Png_Qng_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_Pg_Png_Qng_Idx","text":"get_generic_Pg_Png_Qng_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of generator nodes active power generation Pg, generator nodes reactive power generation Qg, non-generator nodes active power demand Png, non-generator nodes reactive power demand Qng in a flattened Pg_Png_Qng vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_Pg_Qg_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_Pg_Qg_Png_Qng_Pll_Qll_Idx","text":"get_generic_Pg_Qg_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of generator nodes active power generation Pg, generator nodes reactive power generation Qg, non-generator nodes active power demand Png, non-generator nodes reactive power demand Qng, generator nodes local active power demand Pll, generator nodes local reactive power demand Qll in a flattened Pg_Qg_Png_Qng_Pll_Qll vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_Png_Qng_Pll_Qll_Idx","text":"get_generic_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of non-generator nodes active power demand Png, non-generator nodes reactive power demand Qng, generator nodes local active power demand Pll, generator nodes local reactive power demand Qll in a flattened Png_Qng_Pll_Qll vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_algebraic_state_sym-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_algebraic_state_sym","text":"get_generic_algebraic_state_sym(\n    gens_nodes_idx,\n    all_nodes_idx)\n\nReturns algebraic variables symbols.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_flat_vh_flat_θh_Idx-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_flat_vh_flat_θh_Idx","text":"get_generic_flat_vh_flat_θh_Idx(\n    gens_nodes_idx,\n    all_nodes_idx)\n\nReturns a flattend vector of indices of nodes voltages magnitude and nodes voltages angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_flat_vh_flat_θh_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_flat_vh_flat_θh_Idx","text":"get_generic_flat_vh_flat_θh_Idx(\n    all_nodes_idx)\n\nReturns a flattend vector of indices of nodes voltages magnitude and nodes voltages angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_flat_vh_flat_θh_id_iq_Idx-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_flat_vh_flat_θh_id_iq_Idx","text":"get_generic_flat_vh_flat_θh_id_iq_Idx(\n    gens_nodes_idx,\n    all_nodes_idx)\n\nReturns a flattend vector of indices of nodes voltages magnitude vh, nodes voltages angle θh, generators direct-axis currents id, generators quadrature axix currents iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_flat_vh_flat_θh_wt_slack_value_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_flat_vh_flat_θh_wt_slack_value_Idx","text":"get_generic_flat_vh_flat_θh_wt_slack_value_Idx(\n    all_nodes_idx)\n\nReturns a flattend vector of indices of nodes voltages magnitude vh, nodes voltages angle θh, and slack variable`. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_namedtuple_per_plant_para_wt_kwd_para-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_namedtuple_per_plant_para_wt_kwd_para","text":"get_generic_namedtuple_per_plant_para_wt_kwd_para(\n    ωref0_vref0_porder0_id_iq_vh;\n    kwd_para = plants_kwd_para )\n\nReturns namedtuples of parameters per plant. It is used in generating a namedtuple consisting of data struture needed to simulate a generator plant. A generator plant can consist of a generator, gov, avr, etc.\n\nArguments\n\nωref0_vref0_porder0_id_iq_vh: the flattend vector consisting concatenation of ωref0, vref0, porder0, id, iq, and vh\nplantskwdpara: \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_network_vars_labels-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_generic_network_vars_labels","text":"get_generic_network_vars_labels(\n    plants_states_syms,\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs\n    ;label_prefix = \"bus\",\n    plants_states_by_per_comp = false,\n    plants_states_by_per_plant = false\n    )\n\nReturns namedtuples of state_labels, algebraic_vars_labels, network_vars_labels.\n\nArguments\n\nplants_states_syms: the plants states variables symbols per plant for all generator plants. \ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_nodes_names-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_nodes_names","text":"get_generic_nodes_names(\n    dyn_pf_fun_kwd_net_idxs,\n    n2s_all_nodes_idx)\n\nReturns namedtuples of nodes types names all_nodes_names, gens_nodes_names, non_gens_nodes_names.\n\nArguments\n\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_scale_Pg_Png_Qng_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_scale_Pg_Png_Qng_Idx","text":"get_generic_scale_Pg_Png_Qng(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of scale variable scale, generator nodes active power generation Pg, non-generator nodes active power demand Png, non-generator nodes reactive power demand Qng in a flattened scale_Pg_Qg_Png_Qng vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_scale_Pg_Qg_Png_Qng_Pll_Qll_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_scale_Pg_Qg_Png_Qng_Pll_Qll_Idx","text":"get_generic_scale_Pg_Qg_Png_Qng_Pll_Qll_Idx(\n    dyn_pf_fun_kwd_net_idxs)\n\nReturns indices of scale variable scale, generator nodes active power generation Pg, generator nodes reactive power generation Qg, non-generator nodes active power demand Png, non-generator nodes reactive power demand Qng, generator nodes local active power demand Pll, generator nodes local reactive power demand Qll in a flattened scale_Pg_Qg_Png_Qng_Pll_Qll vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_state_sym-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_state_sym","text":"get_generic_state_sym(\n    gens_govs_avrs_states_syms,\n    gens_nodes_idx;\n    label_prefix = \"bus\")\n\nReturn plants states variables symbols or lables for all generator plants  in a flattened vector.\n\nA generator plant consist of a generator, automatic voltage regulator, governor etc.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_system_simulation_parameters-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_system_simulation_parameters","text":"get_generic_system_simulation_parameters(\n    net_data_by_components_file;\n    <keyword arguments>)\n\nIt is used to simplify generation of parameters or data of a system that are needed for optimal power flow analyses.\n\nArguments\n\nnet_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow.\n\npf_alg: power flow solver ode_alg: ode solverdae_alg`: dae solver\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_vh_vhf_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_vh_vhf_Idx","text":"get_generic_vh_vhf_Idx(\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns a flattend vector of indices of nodes voltages magnitude vh, and fault node voltages magnitude vhf.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_vh_vhf_θh_θhf_id_iq_Idx-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_vh_vhf_θh_θhf_id_iq_Idx","text":"get_generic_vh_vhf_θh_θhf_id_iq_Idx(\n    gens_nodes_idx,\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns a flattend vector of indices of nodes voltages magnitude vh, nodes voltages angle θh, generators direct-axis currents id, generators quadrature axix currents iq, fault node voltages magnitude vhf, fault nodes voltage angle θhf.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_vh_θh_id_iq_vhf_θhf_Idx-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_generic_vh_θh_id_iq_vhf_θhf_Idx","text":"get_generic_vh_θh_id_iq_vhf_θhf_Idx(\n    gens_nodes_idx,\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns a flattend vector of indices of nodes voltages magnitude vh, nodes voltages angle θh, generators direct-axis currents id, generators quadrature axix currents iq, fault node voltages magnitude vhf, fault nodes voltage angle θhf.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_generic_θh_θhf_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_generic_θh_θhf_Idx","text":"get_generic_θh_θhf_Idx(\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns a flattend vector of indices of nodes voltages angle θh, fault nodes voltage angle θhf.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_id_iq_pg_vh_by_ur_ui-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_id_iq_pg_vh_by_ur_ui","text":"get_gens_dynamic_id_iq_pg_vh_by_ur_ui(\n    gens_ur_ui_post_pf,\n    gen_nodes_δ_ω_ed_dash_eq_dash_views,\n    gen_nodes_ra_Xd_dash_Xq_dash_view )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_id_iq_pg_vh_by_vhθh-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_id_iq_pg_vh_by_vhθh","text":"get_gens_dynamic_id_iq_pg_vh_by_vhθh(\n    gens_vh_θh_post_pf,\n    gen_nodes_δ_ω_ed_dash_eq_dash_views,\n    gen_nodes_ra_Xd_dash_Xq_dash_view )\n\nReturns a list of id, iq, pg and vh for a given vh, θh, δ, ed_dash, eq_dash, ra, X_d_dash, X_q_dash.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_ph_by_vhθh_δ_idq-NTuple{5, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_ph_by_vhθh_δ_idq","text":"get_gens_dynamic_ph_by_vhθh_δ_idq(\n    gens_vh, gens_θh,\n    gens_δ,\n    gens_id, gens_iq )\n\nReturns generators active power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_ph_by_vhθh_δ_idq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_ph_by_vhθh_δ_idq","text":"get_gens_dynamic_ph_by_vhθh_δ_idq(\n    gens_vh_θh,\n    gens_nodes_δ_ω_ed_dash_eq_dash,\n    gens_id_iq )\n\nReturns generators active power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_qh_by_vhθh_δ_idq-NTuple{5, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_qh_by_vhθh_δ_idq","text":"get_gens_dynamic_qh_by_vhθh_δ_idq((\n    gens_vh, gens_θh,\n    gens_δ,\n    gens_id, gens_iq )\n\nReturns generators active power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_dynamic_qh_by_vhθh_δ_idq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_dynamic_qh_by_vhθh_δ_idq","text":"get_gens_dynamic_qh_by_vhθh_δ_idq(\n    gens_vh_θh,\n    gens_nodes_δ_ω_ed_dash_eq_dash,\n    gens_id_iq )\n\nReturns generators active power.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_govs_avrs_states_syms_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_gens_govs_avrs_states_syms_by_json","text":" get_gens_govs_avrs_states_syms_by_json(\n        net_data_by_components_file;\n        components_libs_dir =\n            components_libs_dir )\n\nRetrives states variables symbols gens_govs_avrs_states_syms, gens_govs_avrs_types for different types of gens, govs, and avrs from the library of state symbols.\n\nArguments\n\nnet_data_by_components_file::String: the path to network json file.\ncomponents_libs_dir::String: the path to components library folder.\n\nThis information is stored in :\n\ncomponentslibsdir:     - states-syms          - gens          - govs          - avrs\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_govs_avrs_types_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_gens_govs_avrs_types_by_json","text":"get_gens_govs_avrs_types_by_json(\n    plant_generators_data_from_json)\n\nIt selects :gen, :gov, :avr as a tuple from  :components_type property of a plant.\n\n:components_type property of a plant contains other properties such as :loc_load.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_state_vars_idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_state_vars_idx_in_state","text":"get_gens_state_vars_idx_in_state(\n    network_vars_labels,\n    # all_nodes_idx,\n    dyn_pf_fun_kwd_net_idxs,\n    n2s_all_nodes_idx;\n    selected_gens_state_vars_syms =\n        (:δ, :ed_dash, :eq_dash) )\n\nReturns state variables indices in the state for a selected set of variables in selected_gens_state_vars_syms.\n\nArguments\n\nnetwork_vars_labels: the system variables labels.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\nselected_gens_state_vars_syms::Tuple{Symbol}=(:δ, :ed_dash, :eq_dash): the selected  state variables. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_vd-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_vd","text":"get_gens_vd(\n    gens_δ, vh, θh;\n    gens_nodes_idx)\n\nReturns generators direct axis voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_gens_vq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_gens_vq","text":"get_gens_vq(\n    gens_δ, vh, θh;\n    gens_nodes_idx)\n\nReturns generators quardrature axis voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_id_iq_pg_vh_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_id_iq_pg_vh_Idx","text":"get_id_iq_pg_vh_Idx(\n    gens_nodes_idx)\n\nReturns indices of id, iq, pg, vh in a flattened vector id_iq_pg_vh.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_idxs_in_flattened_by_nodes_idx_wt_vars_syms-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_idxs_in_flattened_by_nodes_idx_wt_vars_syms","text":"get_idxs_in_flattened_by_nodes_idx_wt_vars_syms(\n    list_state_vars_syms,\n    gens_nodes_idx )\n\nReturns Idxs of variables per node based on a list of variables.\n\nExample\n\ntgensnodes_idx = [1, 2, 3]\n\ntliststatevarssyms = [:δ, :ω, :eqdash, :Efd]\n\ngetidxsinflattenedbynodesidxwtvarssyms(     tliststatevarssyms,     tgensnodesidx )\n\nVector{UnitRange{Int64}}:\n\n1:4  5:8  9:12\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_labels_by_nodes_idxs_and_vec_vec_syms-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_labels_by_nodes_idxs_and_vec_vec_syms","text":"get_labels_by_nodes_idxs_and_vec_vec_syms(\n    nodes_idxs,\n    plants_states_syms;\n    label_prefix = \"bus\" )\n\nReturns labels for state variables for a list of nodes in nodes_idxs.\n\nArguments\n\nnodes_idxs: the list of nodes indices.\nplants_states_syms: the state variables symbols per plant for all plants.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_list_vars_to_plot_by_syms-Tuple{Vector{Vector{Symbol}}}","page":"Api","title":"ePowerSim.get_list_vars_to_plot_by_syms","text":"This function returns a vector of strings from a list of list of symbols of variables to be plotted.\n\nlistselectedsymslist = [[:ω, :δ, :eddash, :eqdash],                            [:xg1, :xg2, :xg3, :τmtilade],                            [:vm, :vr1, :vr2, :vftilade],                            [:phatin, :v_ref]]\n\nlistofplotnames = getvarstoplotbysyms(     listoflistsselectedsyms)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_load_nodes_idx_wt_type_tup_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_load_nodes_idx_wt_type_tup_by_mpc","text":" get_load_nodes_idx_wt_type_tup_by_mpc(\n    mpc_load_type_data )\n\nReturns tuple of load nodes indices, load nodes types and static data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_load_nodes_static_tup_data_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_load_nodes_static_tup_data_by_mpc","text":"get_load_nodes_static_tup_data_by_mpc(\n    mpc_bus;\n    mpc_baseMVA = 1.0)\n\nReturns tuple of load nodes indices and static data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_load_scaling_red_continuation_distributed_slack_pf_ΔPQ_mismatch!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_load_scaling_red_continuation_distributed_slack_pf_ΔPQ_mismatch!","text":"Worked for powerflow and continuation powerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_loc_load_tup_idx_PQ_data_by_mpc-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_loc_load_tup_idx_PQ_data_by_mpc","text":"get_loc_load_tup_idx_PQ_data_by_mpc(\n    idx, Pd, Qd;\n    mpc_baseMVA = 1.0)\n\nReturns a tuple of (idx, Bus, loc_P, loc_Q, node_type) for generation node local load.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_mass_matrix_and_bool_dae_vars-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_mass_matrix_and_bool_dae_vars","text":"get_mass_matrix_and_bool_dae_vars(\n    state_labels,\n    algebraic_vars_labels)\n\nReturnsfor a system and generator mass matrices and dae boolean variables model_mass_matrix, model_bool_dae_vars, ode_gens_mass_matrix, ode_gens_bool_dae_vars.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_matpower_cases_files-Tuple{Any}","page":"Api","title":"ePowerSim.get_matpower_cases_files","text":"get_matpower_cases_files\n\nReturns all matpower files in a folder\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_matpower_mpc_type_iobuffer_by_case_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_matpower_mpc_type_iobuffer_by_case_file","text":"get_matpower_mpc_type_iobuffer_by_case_file\n\nAn utility function to get matpower mpc type (section) based on a given string type_key.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_matpower_mpc_type_iobuffer_by_dict-Tuple{Any}","page":"Api","title":"ePowerSim.get_matpower_mpc_type_iobuffer_by_dict","text":"get_matpower_mpc_type_iobuffer_by_dict\n\nAn utility function to get matpower mpc type (section) based on a given string type_key.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_matpower_scalar_as_iobuffer_by_case_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_matpower_scalar_as_iobuffer_by_case_file","text":"get_matpower_scalar_as_iobuffer_by_case_file\n\nAn utility function to get matpower scalar based on a given string type_key_string.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_matpower_scalar_as_iobuffer_by_symbol-Tuple{Any}","page":"Api","title":"ePowerSim.get_matpower_scalar_as_iobuffer_by_symbol","text":"get_matpower_scalar_as_iobuffer_by_symbol\n\nAn utility function to get matpower scalar based on a given symbol type_key_sym.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_model_nodes_types_names-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_model_nodes_types_names","text":"get_model_nodes_types_names(\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs )\n\nReturns nodes labels for generator buses, non-generator buses and all buses.\n\nArguments\n\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_model_syms-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_model_syms","text":"get_model_syms(\n    state_labels,\n    dyn_pf_fun_kwd_net_idxs;\n    label_prefix = \"bus\")\n\nReturn a system model symbols or labels for state and algebraic variables in a flattened vector.\n\nArguments\n\nstate_labels: the system state variables labels.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\nlabel_prefix::String=\"bus\": the label that should be used as a prefix.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_n2s_any-Tuple{Any}","page":"Api","title":"ePowerSim.get_n2s_any","text":"get_n2s_any(\n    a_net_group_idxs;\n    nothing_bool= false)\n\nReturns \"indices to ordinal\" dictionaries of indices of any type of nodes in a network.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_namedtuple_dict_types_dyn_or_output_func-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_namedtuple_dict_types_dyn_or_output_func","text":"get_namedtuple_dict_types_dyn_or_output_func(\n    ode_types_func,\n    dae_types_func;\n    ode_type = :ode,\n    dae_type = :dae )\n\nReturn a namedtuple of dictionaries for ode and dae functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_namedtuple_of_findnz-Tuple{Any}","page":"Api","title":"ePowerSim.get_namedtuple_of_findnz","text":"get_namedtuple_of_findnz(\n    Ybus)\n\nReturns a namedtuple of rows indices, columns indices and non-zero values of a sparse matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nested_nt_from_nt_wt_dict-Tuple{Any}","page":"Api","title":"ePowerSim.get_nested_nt_from_nt_wt_dict","text":"get_nested_nt_from_nt_wt_dict(\n    a_nested_nt )\n\nConverts a dict in a namedtuple to a namedtuple.\n\nExample\n\n\ntt = (plant_type = \"plant_cb_v6\",\n      components_type = Dict{Symbol, Any}(\n          :gen => \"SM_2axis_cb_v6\",\n          :avr => \"avr_t1_cb_sauer\",\n          :gov => \"gov_t1_cb_sauer\"),\n      idx = 1)\n\nget_a_plant_data_json_to_nt(\n    json_a_plant;\n    in_components_type_sym = true)\n\nget_nested_nt_from_nt_wt_dict( tt )\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_net_data_by_components_from_json_file-Tuple{Any}","page":"Api","title":"ePowerSim.get_net_data_by_components_from_json_file","text":"get_net_data_by_components_from_json_file(\n    net_data_by_components_file;\n    in_components_type_sym = false )\n\nReturns namedtuples of dynamic network data plant_generators_data_from_json, plant_loads_data_from_json, plant_transmission_data_from_json, edge_data_from_json, shunt_data_from_json, baseMVA_data_from_json, gencost_data_from_json.\n\nArguments\n\nnet_data_by_components_file::String: the path to network json file.\nin_components_type_sym::Bool=false: the variable that determines how plants data are stored in json network file.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_net_nodes_type_idxs_by_json-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_net_nodes_type_idxs_by_json","text":"get_net_nodes_type_idxs_by_json(\n    plant_generators_data_from_json,\n    plant_loads_data_from_json,\n    plant_transmission_data_from_json )\n\nReturns list of indices of various type of nodes in a network.\n\nThese are:\n\n`slackbusidx,  gensidx,  slackgensnodesidx,  nonslackgensnodesidx,  gensnodesidx,\n\ngenswithlocloadidx,  gensnodeswithlocloads_idx,\n\nlocloadexist,  loadnodesidx,  transmissionnodesidx,  nongensnodesidx,  allnodesidx,  nonslackgensandnongensidx,  nodeswithdemandsidx`\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_net_nodes_type_idxs_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_net_nodes_type_idxs_by_mpc","text":"get_net_nodes_type_idxs_by_mpc( mpc_bus )\n\nReturns list of indices of various type of nodes in a network.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_net_static_data_by_components_by_xlsx-Tuple{}","page":"Api","title":"ePowerSim.get_net_static_data_by_components_by_xlsx","text":"get_net_static_data_by_components_by_xlsx(\n    ; case_name\n    data_dir,\n    by_components )\n\nReturns selected static parameters and dynamic types of components from network model xlsx file.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_network_vars_labels-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_network_vars_labels","text":"get_network_vars_labels(\n    gens_govs_avrs_states_syms,\n    dyn_pf_fun_kwd_net_idxs;\n    label_prefix = \"bus\",\n    plants_states_by_per_comp = false,\n    plants_states_by_per_plant = true )\n\nReturn a system network states and algebraic variables label in a flatted.\n\nArguments\n\ngens_govs_avrs_states_syms: the namedtuple of states variables symbols  of generator,  governors and automatic voltage regulator.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\nlabel_prefix::String=\"bus\": the label that should be used as a prefix.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_node_dst_edges-Tuple{Int64, Any}","page":"Api","title":"ePowerSim.get_node_dst_edges","text":"get_node_dst_edges((node_number::Int64, Cnb)\n\nReturns a node destination edges, they are edges whose the node is a destination node. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_node_src_edges-Tuple{Int64, Any}","page":"Api","title":"ePowerSim.get_node_src_edges","text":"get_node_src_edges(node_number::Int64, Cnb)\n\nReturns a node source edges, they are edges whose the node is a source node. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_Yshunt_by_generic-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_nodes_Yshunt_by_generic","text":"get_nodes_Yshunt_by_generic(\n    buses_Gs,\n    buses_Bs;\n    baseMVA = 1.0 )\n\nReturns a list of per unit nodes shunt admittance.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_dict_static_data_by_mpc-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_nodes_dict_static_data_by_mpc","text":"get_nodes_dict_static_data_by_mpc(\n    mpc_bus,\n    mpc_gen;\n    mpc_baseMVA = 1.0 )\n\nReturns an OrderedDict of static data indexed by generators indices.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_idx_and_Yshunt_by_generic-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_nodes_idx_and_Yshunt_by_generic","text":"get_nodes_idx_and_Yshunt_by_generic(\n    buses_idx,\n    buses_Gs,\n    buses_Bs;\n    baseMVA = 1.0 )\n\nReturns a list of tuples of nodes indices and nodes shunt admittances.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_idx_and_Yshunt_non_zero-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_nodes_idx_and_Yshunt_non_zero","text":"get_nodes_idx_and_Yshunt_non_zero(\n    buses_Gs,\n    buses_Bs;\n    baseMVA = 1.0 )\n\nReturns namedtuples y_sh_shunt_exist, nz_y_sh_idxs, nz_y_sh  for nodes non-zero shunt admittances.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_incident_edges_by_orientations-Tuple{Any}","page":"Api","title":"ePowerSim.get_nodes_incident_edges_by_orientations","text":"get_nodes_incident_edges_by_orientations(\n    edges_orientations )\n\nReturns nodes incident edges.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_incident_edges_to_or_fro-Tuple{Any}","page":"Api","title":"ePowerSim.get_nodes_incident_edges_to_or_fro","text":"get_nodes_incident_edges_to_or_fro(\n    to_or_fro_edges_current )\n\nReturns sum of injection currents at a node by its source or destination edges.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_state_algb_vars_indices_in_system-Tuple{}","page":"Api","title":"ePowerSim.get_nodes_state_algb_vars_indices_in_system","text":"get_nodes_state_algb_vars_indices_in_system(\n    ; network_vars_labels =\n        network_vars_labels,\n    nodes_name = [\"bus1\", \"bus2\"],\n    vars = [:ω, :δ])\n\nReturns indices of state_algebraic variables of specified nodes in the systems.\n\nIt is meant to extract the indices in sol.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nodes_static_tup_data_by_mpc-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_nodes_static_tup_data_by_mpc","text":"get_nodes_static_tup_data_by_mpc(\n    mpc_bus,\n    mpc_gen;\n    mpc_baseMVA = 1.0 )\n\nReturns tuples of static data indexed by generating and non-generating plants indices.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_non_gen_node_tup_idx_PQ_data_by_mpc-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_non_gen_node_tup_idx_PQ_data_by_mpc","text":"get_non_gen_node_tup_idx_PQ_data_by_mpc(\n    idx, Pd, Qd;\n    mpc_baseMVA = 1.0)\n\nReturns a tuple of (idx, Bus, P, Q) for non-generation node.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_non_gen_plants_PQ_and_idx_by_json-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_non_gen_plants_PQ_and_idx_by_json","text":"This function returns a vector of properties of non generator nodes, selected by the variable selection.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_non_null_list-Tuple{Any}","page":"Api","title":"ePowerSim.get_non_null_list","text":"get_non_null_list(list_of_lists)\n    return [ a_list for a_list in\n                list_of_lists\n                if a_list != []]\n\nReturns non empty lists.\n\nll_1 = [[9,2], [4,5,7,3], [3,6,8,4]]\n\ngetnonnulllist(ll1)\n\nll_2 = [[9,2], [], [3,6,8,4]]\n\ngetnonnulllist(ll2)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_non_null_list_and_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_non_null_list_and_Idx","text":"get_non_null_list_and_Idx(\n    list_of_lists)\n\nReturns non empty lists and their indices.\n\nll_1 = [[9,2], [4,5,7,3], [3,6,8,4]]\n\ngetnonnulllistandIdx(ll1)\n\nll_2 = [[9,2], [], [3,6,8,4]]\n\ngetnonnulllistandIdx(ll2)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nt_additional_data-Tuple{Any}","page":"Api","title":"ePowerSim.get_nt_additional_data","text":"get_nt_additional_data(\n    additional_data)\n\nReturns additional data as namedtuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nt_components_data-Tuple{Any}","page":"Api","title":"ePowerSim.get_nt_components_data","text":"get_nt_components_data(\n    components_data)\n\nReturns namedtuples of components names and parameters or data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nt_components_type-Tuple{Any}","page":"Api","title":"ePowerSim.get_nt_components_type","text":"get_nt_components_type(\n    components_type)\n\nReturns namedtuple of components property names and symbols for a component type.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_nt_vec_wt_vec_vec_per_paras-Tuple{Any}","page":"Api","title":"ePowerSim.get_nt_vec_wt_vec_vec_per_paras","text":"get_nt_vec_wt_vec_vec_per_paras(\n    vec_vec_per_node;\n    nt_syms = (:nothing, ),\n    vec_datatype = Float64 )\n\nConvert vec_namedtuple to nt_vector, vector of namedtuples to namedtuples of vector per parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_ntuple_status_steady_state_data-Tuple{}","page":"Api","title":"ePowerSim.get_ntuple_status_steady_state_data","text":"get_ntuple_status_steady_state_data(\n    ;<keyword arguments>)\n\nReturns namedtuples of data for network status in list_network_status. The network status in the list are :pre_fault_state, :fault_state, :post_fault_state.\n\nArguments\n\nnet_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\npf_alg: power flow solver abstol: the absolute error tolerance reltol: the relative error tolerance on_fault_time: the on fault time clear_fault_time: the clear fault time list_fault_point_from_node_a::Vector{Float64}=[0.3]: the list containing a ratio of the fault point from the source (from) orientation of lines list_fault_resistance::Vector{Float64} = [0.001]: the list containing fault resistances of each fault in the network. list_no_line_circuit::Vector{Float64} = [4]: the list containing the number of circuits per faulted lines list_edges_to_have_fault::Vector{Int64} = [2]: the list containing indices of lines that should have a fault.   clear_fault_selection_list::Vector{Int64} = [1]: the list containing indices of faulted lines to be cleared in list_edges_to_have_fault. with_faults::Bool=false: a legacy boolean variable. timespan: the simulation time. list_network_status: the list of network status.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_ode_flat_para_Idxs_in_Idxs-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_ode_flat_para_Idxs_in_Idxs","text":"get_ode_flat_para_Idxs_in_Idxs(\n    gens_vh_θh,\n    gens_nodes_ωs_ωref0_vref0_porder0,\n    gens_dynamic_id_iq_pg_vh )\n\nReturns namedtuples of gens_nodes_vh_θh_idx_in_Idx, gens_nodes_ωs_ωref0_vref0_porder0_idx_in_Idx, gens_nodes_id_iq_pg_vh_idx_in_Idx.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_ode_gens_generic_para-Tuple{Any}","page":"Api","title":"ePowerSim.get_ode_gens_generic_para","text":" get_ode_gens_generic_para(\n     plant_generators_data_from_json;\n     sequence_order =\n         gens_generic_sequence_order,\n     selections =\n         ode_gens_generic_selections)\n\nReturns a namedtuple of selected parameters of devices from plant_generators_data_from_json.\n\nArguments\n\nsequence_order::Tuple{Symbol}: the selection order of components data.\nselections::Tuple{Symbol}: the tuple of parameters data to be selected.\n\nIt is used in get_ode_gens_generic_para, get_generic_gens_avr_gov_para\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_only_adjacent_nodes_idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_only_adjacent_nodes_idx","text":"get_only_adjacent_nodes_idx(\n    nodes_idx_with_adjacent_nodes_idx)\n\nReturns only adjacent nodes indicies from nodesidxwithadjacentnodes_idx.\n\nIt does not consider the first entry in each row of nodesidxwithadjacentnodes_idx.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_opf_net_optimisation_parameters-Tuple{Any}","page":"Api","title":"ePowerSim.get_opf_net_optimisation_parameters","text":"get_opf_net_optimisation_parameters(\n    case_file )\n\nReturns network optimisation parameters for optimal power flow, unit commitment or economic dispatch\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_participation_factors-Tuple{Any}","page":"Api","title":"ePowerSim.get_participation_factors","text":"https://tobydriscoll.net/fnc-julia/linsys/norms.html\n\nhttps://discourse.julialang.org/t/computing-left-eigenvectors-with-high-precision/72949\n\nhttps://ralphas.github.io/GenericSchur.jl/stable/\n\nget_participation_factors This function returns the participation factor matrix\n\nSauer: see page 232, equation 8.84\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_node_flat_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_node_flat_idxs","text":"get_per_node_flat_idxs(\n    list_vars_or_paras )\n\nReturns for a vector of vectors list_vars_or_paras a  per sub vector indices  as per_node_vars_or_paras_Idx.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_node_flat_para_and_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_node_flat_para_and_idxs","text":"get_per_node_flat_para_and_idxs(\n    list_vars_or_paras )\n\nReturns for a vector of vectors list_vars_or_paras a flattened vector, per sub vector indices  as flattend_per_node_vars_or_paras,  and per_node_vars_or_paras_Idx respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_node_para_to_per_vars_or_paras-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_per_node_para_to_per_vars_or_paras","text":"get_per_node_para_to_per_vars_or_paras(\n    list_per_node_vars_or_paras,\n    dims_vars_or_paras_types )\n\nConverts vars or paras given in per node format to per vars or paras format.\n\nThe dimension of each of the per vars or paras should be supplied in a list dims_vars_or_paras_types\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_node_per_vars_or_paras_flat_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_node_per_vars_or_paras_flat_idxs","text":"get_per_node_per_vars_or_paras_flat_idxs(\n    list_vars_or_paras )\n\nReturns for a vector of vectors list_vars_or_paras per sub vector indices and sub vector indices in the flattened vector as per_node_per_vars_or_paras_Idxs and per_node_vars_or_paras_Idx respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_node_per_vars_or_paras_flat_para_and_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_node_per_vars_or_paras_flat_para_and_idxs","text":"get_per_node_per_vars_or_paras_flat_para_and_idxs(\n    list_vars_or_paras )\n\nReturns for a vector of vectors list_vars_or_paras a flattened vector, per sub vector indices and sub vector indices in the flattened vector as flattend_per_node_vars_or_paras, per_node_vars_or_paras_Idx, per_node_per_vars_or_paras_Idxs respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_vars_or_paras_flat_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_vars_or_paras_flat_idxs","text":"get_per_vars_or_paras_flat_idxs(\n    list_vars_or_paras )\n\nReturns indices per parameter or variable per_vars_or_paras_Idx for a flattened vector of vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_vars_or_paras_flat_para_and_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_vars_or_paras_flat_para_and_idxs","text":"get_per_vars_or_paras_flat_para_and_idxs(\n    list_vars_or_paras )\n\nReturns for a vector of vectors a flattened vector and and per sub vector indices as flattend_per_vars_or_paras, and per_vars_or_paras_Idx respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_vars_or_paras_per_node_flat_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_vars_or_paras_per_node_flat_idxs","text":"get_per_vars_or_paras_per_node_flat_idxs(\n    list_vars_or_paras )\n\nReturns namedtuple per_vars_or_paras_Idx, and per_vars_or_paras_per_node_Idx\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_vars_or_paras_per_node_flat_para_and_idxs-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_vars_or_paras_per_node_flat_para_and_idxs","text":"get_per_vars_or_paras_per_node_flat_para_and_idxs(\n    list_vars_or_paras )\n\nReturns namedtuples of flattend_per_vars_or_paras, per_vars_or_paras_Idx, and per_vars_or_paras_per_node_Idx.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_per_vars_or_paras_to_per_node-Tuple{Any}","page":"Api","title":"ePowerSim.get_per_vars_or_paras_to_per_node","text":"get_per_vars_or_paras_to_per_node(\n    list_vars_or_paras)\n\nConverts vars or paras given in per vars or paras format to per node format.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq","text":"get_pf_dyn_idq(\n    vh, θh,\n    δ_ω_ed_eq,\n    ra_Xd_dash_Xq_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq","text":"get_pf_dyn_idq(\n    vh, θh, δ, ω,\n    ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq","text":"get_pf_dyn_idq(\n    vh_θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq_net-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq_net","text":"get_pf_dyn_idq_net( id, iq, δ )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq_net-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq_net","text":"get_pf_dyn_idq_net( idq, δ )\n\nReturns a generator direct current id and quadrature current iq in network reference frame.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq_θ_π_vhθh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq_θ_π_vhθh","text":"get_pf_dyn_idq_θ_π_vhθh(\n    vh, θh,\n    δ_ω_ed_eq,\n    ra_Xd_dash_Xq_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq_θ_π_vhθh-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq_θ_π_vhθh","text":"get_pf_dyn_idq_θ_π_vhθh(\n    vh, θh,\n    δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dyn_idq_θ_π_vhθh-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_pf_dyn_idq_θ_π_vhθh","text":"get_pf_dyn_idq_θ_π_vhθh(\n    vh_θh,\n    δ_ω_ed_eq,\n    ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dynamic_idq_θ_π_vhθh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_pf_dynamic_idq_θ_π_vhθh","text":"get_pf_dynamic_idq_θ_π_vhθh(\n    vh, θh, δ_ω_ed_eq, ra_Xd_dash_Xq_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dynamic_idq_θ_π_vhθh-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_pf_dynamic_idq_θ_π_vhθh","text":"get_pf_dynamic_idq_θ_π_vhθh(\n    vh, θh,\n    δ, ω, ed_dash, eq_dash,\n    ra, X_d_dash, X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_dynamic_idq_θ_π_vhθh-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_pf_dynamic_idq_θ_π_vhθh","text":"get_pf_dynamic_idq_θ_π_vhθh(\n    vh_θh, δ_ω_ed_eq, ra_X_d_dash_X_q_dash )\n\nReturns a generator direct current id and quadrature current iq.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_transformed_idxs-Tuple{}","page":"Api","title":"ePowerSim.get_pf_transformed_idxs","text":"get_pf_transformed_idxs(\n    ;slack_gens_nodes_idx,\n    non_slack_gens_nodes_idx,\n    gens_nodes_idx,\n    non_gens_nodes_idx,\n    gens_with_loc_load_idx,\n    all_nodes_idx,\n\n    n2s_slack_gens_idx,\n    n2s_non_slack_gens_idx,\n    n2s_gens_idx,\n    n2s_non_gens_idx,\n    n2s_gens_with_loc_load_idxs,\n    n2s_all_nodes_idx )\n\nReturns transformed indices of nodes types.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_pf_vh_θh_idx_and_idx2Idx-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_pf_vh_θh_idx_and_idx2Idx","text":"get_pf_vh_θh_idx_and_idx2Idx(\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs)\n\nReturns indices of vh, θh, and indices transformation dictionaries.\n\nArguments\n\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_plants_states_syms-Tuple{Any}","page":"Api","title":"ePowerSim.get_plants_states_syms","text":"get_plants_states_syms(\n    gens_govs_avrs_states_syms)\n\nReturn plants states variables symbols per plant for all generator plants in a vector of vectors.\n\nA generator plant consist of a generator, automatic voltage regulator, governor etc.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_plants_states_syms_and_labels-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_plants_states_syms_and_labels","text":"get_plants_states_syms_and_labels(\n    gens_govs_avrs_states_syms,\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs)\n\nReturn a system namedtuple of state_vars_idx, vec_comp_states_Idx, plants_states_syms, generic_state_sym, state_labels, algebraic_vars_labels, and network_vars_labels.\n\nArguments\n\ngens_govs_avrs_states_syms: the namedtuple of states variables symbols  of generator,  governors and automatic voltage regulator.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_plants_states_syms_wt_labels_wt_names-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_plants_states_syms_wt_labels_wt_names","text":"get_plants_states_syms_wt_labels_wt_names(\n    gens_govs_avrs_states_syms,\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs)\n\nReturn a system namedtuple of state_vars_idx, vec_comp_states_Idx, plants_states_syms, generic_state_sym, state_labels, algebraic_vars_labels, network_vars_labels, model_syms, nodes_names, gens_nodes_names, non_gens_nodes_names, SM_gens_nodes_names,  and SC_gens_nodes_names.\n\nArguments\n\ngens_govs_avrs_states_syms: the namedtuple of states variables symbols  of generator,  governors and automatic voltage regulator.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_renewable_energy_net_optimisation_parameters-NTuple{7, Any}","page":"Api","title":"ePowerSim.get_renewable_energy_net_optimisation_parameters","text":"get_renewable_energy_net_optimisation_parameters(\n    case_file,\n\n    wind_gens_cost_scale,    \n    solar_gens_cost_scale,\n\n    wind_gens_capacity_scale,    \n    solar_gens_capacity_scale,\n\n    active_power_demand_deviation_scale,\n    reactive_power_demand_deviation_scale)\n\nReturn renewable energy network optimisation parameters for optimal power flow, unit commitment or economic dispatch\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_scaling_red_continuation_distributed_slack_pf_ΔPQ_mismatch!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_scaling_red_continuation_distributed_slack_pf_ΔPQ_mismatch!","text":"Worked for powerflow but did not work for continuation powerflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_avrs_ode_para_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_selected_avrs_ode_para_by_json","text":"get_selected_avrs_ode_para_by_json is more generic compared to\n\nget_avrs_ode_para_by_json_generic, get_avrs_ode_para_by_json\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_comp_properties_by_lens-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_selected_comp_properties_by_lens","text":"get_selected_comp_properties_by_lens\n\nThis is an utility function that return a subset of properties determined by  selections as a vector of namedtuple.\n\nIt first assets that the selection is a subset of properties of lensed_comp_data.\n\nlensed_comp_data is the result of application of lensfunc to compdata.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_comps_ode_para_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_selected_comps_ode_para_by_json","text":"get_selected_comps_ode_para_by_json can be used for any component for a plant.\n\nIt is more generic compared to:\n\nget_gens_ra_and_reactances_by_json,\n\nget_gens_ode_para_by_json,\n\nget_avrs_ode_para_by_json_generic,\n\nget_avrs_ode_para_by_json,\n\nget_selected_avrs_ode_para_by_json, and\n\nget_govs_ode_para_by_json\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_comps_properties_by_lens-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_selected_comps_properties_by_lens","text":"get_selected_comps_properties_by_lens\n\nThis is an utility function that return a subset of properties determined by  selections as a vector of namedtuple.\n\nselectedgensparas =     getselectedcompspropertiesbylens(         getgendynparasinnet,         plantgenerators;         selections =             genstaticparaselections )\n\nselectedgensparas = [     (P = 72.3, Q = 27.03, vh = 1.04,      vmax = 1.1, vmin = 0.9,      Qmax = 300, Qmin = -300,      Pmax = 250, Pmin = 10,      Sn = 390.51248379533274),     (P = 72.3, Q = 27.03, vh = 1.04,      vmax = 1.1, vmin = 0.9,      Qmax = 300, Qmin = -300,      Pmax = 250, Pmin = 10,      Sn = 390.51248379533274),     (P = 72.3, Q = 27.03, vh = 1.04,      vmax = 1.1, vmin = 0.9,      Qmax = 300, Qmin = -300,      Pmax = 250, Pmin = 10,      Sn = 390.51248379533274)]\n\nIt is like using a map on\n\nget_selected_comp_properties_by_lens\n\nselectedgensparas =     getselectedcomppropertiesbylens.(         getgendynparasinnet,         plantgenerators;         selections =             genstaticparaselections )\n\nselectedgensparas =     map((y) ->     getselectedcomppropertiesbylens(         getgendynparasinnet,         y;         selections =           genstaticparaselections),         plantgenerators )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_edges_data_by_json-Tuple{Any}","page":"Api","title":"ePowerSim.get_selected_edges_data_by_json","text":"get_selected_edges_data_by_json(\n    edge_data_from_json;\n    sequence_order =\n        (:components_data, ) ,\n    selections =\n        (:r, :x, :b, :ratio,\n         :angle) )\n\nReturns a vector of properties of edges selected by the variables sequence_order and selection.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_vec_nt_as_nt_vec_by_lens-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_selected_vec_nt_as_nt_vec_by_lens","text":"get_selected_comp_as_nt_vec_by_lens\n\nThis is an utility function that return a subset of properties determined by  selections as a namedtuple of vectors.\n\nIt first assets that the selection is a subset of properties of lensed_comp_data.\n\nlensed_comp_data is the result of application of lensfunc to compdata.\n\ngetselectedcompasntvecby_lens(\n\ngetgendynparasin_net,\n\nplant_generators;\n\nselections =\n\ngenstaticpara_selections,\n\nvec_datatype = Float64 )\n\nselectedcompasntvec =     (P = [72.3, 72.3, 72.3],      Q = [27.03, 27.03, 27.03],      vh = [1.04, 1.04, 1.04],      vmax = [1.1, 1.1, 1.1],      vmin = [0.9, 0.9, 0.9],      Qmax = [300.0, 300.0, 300.0],      Qmin = [-300.0, -300.0, -300.0],      Pmax = [250.0, 250.0, 250.0],      Pmin = [10.0, 10.0, 10.0],      Sn = [390.512, 390.512, 390.512])\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_vec_nt_to_vec_vec-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_selected_vec_nt_to_vec_vec","text":"get_selected_vec_nt_to_vec_vec(\n    vec_namedtuple,\n    nothing;\n    selections = (:nothing, ),\n    vec_datatype = Float64 )\n\nConvert vec_namedtuple to nt_vector, vector of namedtuples to namedtuples of vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_selected_vec_nt_to_vec_vec-Tuple{Any}","page":"Api","title":"ePowerSim.get_selected_vec_nt_to_vec_vec","text":"get_selected_vec_nt_to_vec_vec(\n    vec_namedtuple;\n    selections = (:nothing, ) )\n\nConvert vec_namedtuple to nt_vector, vector of namedtuples to namedtuples of vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data-Tuple{}","page":"Api","title":"ePowerSim.get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data","text":"get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_edges_data(\n    ;edges_fbus, edges_tbus,\n    edges_type,\n    edges_r, edges_x, edges_b,\n    edges_ratio, edges_angle,\n    Gs, Bs,\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA=1.0,\n    basekV=1.0,\n    line_data_in_pu = true)\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic-NTuple{9, Any}","page":"Api","title":"ePowerSim.get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic","text":"get_sense_Ynet_wt_nodes_idx_wt_adjacent_nodes_by_generic(\n    branches_fbus,\n    branches_tbus,\n    r,\n    x,\n    b,\n    ratio,\n    angle,        \n    Gs,\n    Bs;\n    edges_type,\n    all_nodes_idx,\n    n2s_all_nodes_idx,\n    baseMVA = 1.0,\n    basekV = 1.0,\n    baseShunt = 1.0 )\n\nReturns a namedtuple of network admitance vectors and network nodes neigbouhood vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_shunt_data_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_shunt_data_by_mpc","text":"get_shunt_data_by_mpc(\n    mpc_bus;\n    mpc_baseMVA =\n        1.0)\n\nReturns a dict Dict{:shunt_idx,:shunt_Gs,:shunt_Bs } for network lines shunt parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_similar_collection_diff-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_similar_collection_diff","text":"get_similar_collection_diff(\n    collection_1, collection_2)\n\nReturns the difference between two list, tuple, collections.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_size_Ybus-Tuple{Any}","page":"Api","title":"ePowerSim.get_size_Ybus","text":"get_size_Ybus(\n    Ybus)\n\nReturns the memory size of Ybus.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_size_Ynet_wt_nodes_idx_wt_adjacent_nodes-Tuple{Any}","page":"Api","title":"ePowerSim.get_size_Ynet_wt_nodes_idx_wt_adjacent_nodes","text":"get_size_Ynet_wt_nodes_idx_wt_adjacent_nodes(\n    Ynet_wt_nodes_idx_wt_adjacent_nodes)\n\nReturns the memory size of Ynet_wt_nodes_idx_wt_adjacent_nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_size_Yπ_net_Yshunt_wt_nodes_idx_wt_adjacent_nodes-Tuple{Any}","page":"Api","title":"ePowerSim.get_size_Yπ_net_Yshunt_wt_nodes_idx_wt_adjacent_nodes","text":"get_size_Yπ_net_Yshunt_wt_nodes_idx_wt_adjacent_nodes(\n    Yπ_net_Yshunt_wt_nodes_idx_wt_adjacent_nodes)\n\nReturns the memory size of Yπ_net_Yshunt_wt_nodes_idx_wt_adjacent_nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_slack_gens_vh_θh_gens_vh_non_slack_gens_vh-NTuple{4, Any}","page":"Api","title":"ePowerSim.get_slack_gens_vh_θh_gens_vh_non_slack_gens_vh","text":"get_slack_gens_vh_θh_gens_vh_non_slack_gens_vh(\n    vh,\n    θh,\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs)\n\nReturns slack_gens_vh, slack_gens_θh, gens_vh, and non_slack_gens_vh.\n\nArguments\n\nvh: the network nodes voltage magnitudes.\nθh: the network nodes voltage angles.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_algebraic_vars_Idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_state_algebraic_vars_Idx_in_state","text":"get_state_algebraic_vars_Idx_in_state(\n    generic_state_labels,\n    gens_nodes_idx,\n    all_nodes_idx)\n\nReturns state variables, and algebraic variables indices in the state.\n\nArguments\n\ngeneric_state_labels: the states variables labels.  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_algebraic_vars_wt_fault_Idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_state_algebraic_vars_wt_fault_Idx_in_state","text":"get_state_algebraic_vars_wt_fault_Idx_in_state(\n    generic_state_labels,\n    gens_nodes_idx,\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns state variables, and algebraic variables with fault nodes algebraic variables indices in the state.\n\nArguments\n\ngeneric_state_labels: the states variables labels.  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_and_algebraic_vars_Idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_state_and_algebraic_vars_Idx_in_state","text":"get_state_and_algebraic_vars_Idx_in_state(\n    state_labels,\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs;\n    no_lines_fault = 1 )\n\nReturn indices of state and algebraic variables for a normal system and faulted system states in a flattened vector.\n\nstate_vars_and_i_dq_Idx_in_state, state_vars_and_i_dq_wt_fault_Idx_in_state, state_algebraic_vars_Idx_in_state, and state_algebraic_vars_wt_fault_Idx_in_state.\n\nArguments\n\nstate_labels: the system state variables labels.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\nno_lines_fault::Int64 = 1: the number of lines faults.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_labels-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_state_labels","text":"get_state_labels(\n    gens_govs_avrs_states_syms,\n    gens_nodes_idx;\n    label_prefix = \"bus\",\n    plants_states_by_per_comp = false,\n    plants_states_by_per_plant = true )\n\nReturn plants states variables symbols or lables for all generator plants  in a flattened vector.\n\nA generator plant consist of a generator, automatic voltage regulator, governor etc.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_vars_and_i_dq_Idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_state_vars_and_i_dq_Idx_in_state","text":"get_state_vars_and_i_dq_Idx_in_state(\n    generic_state_labels,\n    gens_nodes_idx,\n    all_nodes_idx )\n\nReturns state variables, nodes voltage magnitudes, nodes voltage angles,  generators direct axix current id, and generators quadrature axis current indices in the state.\n\nArguments\n\nnetwork_vars_labels: the system variables labels.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\nselected_gens_state_vars_syms::Tuple{Symbol}=(:δ, :ed_dash, :eq_dash):  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_vars_and_i_dq_wt_fault_Idx_in_state-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_state_vars_and_i_dq_wt_fault_Idx_in_state","text":"get_state_vars_and_i_dq_wt_fault_Idx_in_state(\n    generic_state_labels,\n    gens_nodes_idx,\n    all_nodes_idx;\n    no_lines_fault = 1)\n\nReturns state variables, nodes voltage magnitudes, nodes voltage angles,  generators direct axix current id, and generators quadrature axis current, fault node voltage magnitudes, fault node voltage angles,  indices in the state.\n\nArguments\n\ngeneric_state_labels: the states variables labels.  \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_state_vars_idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_state_vars_idx","text":"get_state_vars_idx(\n    gens_govs_avrs_states_syms)\n\nReturn indices of states  variables in the system in a flatted.\n\nArguments\n\ngens_govs_avrs_states_syms: the namedtuple of states variables symbols  of generator,  governors and automatic voltage regulator.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_states_Idx_syms_wt_functions-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.get_states_Idx_syms_wt_functions","text":"get_states_Idx_syms_wt_functions(\n    net_data_by_components_file,    \n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs;\n    components_libs_dir =\n        nothing,\n    no_lines_fault = 1 )\n\nReturns dynamic functions of components, states variables indices, algebraic variables indices, states variables labels, algebraic variables labels and most parameters indices.\n\nArguments\n\nnet_data_by_components_file: the network data file.\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\ncomponents_libs_dir: the components library folder.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_states_idx_by_nodes_idx_wt_vars_syms-Tuple{Any}","page":"Api","title":"ePowerSim.get_states_idx_by_nodes_idx_wt_vars_syms","text":"get_states_idx_by_nodes_idx_wt_vars_syms(\n    vec_nodes_states_vars_syms )\n\nReturns indices of state variables provided in vec_nodes_states_vars_syms in in the network. \n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_static_Idx_and_syms-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_static_Idx_and_syms","text":"get_static_Idx_and_syms(\n    dyn_pf_fun_kwd_net_idxs,\n    dyn_pf_fun_kwd_n2s_idxs;\n    no_lines_fault = 1)\n\nReturns  states variables indices, algebraic variables indices, states variables labels, algebraic variables labels and most parameters indices.\n\nArguments\n\ndyn_pf_fun_kwd_net_idxs: the namedtuple of node's type indices.\ndyn_pf_fun_kwd_n2s_idxs: the namedtuple of node's type indices translation dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_static_load_nodes_json_data_storage_format-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_static_load_nodes_json_data_storage_format","text":"get_static_load_nodes_json_data_storage_format(\n    load_nodes_static_tup_data,\n    load_nodes_idx_wt_type_tup;\n    plant_type = \"plant_PQ_Const_I\")\n\nReturns namedtuples of static load nodes data\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_static_loc_loads_json_data_storage_format-Tuple{Any}","page":"Api","title":"ePowerSim.get_static_loc_loads_json_data_storage_format","text":"get_static_loc_loads_json_data_storage_format(\n    loc_loads_idx_and_locP_locQ_data;\n    type_loc_load = \"loc_Load_t1\")\n\nReturns OrderedDict of namedtuples for generators local loads indexed by generators indices.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_static_transmission_nodes_json_data_storage_format-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_static_transmission_nodes_json_data_storage_format","text":"get_static_transmission_nodes_json_data_storage_format(\n    transmission_nodes_static_tup_data,\n    load_nodes_idx_wt_type_tup;\n    plant_type = \"plant_Transmission_t2\")\n\nReturns namedtuples of static transmission nodes data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_status_steady_state_parameters-Tuple{Any}","page":"Api","title":"ePowerSim.get_status_steady_state_parameters","text":"get_status_steady_state_parameters(\n    net_data_by_components_file;\n    <keyword arguments>)\n\nIt is used to simplify generation of parameters or data of a system that are needed for simulation.\n\nArguments\n\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow.\n\npf_alg: power flow solver\n\nabstol: the absolute error tolerance reltol: the relative error tolerance\n\non_fault_time: the on fault time clear_fault_time: the clear fault time\n\nlist_fault_point_from_node_a::Vector{Float64}=[0.3]: the list containing a ratio of the fault point from the source (from) orientation of lines list_fault_resistance::Vector{Float64} = [0.001]: the list containing fault resistances of each fault in the network. list_no_line_circuit::Vector{Float64} = [4]: the list containing the number of circuits per faulted lines.\n\nlist_edges_to_have_fault::Vector{Int64} = [2]: the list containing indices of lines that should have a fault.   clear_fault_selection_list::Vector{Int64} = [1]: the list containing indices of faulted lines to be cleared in list_edges_to_have_fault.\n\nwith_faults::Bool=false: a legacy boolean variable.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_sub_components_libs_dir-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_sub_components_libs_dir","text":"get_sub_components_libs_dir(\n    components_libs_dir,\n    sub_components_strings )\n\nReturns folders where sub-componets are stored.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_sub_components_libs_files-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_sub_components_libs_files","text":"get_sub_components_libs_files(\n    components_libs_dir,\n    components_files_string;\n    ext = \"json\" )\n\nReturns folders where sub-componets are stored.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_subsubtype-Tuple{Any}","page":"Api","title":"ePowerSim.get_subsubtype","text":"get_subsubtype(AbstractPowerSystemComponent)\n\nIt returns the subtypes of subtypes of abstract types of AbstractPowerSystemComponent. These are the subtypes of  SdGen, SdNonGen, SdGov, SdAvr,  SdPss, SdNonGenPlant, SdGenPlant and  SdBranchElement. It is used to get list_components_types which is a list of components defined in this package.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_system_net_data_wt_static_parameters-Tuple{Any}","page":"Api","title":"ePowerSim.get_system_net_data_wt_static_parameters","text":"get_system_net_data_wt_static_parameters(\n    case_name;\n    <keyword arguments>)\n\nIt is used to simplify static model parameters or data of a system that are needed for static analyses.\n\nArguments\n\n-case_name: the case name\n\nscript_dir::String=\"\": working folder\ndata_dir::String=\"\": data folder where all cases are stored\njson_net_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\npf_alg: power flow solver\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_system_net_static_data-Tuple{Any}","page":"Api","title":"ePowerSim.get_system_net_static_data","text":"get_system_net_static_data(\n    case_name;\n    <keyword arguments>)\n\nIt is used to simplify static model parameters or data of a system that are needed for static analyses.\n\nArguments\n\n-case_name: the case name\n\nscript_dir::String=\"\": working folder\ndata_dir::String=\"\": data folder where all cases are stored\njson_net_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow.\n\npf_alg: power flow solver no_lines_fault: the number of faults\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_system_simulation_parameters-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_system_simulation_parameters","text":"get_system_simulation_parameters(\n    net_data_by_components_file,\n    nothing;\n    <keyword arguments>)\n\nIt is used to simplify generation of parameters or data of a system that are needed for simulation.\n\nArguments\n\nnet_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow.\n\npf_alg: power flow solver\n\nabstol: the absolute error tolerance reltol: the relative error tolerance\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_system_simulation_parameters-Tuple{Any}","page":"Api","title":"ePowerSim.get_system_simulation_parameters","text":"get_system_simulation_parameters(\n    net_data_by_components_file;\n    <keyword arguments>)\n\nIt is used to simplify generation of parameters or data of a system that are needed for simulation.\n\nArguments\n\nnet_data_by_components_file: the network data file\ncomponents_libs_dir: the components library folder\nbasekV: the base voltage\nuse_pu_in_PQ: the boolean variable that determines if PQ should be in pu.\nline_data_in_pu: the boolean variable that informs if line data are in pu,\n\nuse_init_u0: the boolean variable that determines if initial state u0 should be used in a power flow. use_nlsolve: the boolean variable that determines if nlsolve should be used in power flow.\n\npf_alg: power flow solver\n\nabstol: the absolute error tolerance reltol: the relative error tolerance\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_transmission_nodes_static_tup_data_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.get_transmission_nodes_static_tup_data_by_mpc","text":"get_transmission_nodes_static_tup_data_by_mpc(\n    mpc_bus;\n    mpc_baseMVA = 1.0)\n\nReturns tuple of transmission nodes indices and static data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_ur_ui_Idx_in_state-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_ur_ui_Idx_in_state","text":"get_ur_ui_Idx_in_state(\n    dims, comps_ur_ui_Idx; counter=0 )\n\nReturns indices of ur, ui for a flattend system states.\n\nThe input are dims of components state and indices of ur and ui in each component state\n\nTest:\n\n\n\ncompsstatessyms = [[:ur,:ui], [:δ, :ω, :ur, :ui],     [:δ,:ur,:ω,:ui]]\n\ncomps_states = [[9,2], [4,5,7,3],     [3,6,8,4]]\n\ncompsflattenedstates = [comps_states...;]\n\ndims = length.(comps_states)\n\ncompsuruiIdx = [[1,2], [3,4], [2,4]]\n\nuruiIdxinstate = geturuiIdxinstate(dims,     compsurui_Idx; counter=0 )\n\nuruiinstate = [compsflattenedstates[inx]     for inx in         uruiIdxin_state ]\n\ncompsuview  = [view(compsflattenedstates,     uruiIdxinstate[Ind])         for Ind in             collect(1:length( uruiIdxinstate ))]\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_vars_idxs_in_range_Idxs-Tuple{Any, Any}","page":"Api","title":"ePowerSim.get_vars_idxs_in_range_Idxs","text":"get_vars_idxs_in_range_Idxs(\n    vec_unit_range,\n    list_vars_syms )\n\nReturns vectors of idxs as tuples\n\ngensnodesidx = [1,2,3] gensstatevarssyms = [:δ, :ω, :eqdash, :E_fd]\n\ngensstatesIdx =     getidxsinflattenedbynodesidxwtvarssyms(         gensstatevarssyms,         gensnodesidx  )\n\nsum( length.( gensstatesIdx ) )\n\n(δidxinstate, ωidxinstate, eqdashidxinstate, Efdidxinstate ) =     getvarsidxsinrangeIdxs(         gensstatesIdx,         gensstatevarssyms )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_vars_or_paras_Idxs_in_flattend-Tuple{Any}","page":"Api","title":"ePowerSim.get_vars_or_paras_Idxs_in_flattend","text":"get_vars_or_paras_Idxs_in_flattend(\n    vars_or_param_list_or_dims;\n    dims_given = true )\n\nReturns indices of variables or parameters in a flattended vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.get_ωref0_vref0_porder0_id_iq_vh_Idx-Tuple{Any}","page":"Api","title":"ePowerSim.get_ωref0_vref0_porder0_id_iq_vh_Idx","text":"get_ωref0_vref0_porder0_id_iq_vh_Idx(\n    gens_nodes_idx)\n\nReturns indices of ωref0, vref0, porder0, id, iq, vh in a flattened vector ωref0_vref0_porder0_id_iq_vh.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.idx_containing-Tuple{Any, Any}","page":"Api","title":"ePowerSim.idx_containing","text":"idx_containing(\n    network_vars_labels,\n    expr;\n    syms = true)\n\nReturns the list of indices of variables containing a given expr in network variable labels.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.init_im_plants_system_matrices_views!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.init_im_plants_system_matrices_views!","text":"This function initialises system matrices views Ax_view, Bx_view, Cx_view which are in vectors vec_Ax_views, vec_Bx_views, vec_Cx_views.\n\nThese views are created by create_gens_nodes_im_aggregate_system_matrices_Idx_and_views.\n\nThe intialisation is expected to be reflected in aggregate system matrices Ax_matrix, Bx_matrix, Cx_matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.init_plants_system_matrices_views!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.init_plants_system_matrices_views!","text":"This function initialises system matrices views Ax_view, Bx_view, Cx_view which are in vectors vec_Ax_views, vec_Bx_views, vec_Cx_views.\n\nThese views are created by create_gens_nodes_aggregate_system_matrices_Idx_and_views.\n\nThe intialisation is expected to be reflected in aggregate system matrices Ax_matrix, Bx_matrix, Cx_matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.init_plants_system_stability_matrices_views!-Tuple{Any, Any}","page":"Api","title":"ePowerSim.init_plants_system_stability_matrices_views!","text":"This function initialises system stability matrices views stab_Ax_view, stab_Bx_view, stab_Cx_view which are in vectors vec_stab_Ax_views, vec_stab_Bx_views, vec_stab_Cx_views.\n\nThese views are created by create_gens_nodes_aggregate_system_stability_matrices_Idx_and_views.\n\nThe intialisation is expected to be reflected in aggregate system matrices stab_Ax_matrix, stab_Bx_matrix, stab_Cx_matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.invZ_dq-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.invZ_dq","text":"invZ_dq(ra, X_d_dash, X_q_dash)\n\nReturns inverse Z_dq matrix transform for a generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.limit_violation-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.limit_violation","text":"limit_violation(x, x_max, x_min)\n\nReturns a boolean if x is outside its min and max range.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.loc_load_exist_bool_by_mpc-Tuple{Any}","page":"Api","title":"ePowerSim.loc_load_exist_bool_by_mpc","text":"loc_load_exist_bool_by_mpc( mpc_bus )\n\nReturns true or false if any of the generators has a local load.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.machine_to_network_ref_frame-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.machine_to_network_ref_frame","text":"machine_to_network_ref_frame(x_d, x_q, δ)\n\nReturns a  machine reference frame to network reference frame, Sauer page 160\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.make_a_component_state_no_callback_paras-Tuple{Any}","page":"Api","title":"ePowerSim.make_a_component_state_no_callback_paras","text":"An event is associated with a state. An event in a state (x1) can affect the state (x1) it occured in or another state (x_2).\n\nA state can have multiple events associated with it.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.make_csv_from_sols-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.make_csv_from_sols","text":"This function saves solution of cases in csv files\n\nlistsol = [solIEEE5BusplantSMcbidqcntrlandPQConstI,             solIEEE5BusplantSMcbv6cntrlandPQConstI,             solIEEE5BusplantSMcbidqcntrlandPQConstP,             solIEEE5BusplantSMcbv6cntrlandPQConst_P]\n\nlistprefix = [\"IEEE5BusplantSMcbidqcntrlandPQConstI\",                \"IEEE5BusplantSMcbv6cntrlandPQConstI\",                \"IEEE5BusplantSMcbidqcntrlandPQConstP\",                \"IEEE5BusplantSMcbv6cntrlandPQConst_P\"]\n\nmakecsvfromsols(csvfolder,                    listsol,                    listprefix;                    suffix = :csv)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.make_plots_with_names-NTuple{5, Any}","page":"Api","title":"ePowerSim.make_plots_with_names","text":"This function makes plots for selected symbols for a list of solutions:\n\nnetworkvarslabels = getnetworkvarslabels(NetworkData(caseIEEE5BusdynamicplantSMcbidqPQConstI()...))\n\nlistsol = [solIEEE5BusplantSMcbidqcntrlandPQConstI,             solIEEE5BusplantSMcbv6cntrlandPQConstI,             solIEEE5BusplantSMcbidqcntrlandPQConstP,             solIEEE5BusplantSMcbv6cntrlandPQConst_P]\n\nlistprefix = String.(nameof.(listcases))\n\nor\n\nlistprefix = [\"IEEE5BusplantSMcbidqcntrlandPQConstI\",                \"IEEE5BusplantSMcbv6cntrlandPQConstI\",                \"IEEE5BusplantSMcbidqcntrlandPQConstP\",                \"IEEE5BusplantSMcbv6cntrlandPQConst_P\"]\n\nlistselectedsymslist = [[:ω, :δ, :eddash, :eqdash],                            [:xg1, :xg2, :xg3, :τmtilade],                            [:vm, :vr1, :vr2, :vftilade],                            [:phatin, :v_ref]]\n\nmakeplotswithnames(figfolder, listsol, listprefix,                       listselectedsymslist,                       networkvars_labels; tspan = (0.0, 50.0),                       suffix = :pdf)\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.namedtuple_nested_selection-Tuple{Any}","page":"Api","title":"ePowerSim.namedtuple_nested_selection","text":"namedtuple_nested_selection(\n    nested_namedtuple;\n    sequence_order = (:nothing,),\n    selections = (:nothing,) )\n\nReturns a set of selection at the same level in a nested namedtuple.\n\nExample\n\n\n    some_plant_generators_data_from_json =\n        [(idx = 1,\n          plant_type = \"plant_wt_loc_load_v6\",\n          components_type =\n              (gen = \"SM_2axis_wt_loc_load_cb_v6\",\n               avr = \"avr_t1_cb\",\n               gov = \"gov_ieee_tgov1_cb\"),\n          components_data = (\n              gen = (T_d_dash = 7.4, D = 0, X_d = 0.8979,\n                     vh = 1.06, X_q = 0.646,\n                     ωs = 376.99111843077515,\n                     T_d_2dash = 0.03, Qmin = 0,\n                     Sn = 332.5503871596002,\n                     X_d_dash = 0.2995, T_q_dash = 0.3,\n                     Ωb = 376.99111843077515,\n                     Bus = \"bus1\", X_q_dash = 0.646,\n                     ra = 0, X_q_2dash = 0.4,\n                     Q = -16.9, Pmax = 332.4,\n                     Pmin = 0, xℓ = 0.2396,\n                     P = 232.4, vmax = 1.06,\n                     H = 5.148, Qmax = 10,\n                     vmin = 0.94, T_q_2dash = 0.033,\n                     X_d_2dash = 0.23), )),\n         (idx = 2,\n          plant_type = \"plant_wt_loc_load_v6\",\n          components_type =\n              (loc_load = \"loc_Load_t1\",\n               gen = \"SM_2axis_wt_loc_load_cb_v6\",\n               avr = \"avr_t1_cb\",\n               gov = \"gov_ieee_tgov1_cb\"),\n          components_data = (\n              loc_load = (Bus = \"bus2\",\n                          loc_P = 21.7,\n                          loc_Q = 12.7),\n              gen = (T_d_dash = 6.1, D = 0, X_d = 1.05,\n                     vh = 1.045, X_q = 0.98,\n                     ωs = 376.99111843077515,\n                     T_d_2dash = 0.04, Qmin = -40,\n                     Sn = 148.66068747318505,\n                     X_d_dash = 0.185, T_q_dash = 0.3,\n                     Ωb = 376.99111843077515,\n                     Bus = \"bus2\", X_q_dash = 0.36,\n                     ra = 0.0031, X_q_2dash = 0.13,\n                     Q = 42.4, Pmax = 140, Pmin = 0,\n                     xℓ = 0, P = 40, vmax = 1.06,\n                     H = 6.54, Qmax = 50, vmin = 0.94,\n                     T_q_2dash=0.099,X_d_2dash=0.13),))]\n\n\n    sequence_order = (:components_data, :gen)\n    \n    selections = (:P, :Q)\n    \n    namedtuple_nested_selection(\n        some_plant_generators_data_from_json;\n        sequence_order = sequence_order,\n        selections = selections )\n\n2-element Vector{Any}:\n (P = 232.4, Q = -16.9)\n (P = 40, Q = 42.4)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.network_to_machine_ref_frame-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.network_to_machine_ref_frame","text":"network_to_machine_ref_frame(x_r, x_i, δ)\n\nReturns a network to machine reference frame. Network reference frame to machine reference frame Sauer page 160\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.nineth-Tuple{Any}","page":"Api","title":"ePowerSim.nineth","text":"nineth(elements_container)\n\nReturns the nineth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.no_limit_violation-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.no_limit_violation","text":"no_limit_violation(x, x_max, x_min)\n\nReturns a boolean if x is within its min and max range.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.parse_matpower_data_as_csv-Tuple{Any, Any}","page":"Api","title":"ePowerSim.parse_matpower_data_as_csv","text":"parse_matpower_data_as_csv\n\nReturns a dictionary\n\nDict(        \"name\" => matrix_name,        \"columns_header\" => columns_header,        \"matrix_body\" => matrix_body_lines,        \"line_count\" => line_count )\n\nfor a matpower file section.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.parse_matpower_data_header-Tuple{Any, Any}","page":"Api","title":"ePowerSim.parse_matpower_data_header","text":"parse_matpower_data_header\n\nReturns matrix_name, columns_header, line_count for a section in matpower file.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.pertubation_by_itegrator-NTuple{5, Any}","page":"Api","title":"ePowerSim.pertubation_by_itegrator","text":"These functions are used in generating results for load pertubation, co-simulation, etc.\n\nget_sol_auxilliary_results, pertubation_by_itegrator\n\na_parameter_pertubation!, a_parameter_pertubation_and_step!\n\nsave_pertubation_stage_plot, save_co_sim_stage_plot,\n\nget_P_or_Q_idx_in_generic_model_dynamics_para\n\nget_make_df_header_generic_model_dynamics_para\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.pf_dynamic_nodal_current_balance-Tuple{Any, Any}","page":"Api","title":"ePowerSim.pf_dynamic_nodal_current_balance","text":"pf_dynamic_nodal_current_balance(\n    x_s, x_d)\n\nReturns dynamic nodal current balance at a node.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.polar_to_cartesian-Tuple{Any}","page":"Api","title":"ePowerSim.polar_to_cartesian","text":"polar_to_cartesian( v_θ )\n\nReturns the cartesian complex values for a polar values.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.recursive_dict_to_namedtuple-Tuple{Any}","page":"Api","title":"ePowerSim.recursive_dict_to_namedtuple","text":"recursive_dict_to_namedtuple(\n    mapping)\n\nConverts recursively a nested dictionary to a nested namedtuple.\n\nExample\n\n\ndict_values =\n    Dict{Symbol, Any}(\n        :V_R_max => 5.2,\n        :Tf => 0.35,\n        :Be => 1.555,\n        :Tr => 0.001,\n        :Ta => 0.2,\n        :Ka => 20,\n        :Te => 0.314,\n        :Kf => 0.063,\n        :V_R_min => -4.16,\n        :Ke => 1,\n        :gov => Dict{Symbol, Any}(\n            :p_max => 2.2,\n            :R => 0.02,\n            :p_min => 0.1,\n            :Ts => 0.2,\n            :Tc => 0.4,\n            :avr => Dict{Symbol, Any}(\n            :Tr => 0.001,\n            :Ta => 0.2,\n            :Ka => 20,\n            :Te => 0.314) ))\n\nrecursive_dict_to_namedtuple(dict_values)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.recursive_nested_namedtuple_wt_dict-Tuple{Any}","page":"Api","title":"ePowerSim.recursive_nested_namedtuple_wt_dict","text":"recursive_nested_namedtuple_wt_dict(\n    nested_namedtuple)\n\nConverts recursively a nested dictionary to a nested namedtuple.\n\nExample\n\n\n\nnt_values =\n    (\n        V_R_max = 5.2,\n        Tf = 0.35,\n        Be = 1.555,\n        Tr = 0.001,\n        Ta = 0.2,\n        Ka = 20,\n        Te = 0.314,\n        Kf = 0.063,\n        V_R_min = -4.16,\n        Ke = 1,\n        gov = Dict{Symbol, Any}(\n            :p_max => 2.2,\n            :R => 0.02,\n            :p_min => 0.1,\n            :Ts => 0.2,\n            :Tc => 0.4,\n            :avr => Dict{Symbol, Any}(\n            :Tr => 0.001,\n            :Ta => 0.2,\n            :Ka => 20,\n                :Te => 0.314) ))\n\nrecursive_nested_namedtuple_wt_dict(\n    nt_values)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.round_up_Ynet-Tuple{Any}","page":"Api","title":"ePowerSim.round_up_Ynet","text":"round_up_Ynet(\n    Ynet;\n    fractional_digits=4)\n\nReturns a rounded version Ynet based on fractional_digits.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.save_matpower_data_as_csv-Tuple{Any, Any}","page":"Api","title":"ePowerSim.save_matpower_data_as_csv","text":"save_matpower_data_as_csv\n\nSaves a matpower section as a csv file. The inputs to this function is a dictionary which is an output of parse_matpower_data_as_csv\n\nDict(        \"name\" => matrix_name,        \"columns_header\" => columns_header,        \"matrix_body\" => matrix_body_lines,        \"line_count\" => line_count )\n\nand a directory to store the csv file. The name of the csv file is taken from matrix_name in the dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.save_matpower_scalar_as_csv-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.save_matpower_scalar_as_csv","text":"save_matpower_scalar_as_csv\n\nSaves a matpower scalar section such as mpc.baseMVA = 100 as a csv\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.save_sols-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.save_sols","text":"https://docs.sciml.ai/DiffEqDocs/stable/features/io/\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.scale_demand-Tuple{Any, Any}","page":"Api","title":"ePowerSim.scale_demand","text":"This was taken from JuMP tutoria:\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.scale_generator_cost-Tuple{Any, Any}","page":"Api","title":"ePowerSim.scale_generator_cost","text":"This was taken from JuMP tutoria:\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.second-Tuple{Any}","page":"Api","title":"ePowerSim.second","text":"second(elements_container)\n\nReturns the second element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.seventh-Tuple{Any}","page":"Api","title":"ePowerSim.seventh","text":"seventh(elements_container)\n\nReturns the seventh element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.simulate_cases-Tuple{Any, Any}","page":"Api","title":"ePowerSim.simulate_cases","text":"simulate_cases(sd_dyn_sim_func, list_cases; static_case = case_IEEE_5_Bus_static )\n\nThis function simulates several cases in of dynamic power models in listcases. The dynamic function for simulation is `sddynsimfunc` .\n\nThe static_case is used to obtain power flow for intialisation of the states of the dynamic model.\n\nIt returns solution for each of the cases in a list.\n\nlistcases = [caseIEEE5BusdynamicplantSMcbidqPQConstI,               caseIEEE5BusdynamicplantSMcbv6PQConstI,               caseIEEE5BusdynamicplantSMcbidqPQConstP,               caseIEEE5BusdynamicplantSMcbv6PQConst_P]\n\nlistsol = simulatecases(sddynamicssimulationexternalft, listcases; staticcase = caseIEEE5Bus_static )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.sixth-Tuple{Any}","page":"Api","title":"ePowerSim.sixth","text":"sixth(elements_container)\n\nReturns the sixth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.swap_yπ_diagonal_elements-Tuple{Any}","page":"Api","title":"ePowerSim.swap_yπ_diagonal_elements","text":"get_nt_components_data( components_data)\n\nSwap the diagonal element of a 2 x 2 matrix.\n\nIt is used in get_Yπ_net to get an appropriate orientation for elementary admittance matrix yπ.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.syms_containing-Tuple{Any, Any}","page":"Api","title":"ePowerSim.syms_containing","text":"syms_containing(\n    network_vars_labels,\n    expr;\n    syms = true)\n\nReturns the list of symbols of variables containing a given expr in network variable labels.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.tenth-Tuple{Any}","page":"Api","title":"ePowerSim.tenth","text":"tenth(elements_container)\n\nReturns the tenth element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.test_get_generic_linearised_dynamic_model-NTuple{4, Any}","page":"Api","title":"ePowerSim.test_get_generic_linearised_dynamic_model","text":"Seems not to be providing correct answer\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.thermal_cost_function-Tuple{Any}","page":"Api","title":"ePowerSim.thermal_cost_function","text":"This was taken from JuMP tutoria:\n\nthermal_cost_function(g)\n\nA user-defined thermal cost function in pure-Julia! You can include nonlinearities, and even things like control flow.\n\nwarning: Warning\nIt's still up to you to make sure that the function has a meaningful derivative.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.third-Tuple{Any}","page":"Api","title":"ePowerSim.third","text":"third(elements_container)\n\nReturns the third element in a list.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.threshold_limits-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.threshold_limits","text":"threshold_limits(x, x_max, x_min)\n\nReturns x if it is within its min and max range, else clip it at thresholds..\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.u_from_ur_ui-Tuple{Any}","page":"Api","title":"ePowerSim.u_from_ur_ui","text":"u_from_ur_ui(ur_ui)\n\nReturns the complex voltage for a list containing real part and imaginary part of a complex voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.u_to_VΘ-Tuple{Any}","page":"Api","title":"ePowerSim.u_to_VΘ","text":"u_to_VΘ(u)\n\nReturns the magnitude and angle for a given complex value.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.u_to_ΘV-Tuple{Any}","page":"Api","title":"ePowerSim.u_to_ΘV","text":"u_to_ΘV(u)\n\nReturns a flatted concatenated nodes voltage angles and nodes voltage magnitudes for a list of nodes complex voltages.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.update_padded_vec_of_vec_from_comp_axis!-NTuple{4, Any}","page":"Api","title":"ePowerSim.update_padded_vec_of_vec_from_comp_axis!","text":"update_padded_vec_of_vec_from_comp_axis!(\n    padded_vec_of_vec,\n    P_comp, Q_comp,\n    idxs )\n\nUpdates padded_vec_of_vec, by P_comp, Q_comp based on idxs.\n\nExample\n\nnodes_size = 9\n\npaddedvecofvec = [[0.0, 0.0] for idx in 1:nodessize ]\n\nPcomp = [1.2, 3.0, 4.0] Qcomp = [2.2, 3.1, 1.0]\n\nidxs = [2,5,9]\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.update_vec_of_vec_from_comp_axis!-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.update_vec_of_vec_from_comp_axis!","text":"update_vec_of_vec_from_comp_axis!(\n    vec_of_vec, P_comp, Q_comp )\n\nUpdates vec_of_vec, by P_comp, Q_comp.\n\nExample\n\na = [[0.0, 0.0], [1.0, 0.0], [0.1,0.2]] tp = [1.2, 3.0, 4.0] tq = [2.2, 3.1, 1.0]\n\nupdatevecofvecfromcompaxis!(     a , tp , tq )\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.update_vec_of_vec_from_flattened!-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.update_vec_of_vec_from_flattened!","text":"update_vec_of_vec_from_flattened!(\n    vec_of_vec, flattened_vec, vec_vec_Idx )\n\nUpdates vec_of_vec, by flattened_vec based on vec_vec_Idx.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.update_vec_of_vec_from_vec_vec!-Tuple{Any, Any, Any}","page":"Api","title":"ePowerSim.update_vec_of_vec_from_vec_vec!","text":"update_vec_of_vec_from_vec_vec!(\n    vec_of_vec, PQ_vec_vec, idxs )\n\nUpdates vec_of_vec, by PQ_vec_vec based on idxs.\n\nExample\n\na = [[0.0, 0.0], [0.0, 0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0] ]\n\nt_p = [[1.2, 3.0], [4.0, 6.0]]\n\nidxs = [2, 4, 6]\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.ur_ui_to_u-Tuple{Any}","page":"Api","title":"ePowerSim.ur_ui_to_u","text":"ur_ui_to_u(ur_ui)\n\nReturns the complex voltage for a list containing real part and imaginary part of a complex voltage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.ur_ui_to_ΘV-Tuple{Any}","page":"Api","title":"ePowerSim.ur_ui_to_ΘV","text":"ur_ui_to_ΘV(ur_ui)\n\nReturns a flatted concatenated nodes voltage angles and nodes voltage magnitudes for a list of list of nodes voltages real and imaginary parts.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.write_vector_or_matrix_to_tex-Tuple{Any, Any}","page":"Api","title":"ePowerSim.write_vector_or_matrix_to_tex","text":"write_vector_or_matrix_to_tex(\n    tuple_julia_object,\n    tex_filename)\n\nWrite julia collections in tuple_julia_object to a tex file.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.x_from_xr_xi-Tuple{Any}","page":"Api","title":"ePowerSim.x_from_xr_xi","text":"x_from_xr_xi(ur_ui)\n\nReturns the complex value for a list containing real part and imaginary part of a complex value.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.xr_xi_to_x-Tuple{Any}","page":"Api","title":"ePowerSim.xr_xi_to_x","text":"xr_xi_to_x(ur_ui)\n\nReturns the complex value for a list containing real part and imaginary part of a complex value.\n\n\n\n\n\n","category":"method"},{"location":"api/#ePowerSim.z2y-Tuple{}","page":"Api","title":"ePowerSim.z2y","text":"z2y(; r =1.0, x = 1.00, G = 0.0, B = 0.0)\n\nReturns a transmission admittance y for a given r, x, G and B.\n\n\n\n\n\n","category":"method"},{"location":"static-modelling-and-simulation/#static-modelling-and-simulation","page":"Static Modelling and Simulation","title":"Static Modeling and Simulation","text":"","category":"section"},{"location":"static-modelling-and-simulation/","page":"Static Modelling and Simulation","title":"Static Modelling and Simulation","text":"Explains  how to use ePowerSim in static modeling, simulations and analyses such as poweflow, distributed power flow, optimal power flow, continuation power flow.","category":"page"},{"location":"dynamic-modelling-and-simulation/#dynamic-modelling-and-simulation","page":"Dynamic Modelling and Simulation","title":"Dynamic Modeling and Simulation","text":"","category":"section"},{"location":"dynamic-modelling-and-simulation/","page":"Dynamic Modelling and Simulation","title":"Dynamic Modelling and Simulation","text":"Describes how to use ePowerSim to formulate a dynamic model of an electric power system, and subsequently use the packate for simulation and analyses such small-signal stability, system pertubations and co-simulations.","category":"page"},{"location":"#ePowerSim","page":"Home","title":"ePowerSim","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ePowerSim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ePowerSim.jl is a Julia package for modeling,  simulation and analysis of electric power system. The package is designed to present a uniform data interface for static, quasi-static, dynamic analysis, as well as network operation optimisation. The design phylosophy of ePowerSim is premised  on  Unix systems design phylosophy, which entails creation of small functions that can be used in functional compositions. It  provides a co-simulation framework for further development and  experimentation of various type of models of electric power systems components or abstract entities that have mathematical formalism or data representation. ePowerSim.jl makes extensive use of cutting edge packages such as DifferentialEquations.jl, Dataframes.jl, NamedTupleTools.jl, Helics.jl,  ForwardDiff.jl, JuMP.jl and BifurcationKit just to mention a few in Julia ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: ePowerSim Under Active Development\nThe ePowerSim library for electric system components is under heavy development, nevertheless they can be extended by users.","category":"page"},{"location":"#Setup-Guide","page":"Home","title":"Setup Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package requires Julia >= v1.11.4 ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install it, please run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/DSI-NRF-PENO/ePowerSim.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Installation of ePowerSim\nIt is highly suggested that ePoweSim is installed in a new environment.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ePowerSim Modeling Concepts - Presents the fundamental concepts behind ePowerSim modeling.\nComponents - Describe electric power system components models.\nStatic Modeling and Simulation - Explains  how to use ePowerSim in static modeling, simulations and analyses such as poweflow, distributed power flow, optimal power flow, continuation power flow.\nDynamic Modeling and Simulation -Describes how to use ePowerSim to formulate a dynamic model of an electric power system, and subsequently use the packate for simulation and analyses such small-signal stability, system pertubations and co-simulations.","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Development of this project is in part funded by the *South African Department of Science and Innovation (DSI), and National Research Foundation (NRF) under  South African Research Chair Initiative (SARChi) in Power, Energy, Network and Optimnisation  (Grant Numbers 150572, 2023-2027).","category":"page"},{"location":"","page":"Home","title":"Home","text":"   <img src=\"assets/dsi-nrf-umisa-red.png\" width=\"20%\" height=\"20%\"/>","category":"page"}]
}
