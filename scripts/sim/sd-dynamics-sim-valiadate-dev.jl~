# ####################################################

#---------------------------------------------------
# global settings
#---------------------------------------------------

freq = 60

Ωb = 2 * pi * freq

ωs = Ωb 

ω_ref0 = ωs

#---------------------------------------------------

using Revise

# using Pkg

using ePowerSim

#---------------------------------------------------

using SciMLBase

using SciMLNLSolve: NLSolveJL

using NLSolvers

using NLsolve: nlsolve, converged, OnceDifferentiable

using NLsolve

using NonlinearSolve

using NonlinearSolve: TrustRegion

#---------------------------------------------------

using DifferentialEquations

using OrdinaryDiffEq, Sundials, ODEInterfaceDiffEq

using FiniteDiff, LinearSolve

using ForwardDiff, Zygote

using DiffRules

using PreallocationTools

#---------------------------------------------------

using LinearAlgebra, GenericSchur, Arblib

#---------------------------------------------------

using OrderedCollections: OrderedDict

using Permutations

using SparseArrays, StaticArrays, ComponentArrays

using DataFrames, DataFramesMeta

using JSONTables, JSON, JSON3

using Query, CSV, Tables, XLSX

using JLD2

#---------------------------------------------------

using Optimization

using OptimizationOptimJL

using JuMP

using HiGHS

import Clarabel

import Ipopt

import PATHSolver

#---------------------------------------------------

using Graphs

#---------------------------------------------------

using StatsBase

using Plots

import StatsPlots

using Latexify

using LatexPrint

#---------------------------------------------------

using BenchmarkTools, BenchmarkPlots

#---------------------------------------------------

using NamedTupleTools

using Accessors, AccessorsExtra 

#---------------------------------------------------

package_dir = pkgdir(ePowerSim)


data =
    joinpath( package_dir, "data")

data_dir = joinpath(data,
             "converted-data")
src_dir =
    joinpath(package_dir, "src")

components_libs_dir =
    joinpath(src_dir,
             "components-lib")

script_dir = @__DIR__


#---------------------------------------------------
#---------------------------------------------------
# Dynamic modeling and simulations
#---------------------------------------------------
#---------------------------------------------------

net_type = "dynamic-net-data"

gen_type = "gen-sauer"

avr_type = "avr-t1-cb-sauer"

gov_type = "gov-t1-cb-sauer"

data_ext = "json"

dynamic_net_data_by_components_file =
    "$(net_type)-"*
    "$(gen_type)-"*
    "$(avr_type)-"*
    "$(gov_type)"*
    ".$(data_ext)"


# json_net_data_by_components_file =
#     "net-static-data-avr-sauer-gov-sauer.json"


json_net_data_by_components_file =
    dynamic_net_data_by_components_file

#---------------------------------------------------
#---------------------------------------------------

# case_name = "case9"


case_name = "case14"


case_data_dir =
   joinpath( data_dir,
             case_name,)

json_case_dir = joinpath(case_data_dir, "json" )


if  (json_net_data_by_components_file == "" ||
    json_net_data_by_components_file == nothing) 

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            "net_data_by_components_file.json")
else

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            json_net_data_by_components_file)

end


#---------------------------------------------------

sim_type  = "sim-dynamic-sim-validation"

cd(script_dir)

results_dir =
    joinpath(
        script_dir,
        "results",
        sim_type)

if !(isdir(results_dir))
    
    mkpath(results_dir)
    
end

figure_dir =
    joinpath(
        script_dir,
        "figure",
        sim_type)

if !(isdir(figure_dir))
    
    mkpath(figure_dir)
    
end

tex_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(sim_type)-" *
                 "sim-results.tex")

sd_dynamics_sim_csv_filename =
    joinpath(
        results_dir,
        "$(case_name)-" *
            "$(sim_type)-" *
            "sim-results.csv")

#---------------------------------------------------
# base setting and some booleans 
#---------------------------------------------------

use_pu_in_PQ    = true

line_data_in_pu = true

use_init_u0     = false

use_nlsolve     = false

with_faults     = false

#---------------------------------------------------
## solvers and settings
#---------------------------------------------------

pf_alg      = NewtonRaphson()

ode_alg     = Rodas4()

dae_alg     = IDA()

# ode_alg   = ImplicitMidpoint()

dt          = 0.0001

Δt          = 1.0 / 2^(4)

abstol      = 1e-12

reltol      = 1e-12

#---------------------------------------------------
# Network pertubation (fault time and data)
#---------------------------------------------------

list_fault_point_from_node_a = [0.3]

list_fault_resistance        = [0.001]

list_no_line_circuit         = [1]

list_edges_to_have_fault     = [ 3 ] # [ 4 ]

clear_fault_selection_list   = [1]

#---------------------------------------------------

on_fault_time = 10.617 # 10.0

Δt_clear_time = 0.5

Δt_generation_adjustment_time =
    Δt_clear_time # 0.2

clear_fault_time =
    on_fault_time +
    Δt_clear_time

line_outage_time =
    on_fault_time

generation_adjustment_time =
    line_outage_time +
    Δt_generation_adjustment_time

#---------------------------------------------------
# sudden load change
#---------------------------------------------------

pertubation_factor = 1.10

restoration_factor = 1.0

pertubation_time   = on_fault_time

restoration_time   = clear_fault_time

Δt1 = 1.5

Δt2 = 1.5

#---------------------------------------------------
# Simulation Period
#---------------------------------------------------

sim_duration  = 20.0

timespan_min  = restoration_time + Δt1 + Δt2

timespan      =
    timespan_min < sim_duration ? sim_duration : timespan_min

time_start    = 0.0

time_final    = timespan

tspan         = (0.0, timespan)

sim_timespan  = (0.0, timespan)

plot_timespan = (0.0, timespan)

#---------------------------------------------------
#---------------------------------------------------

basekV = 1.0

#---------------------------------------------------

# case_name = "case14"

# case_name = "case4"
# case_name = "case5mul"
# case_name = "case5"

case_name = "case9"

#---------------------------------------------------
#---------------------------------------------------


json_case_dir =
    joinpath(
        data_dir,
        case_name,
        "json")

case_file =
    joinpath(
        data,
        "matpower-data",
        "$(case_name).m")

#---------------------------------------------------

cd(script_dir)

#---------------------------------------------------
#---------------------------------------------------
# Test functions for creating data files
#---------------------------------------------------
#---------------------------------------------------

# create_a_case_net_data_by_components_file(
#     case_name;
#     data_dir = "",
#     components_libs_dir = "",
#     net_data_by_components_file = "")

# create_a_default_case_net_data_xlsx_file(
#     case_name)

# check_multi_gens_bool_by_case(
#     case_name)

#---------------------------------------------------
#---------------------------------------------------
# Testing functions for reading static and
# dynamic data files
#---------------------------------------------------
#---------------------------------------------------

net_type = "dynamic-net-data"

gen_type = "gen-sauer"

avr_type = "avr-t1-cb-sauer"

gov_type = "gov-t1-cb-sauer"

data_ext = "json"

dynamic_net_data_by_components_file =
    "$(net_type)-"*
    "$(gen_type)-"*
    "$(avr_type)-"*
    "$(gov_type)"*
    ".$(data_ext)"

# json_net_data_by_components_file =
#     "net-static-data-avr-sauer-gov-sauer.json"


json_net_data_by_components_file =
    dynamic_net_data_by_components_file

if  (json_net_data_by_components_file == "" ||
    json_net_data_by_components_file == nothing) 

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            "net_data_by_components_file.json")
else

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            json_net_data_by_components_file)

end

#---------------------------------------------------

sim_type  = "sim-dynamic-sim-validation"


results_dir =
    joinpath(
        script_dir,
        "results",
        sim_type)

if !(isdir(results_dir))
    
    mkpath(results_dir)
    
end

figure_dir =
    joinpath(
        script_dir,
        "figure",
        sim_type)

if !(isdir(figure_dir))
    
    mkpath(figure_dir)
    
end

tex_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(sim_type)-" *
                 "sim-results.tex")

sd_dynamics_sim_csv_filename =
    joinpath(
        results_dir,
        "$(case_name)-" *
            "$(sim_type)-" *
            "sim-results.csv")

#---------------------------------------------------

"""

# Possible system_status

system_status = :pre_fault_state,
system_status = :fault_state
system_status = :post_fault_state

"""

#---------------------------------------------------
# base setting and some booleans 
#---------------------------------------------------

use_pu_in_PQ    = true

line_data_in_pu = true

use_init_u0     = false

use_nlsolve     = false

with_faults     = false

#---------------------------------------------------
## solvers and settings
#---------------------------------------------------

pf_alg      = NewtonRaphson()

ode_alg     = Rodas4()

dae_alg     = IDA()

# ode_alg   = ImplicitMidpoint()

dt          = 0.0001

Δt          = 1.0 / 2^(4)

abstol      = 1e-12

reltol      = 1e-12

#---------------------------------------------------
# Network pertubation (fault time and data)
#---------------------------------------------------

list_fault_point_from_node_a = [0.3]

list_fault_resistance        = [0.001]

list_no_line_circuit         = [1]

list_edges_to_have_fault     = [ 3 ] # [ 4 ]

clear_fault_selection_list   = [1]

#---------------------------------------------------

on_fault_time = 10.617 # 10.0

Δt_clear_time = 0.5

Δt_generation_adjustment_time =
    Δt_clear_time # 0.2

clear_fault_time =
    on_fault_time +
    Δt_clear_time

line_outage_time =
    on_fault_time

generation_adjustment_time =
    line_outage_time +
    Δt_generation_adjustment_time

#---------------------------------------------------
# sudden load change
#---------------------------------------------------

pertubation_factor = 1.10

restoration_factor = 1.0

pertubation_time   = on_fault_time

restoration_time   = clear_fault_time

Δt1 = 1.5

Δt2 = 1.5

#---------------------------------------------------
# Simulation Period
#---------------------------------------------------

sim_duration  = 20.0

timespan_min  = restoration_time + Δt1 + Δt2

timespan      =
    timespan_min < sim_duration ? sim_duration : timespan_min

time_start    = 0.0

time_final    = timespan

tspan         = (0.0, timespan)

sim_timespan  = (0.0, timespan)

plot_timespan = (0.0, timespan)


#---------------------------------------------------
# Reading network data
#---------------------------------------------------

(;gens_govs_avrs_states_syms,
 gens_govs_avrs_types) =
     get_gens_govs_avrs_states_syms_by_json(
            net_data_by_components_file;
            components_libs_dir =
                components_libs_dir )

#---------------------------------------------------

(;plant_generators_data_from_json,
 plant_loads_data_from_json,
 plant_transmission_data_from_json,
 edge_data_from_json,
 shunt_data_from_json,
 baseMVA_data_from_json,
 gencost_data_from_json) =
    NamedTupleTools.select(
        get_net_data_by_components_from_json_file(
            net_data_by_components_file;
            in_components_type_sym =
                false ),
        (:plant_generators_data_from_json,
         :plant_loads_data_from_json,
         :plant_transmission_data_from_json,
         :edge_data_from_json,
         :shunt_data_from_json,
         :baseMVA_data_from_json,
         :gencost_data_from_json))

baseMVA = baseMVA_data_from_json

#----------------------------------------
# Dynamic components functions
#----------------------------------------

(;comps_callback_paras_funs,
 comps_init_funs,
 comps_output_funs,
 ode_comps_dyn_funs,
 dae_comps_dyn_funs,
 comps_dyn_funs) =
     get_dynamic_comps_init_out_dyn_callback_funcs(
    gens_govs_avrs_types)

#----------------------------------------
# Generators dynamic and static parameters
#----------------------------------------

# gens_para_sequence_order =
#     (:components_data, :gen)

gens_generic_sequence_order =
    (:components_data, :gen)


ode_gens_para_selections  =
    (:H, :D,
     :X_d, :X_q,                  
     :X_d_dash, :X_q_dash,
     :T_d_dash, :T_q_dash, :Sn )

ode_gens_generic_selections =
    (:H, :D,
     :ra, :xℓ,
     :X_d, :X_q,
     :X_d_dash,  :X_q_dash,
     :X_d_2dash, :X_q_2dash,
     :T_d_dash,  :T_q_dash, :Sn )

opf_gens_generic_selections =
   (
    :Sn,:vh,
    :P, :Q,
    :Pmin, :Pmax,
    :Qmin, :Qmax,
    :vmin, :vmax )

govs_and_avrs_sequence_order =
    ( :components_data,)

govs_and_avrs_selections =
    ( :gov, :avr )

#----------------------------------------

ode_gens_generic_para =
     get_ode_gens_generic_para(
         plant_generators_data_from_json;
         sequence_order =
             gens_generic_sequence_order,
         selections =
             ode_gens_generic_selections)

#----------------------------------------

(;generic_gens_para,
 generic_govs_para,
 generic_avrs_para) =
     get_generic_gens_avr_gov_para(
         plant_generators_data_from_json;
         gens_sequence_order =
             gens_generic_sequence_order,
        gens_selections =
            ode_gens_generic_selections,
        govs_and_avrs_sequence_order =
            govs_and_avrs_sequence_order,
        govs_and_avrs_selections =
            govs_and_avrs_selections)

#------------------------------------------------

 pf_generic_gens_para =
    NamedTupleTools.select(
        get_selected_vec_nt_to_vec_vec(
            generic_gens_para,
            nothing;
            selections =
                (:ra, :X_d, :X_q,     
                 :X_d_dash, :X_q_dash, :Sn),
            vec_datatype = Float64 ),
        (:ra, :X_d, :X_q,     
         :X_d_dash, :X_q_dash, :Sn) )

#------------------------------------------------

opf_generic_each_gen_para =
    get_components_properties_by_json(
        plant_generators_data_from_json;
        sequence_order =
            gens_generic_sequence_order,
         selections =
              opf_gens_generic_selections )


"To make sure Vector{NamedTuple} is returned
 instead of Vector{Any}"
opf_generic_each_gen_para =
    NamedTuple[
        item for item in
            opf_generic_each_gen_para]

#----------------------------------------

 opf_generic_gens_para =
    NamedTupleTools.select(
        get_selected_vec_nt_to_vec_vec(
            opf_generic_each_gen_para,
            nothing;
            selections =
                (:vh,  :P, :Q,
                 :Pmin, :Pmax, :Qmin, :Qmax,
                 :vmin, :vmax, :Sn ),
            vec_datatype = Float64 ),
        (:vh, :P, :Q,
         :Pmin, :Pmax, :Qmin, :Qmax,
         :vmin, :vmax, :Sn ) )

#---------------------------------------------------
# basic edges parameters parameters
#---------------------------------------------------

(;edges_orientation,
 edges_Ybr_cal,
 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
     NamedTupleTools.select(
         get_transmission_network_parameters_by_json(
             plant_generators_data_from_json,
             plant_loads_data_from_json,
             plant_transmission_data_from_json,
             edge_data_from_json,
             shunt_data_from_json;
             baseMVA =
                 baseMVA,
             basekV =
                 basekV,
             use_pu_in_PQ =
                 use_pu_in_PQ,
             line_data_in_pu =
                 line_data_in_pu ),
         (:edges_orientation,
          :edges_Ybr_cal,
          :Ybr_cal_and_edges_orientation,
          :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------

edges_ftbus_and_generic_data =
      get_edges_ftbus_and_generic_data_by_json(
         edge_data_from_json )

#----------------------------------------

edges_generic_data =
     get_edges_generic_data_by_json(
         edge_data_from_json )

#----------------------------------------
# basic nodes parameters parameters
#----------------------------------------

pf_PQ_param =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA = baseMVA,
        use_pu_in_PQ =
            use_pu_in_PQ )
#----------------------------------------

sta_pf_PQ_para =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA =
            baseMVA,
        use_pu_in_PQ =
            use_pu_in_PQ)

#----------------------------------------

gens_vh_slack_θh_para =
    get_gens_vh_slack_θh_para_by_json(
        plant_generators_data_from_json )

#----------------------------------------

sta_pf_vars_and_paras_idx =
    get_sta_pf_vars_and_paras_idx_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

#----------------------------------------

pf_sta_ΔPQ_mismatch_parameters =
    get_pf_sta_ΔPQ_mismatch_parameters_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json,
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA = baseMVA,
        basekV = 1.0,
        use_pu_in_PQ = use_pu_in_PQ,
        line_data_in_pu = line_data_in_pu)

#----------------------------------------
#----------------------------------------
# Some basic indices, labels and symbols
#----------------------------------------
#----------------------------------------


#----------------------------------------
# Nodes type indices and translation dict
#----------------------------------------

net_nodes_type_idxs =
    get_net_nodes_type_idxs_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

loc_load_exist =
    getproperty(
        net_nodes_type_idxs,
        :loc_load_exist)

#----------------------------------------

dyn_pf_fun_kwd_net_idxs =
    NamedTupleTools.select(
        net_nodes_type_idxs,
        (:slack_gens_nodes_idx,
         :non_slack_gens_nodes_idx,
         :gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_with_loc_load_idx,
         :gens_nodes_with_loc_loads_idx,
         :all_nodes_idx))

#----------------------------------------

dyn_pf_fun_kwd_n2s_idxs =
    NamedTupleTools.select(
        get_dict_net_streamlined_idx_by_nodes_type_idxs(
            net_nodes_type_idxs ),
        (:n2s_slack_gens_idx,
         :n2s_non_slack_gens_idx,
         :n2s_gens_idx,
         :n2s_non_gens_idx,
         :n2s_gens_with_loc_load_idxs,
         :n2s_all_nodes_idx))

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_nodes_with_loc_loads_idx,
 all_nodes_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx,
          :all_nodes_idx))

(;n2s_gens_idx,
n2s_non_gens_idx,
n2s_gens_with_loc_load_idxs,
n2s_all_nodes_idx ) =
    NamedTupleTools.select(
        dyn_pf_fun_kwd_n2s_idxs,
        (:n2s_gens_idx,
         :n2s_non_gens_idx,
         :n2s_gens_with_loc_load_idxs,
         :n2s_all_nodes_idx))

#----------------------------------------
# States and algebraic variables labels
#----------------------------------------

plants_states_syms =
    get_plants_states_syms(
        gens_govs_avrs_states_syms)

generic_state_sym = 
    get_generic_state_sym(
        gens_govs_avrs_states_syms,
        gens_nodes_idx;
        label_prefix = "bus")

state_labels = 
    get_state_labels(
        gens_govs_avrs_states_syms,
        gens_nodes_idx;
        label_prefix = "bus",
        plants_states_by_per_comp = false,
        plants_states_by_per_plant = true )


algebraic_vars_labels = 
    get_algebraic_vars_labels(
        dyn_pf_fun_kwd_net_idxs;
        label_prefix = "bus" )


network_vars_labels = 
    get_network_vars_labels(
        gens_govs_avrs_states_syms,
        dyn_pf_fun_kwd_net_idxs;
        label_prefix = "bus",
        plants_states_by_per_comp = false,
        plants_states_by_per_plant = true )

state_vars_idx = 
   get_state_vars_idx(
       gens_govs_avrs_states_syms)

(;nodes_names,
 gens_nodes_names,
 non_gens_nodes_names) =
     get_model_nodes_types_names(
          dyn_pf_fun_kwd_net_idxs,
          dyn_pf_fun_kwd_n2s_idxs )

(;state_vars_idx,
 vec_comp_states_Idx,
 plants_states_syms,
 generic_state_sym,
 state_labels,
 algebraic_vars_labels,
 network_vars_labels) =
     get_plants_states_syms_and_labels(
         gens_govs_avrs_states_syms,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs)

(;state_vars_idx,
 vec_comp_states_Idx,
 plants_states_syms,
 generic_state_sym,
 state_labels,
 algebraic_vars_labels,
 network_vars_labels,
 
 model_syms,
 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names) = 
    get_plants_states_syms_wt_labels_wt_names(
        gens_govs_avrs_states_syms,
        dyn_pf_fun_kwd_net_idxs,
        dyn_pf_fun_kwd_n2s_idxs)

(;state_labels,
 algebraic_vars_labels,
 network_vars_labels) =
     get_generic_network_vars_labels(
         plants_states_syms,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs
         ;label_prefix = "bus",
         plants_states_by_per_comp = false,
         plants_states_by_per_plant = true)

model_syms = 
get_model_syms(
    state_labels,
    dyn_pf_fun_kwd_net_idxs)


#----------------------------------------
# Mass matrix and bool dae vars
#----------------------------------------

model_mass_matrix =
    DAE_MassMatrix(
        length(state_labels),
        length(algebraic_vars_labels) )

model_bool_dae_vars =
    DAE_BoolVector(
        length(state_labels),
        length(algebraic_vars_labels) )

ode_gens_mass_matrix =
    DAE_MassMatrix(
        length(state_labels),
        0 )

ode_gens_bool_dae_vars =
    DAE_BoolVector(
        length(state_labels),
        0 )

#----------------------------------------

(;model_mass_matrix,
 model_bool_dae_vars,
 ode_gens_mass_matrix,
 ode_gens_bool_dae_vars) =
     get_mass_matrix_and_bool_dae_vars(
    state_labels,
    algebraic_vars_labels)

#----------------------------------------
# Parameter indices
#----------------------------------------

Png_Qng_Pll_Qll_Idx = 
get_generic_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)

Pg_Qg_Png_Qng_Pll_Qll_Idx = 
 get_generic_Pg_Qg_Png_Qng_Pll_Qll_Idx(
     dyn_pf_fun_kwd_net_idxs)

#----------------------------------------

scale_Pg_Qg_Png_Qng_Pll_Qll_Idx = 
 get_generic_scale_Pg_Qg_Png_Qng_Pll_Qll_Idx(
     dyn_pf_fun_kwd_net_idxs)

scale_Pg_Png_Qng_Idx =
get_generic_scale_Pg_Png_Qng_Idx(
    dyn_pf_fun_kwd_net_idxs)

#----------------------------------------

Png_Qng_Pll_Qll_Idx = 
get_generic_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)

#----------------------------------------

Pg_Png_Qng_Idx = 
get_generic_Pg_Png_Qng_Idx(
    dyn_pf_fun_kwd_net_idxs)

#----------------------------------------

dyn_v_ref_p_order_Png_Qng_Pll_Qll_Idx =
get_dyn_v_ref_p_order_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)


dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx =
get_dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)


dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx =
get_dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)


dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx =
get_dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx(
    dyn_pf_fun_kwd_net_idxs)


dyn_vh_id_iq_V_ref_Tm_Idx = 
get_dyn_vh_id_iq_V_ref_Tm_Idx(
    gens_nodes_idx;
    reverse_idx = false)


dyn_Tm_V_ref_id_iq_vh_Idx =
get_dyn_vh_id_iq_V_ref_Tm_Idx(
    gens_nodes_idx;
    reverse_idx = true )


dyn_V_ref_Tm_id_iq_vh_Idx  =
get_dyn_V_ref_Tm_vh_id_iq_Idx(
    gens_nodes_idx)


dyn_vh_id_iq_ωref0_vref0_porder0_Idx =
get_dyn_vh_id_iq_ωref0_vref0_porder0_Idx(
    gens_nodes_idx;
    reverse_idx = false )


 ωref0_vref0_porder0_id_iq_vh_Idx = 
 get_ωref0_vref0_porder0_id_iq_vh_Idx(
     gens_nodes_idx)


dyn_ωref0_vref0_porder0_id_iq_vh_Idx =
get_dyn_ωref0_vref0_porder0_id_iq_vh_Idx(
    gens_nodes_idx)


id_iq_pg_vh_Idx = 
get_id_iq_pg_vh_Idx(
    gens_nodes_idx)

#--------------------------------------

dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx =
    get_dyn_δ_eq_dash_Png_Qng_Pll_Qll_Idx(
        dyn_pf_fun_kwd_net_idxs)


dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx =
    get_dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx(
        dyn_pf_fun_kwd_net_idxs)

#----------------------------------------
# States and algebraic variable  indices
#----------------------------------------


(;state_vars_and_i_dq_Idx_in_state,
 state_vars_and_i_dq_wt_fault_Idx_in_state,
 state_algebraic_vars_Idx_in_state,
 state_algebraic_vars_wt_fault_Idx_in_state) =
     get_state_and_algebraic_vars_Idx_in_state(
         state_labels,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs;
         no_lines_fault = 1 )

(;state_vars_and_i_dq_Idx_in_state,
 state_vars_and_i_dq_wt_fault_Idx_in_state,
 state_algebraic_vars_Idx_in_state,
 state_algebraic_vars_wt_fault_Idx_in_state) =
     get_state_and_algebraic_vars_Idx_in_state(
         state_labels,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs;
         no_lines_fault = 1 )

gens_state_vars_idx_in_state =
get_gens_state_vars_idx_in_state(
    network_vars_labels,
    # all_nodes_idx,
    dyn_pf_fun_kwd_net_idxs,
    n2s_all_nodes_idx;
    selected_gens_state_vars_syms =
        (:δ, :ed_dash, :eq_dash) )


state_vars_and_i_dq_Idx_in_state =
get_state_vars_and_i_dq_Idx_in_state(
    generic_state_sym, #generic_state_labels,
    gens_nodes_idx,
    all_nodes_idx )

state_vars_and_i_dq_wt_fault_Idx_in_state =
get_state_vars_and_i_dq_wt_fault_Idx_in_state(
    generic_state_sym, # generic_state_labels,
    gens_nodes_idx,
    all_nodes_idx;
    no_lines_fault = 1)

#----------------------------------------

state_algebraic_vars_Idx_in_state =
get_state_algebraic_vars_Idx_in_state(
    generic_state_sym, # generic_state_labels,
    gens_nodes_idx,
    all_nodes_idx )


state_algebraic_vars_wt_fault_Idx_in_state = 
get_state_algebraic_vars_wt_fault_Idx_in_state(
    generic_state_sym, # generic_state_labels,
    gens_nodes_idx,
    all_nodes_idx;
    no_lines_fault = 1)

#----------------------------------------
#  Algebraic variables  indices
#----------------------------------------

## state_vars_idx

pf_red_vh_θh_wt_slack_value_Idx = 
get_generic_red_vh_θh_wt_slack_value_Idx(
    dyn_pf_fun_kwd_n2s_idxs,
    dyn_pf_fun_kwd_net_idxs)


pf_vh_θh_idx_and_idx2Idx = 
get_pf_vh_θh_idx_and_idx2Idx(
    dyn_pf_fun_kwd_n2s_idxs,
    dyn_pf_fun_kwd_net_idxs)


# get_generic_flat_vh_flat_θh_Idx(
#     gens_nodes_idx,
#     all_nodes_idx)

dyn_pf_flat_vh_flat_θh_Idx  =
get_generic_flat_vh_flat_θh_Idx(
    all_nodes_idx)

#----------------------------------------

dyn_pf_flat_vh_flat_θh_id_iq_Idx =
get_generic_flat_vh_flat_θh_id_iq_Idx(
    gens_nodes_idx,
    all_nodes_idx)

#----------------------------------------

dyn_pf_flat_vh_flat_θh_wt_slack_value_Idx =
get_generic_flat_vh_flat_θh_wt_slack_value_Idx(
    all_nodes_idx)

#----------------------------------------

dyn_pf_vh_θh_id_iq_vhf_θhf_Idx =
 get_generic_vh_θh_id_iq_vhf_θhf_Idx(
    gens_nodes_idx,
    all_nodes_idx;
     no_lines_fault = 1)


dyn_pf_vh_vhf_θh_θhf_id_iq_Idx =
get_generic_vh_vhf_θh_θhf_id_iq_Idx(
    gens_nodes_idx,
    all_nodes_idx;
    no_lines_fault = 1)

dyn_pf_vh_vhf_Idx =
 get_generic_vh_vhf_Idx(
    all_nodes_idx;
     no_lines_fault = 1)

dyn_pf_θh_θhf_Idx = 
get_generic_θh_θhf_Idx(
    all_nodes_idx;
    no_lines_fault = 1)

#----------------------------------------


get_generic_red_vh_θh_wt_slack_value_Idx(
    dyn_pf_fun_kwd_n2s_idxs,
    dyn_pf_fun_kwd_net_idxs)


dyn_pf_flat_vh_flat_θh_wt_slack_value_Idx =
get_generic_flat_vh_flat_θh_wt_slack_value_Idx(
    all_nodes_idx)


(;dyn_slack_value_Idxs,) =
    NamedTupleTools.select(
        dyn_pf_flat_vh_flat_θh_wt_slack_value_Idx,
        (:dyn_slack_value_Idxs, ))

pf_vh_θh_idx_and_idx2Idx =
get_pf_vh_θh_idx_and_idx2Idx(
    dyn_pf_fun_kwd_n2s_idxs,
    dyn_pf_fun_kwd_net_idxs)

#----------------------------------------
#----------------------------------------

get_model_states_comp_idxs_in_Idx(
        network_vars_labels,
        all_nodes_idx,
        n2s_all_nodes_idx;
    vars =
        [:δ, :ω, :ed_dash, :eq_dash] )



#----------------------------------------
# faults
#----------------------------------------

list_faulted_line_a_b_orientation =
    edges_orientation[
        list_edges_to_have_fault  ] 

#----------------------------------------

no_lines_fault =
    length(list_faulted_line_a_b_orientation)

no_current_lines_fault =
    no_lines_fault - length(
        clear_fault_selection_list)


no_cleared_lines_fault =
    length(clear_fault_selection_list)

#----------------------------------------

# (;faulty_Ynet,
# faulty_nodes_idx_with_adjacent_nodes_idx,

# faulty_all_nodes_idx,
# n2s_faulty_all_nodes_idx,

# fault_nodes_idx,
# n2s_fault_nodes_idx,            

# list_Ya_nkf,
# list_Ynkf_b,

# list_faulty_line_Yl,
# list_healthy_lines_Yl,

# list_node_b_idx_in_a_node_row,
# list_node_a_idx_in_b_node_row,

# list_faulted_line_a_b_orientation,
# list_fault_point_from_node_a,
# list_fault_resistance,
# list_no_line_circuit)

(Ynet,
nodes_idx_with_adjacent_nodes_idx) =
    Ynet_wt_nodes_idx_wt_adjacent_nodes

on_fault_net_para =
     make_lines_faults_data_set(
         Ynet,
         nodes_idx_with_adjacent_nodes_idx,

         all_nodes_idx,
         n2s_all_nodes_idx,

         list_faulted_line_a_b_orientation ,
         list_fault_point_from_node_a,
         list_fault_resistance,
         list_no_line_circuit )

(;fault_nodes_idx,) =
    NamedTupleTools.select(
        on_fault_net_para,
        (:fault_nodes_idx,))

#--------------------------------------

# (;pre_clear_fault_Ynet,
# pre_clear_fault_nodes_idx_with_adjacent_nodes_idx,

# pre_clear_fault_all_nodes_idx,
# n2s_pre_clear_fault_all_nodes_idx,

# pre_clear_fault_nodes_idx,
# n2s_pre_clear_fault_nodes_idx,

# pre_clear_list_Ya_nkf, 
# pre_clear_list_Ynkf_b, 

# pre_clear_list_faulty_line_Yl, 
# pre_clear_list_healthy_lines_Yl, 

# pre_clear_list_node_b_idx_in_a_node_row, 
# pre_clear_list_node_a_idx_in_b_node_row, 

# pre_clear_list_faulted_line_a_b_orientation, 
# pre_clear_list_fault_point_from_node_a,

# pre_clear_list_fault_resistance,
# pre_clear_list_no_line_circuit,

# post_clear_fault_Ynet,    
# post_clear_fault_nodes_idx_with_adjacent_nodes_idx,

# post_clear_fault_all_nodes_idx,    
# n2s_post_clear_fault_all_nodes_idx,

# post_clear_fault_nodes_idx,    
# n2s_post_clear_fault_nodes_idx,

# faulty_Ynet,
# faulty_nodes_idx_with_adjacent_nodes_idx,

# faulty_all_nodes_idx,
# n2s_faulty_all_nodes_idx,

# fault_nodes_idx,
# n2s_fault_nodes_idx,

# list_faulted_line_a_b_orientation,
# list_fault_point_from_node_a,
# list_fault_resistance,
# list_no_line_circuit,

# list_Ya_nkf,
# list_Ynkf_b,

# list_faulty_line_Yl,
# list_healthy_lines_Yl,

# list_node_b_idx_in_a_node_row,
# list_node_a_idx_in_b_node_row)

cleared_selected_lines_faults_net_para =
    get_cleared_selected_lines_faults_data_set(
        clear_fault_selection_list;
        deepcopy(on_fault_net_para)...)

(;pre_clear_fault_nodes_idx_with_adjacent_nodes_idx,
post_clear_fault_nodes_idx_with_adjacent_nodes_idx) =
 NamedTupleTools.select(
     cleared_selected_lines_faults_net_para,
     (
      :pre_clear_fault_nodes_idx_with_adjacent_nodes_idx,
      :post_clear_fault_nodes_idx_with_adjacent_nodes_idx))

#----------------------------------------
# Callbacks
#----------------------------------------

plants_cb_paras_kwd_para =
    (generic_gens_para ,
     generic_avrs_para,
     generic_govs_para,
     comps_callback_paras_funs )

#----------------------------------------

"""
generic_model_callback_paras =
    plants_generic_model_callback_paras_func(
        state_vars_idx,
        plants_states_syms;
        kwd_para =
            plants_cb_paras_kwd_para )

plants_cb_paras_switches =
    getproperty(
        generic_model_callback_paras,
        :plants_cb_paras_switches)


avrs_govs_cb_sw =
    getproperty(
        generic_model_callback_paras,
        :plants_avr_gov_cb_para_sw_in_plant)

avrs_govs_cb_sw_Idx =
    getproperty(
        generic_model_callback_paras,
        :plants_avr_gov_cb_para_sw_idx_in_plant )

cb = cb_fun_make_state_callbacks(
    generic_model_callback_paras)
"""

#----------------------------------------

(plants_cb_paras_switches,
 list_selected_plants_state_event_cb_paras,
 list_selected_plants_state_affect_cb_paras,

 avrs_govs_cb_sw,
 avrs_govs_cb_sw_Idx ) =
     NamedTupleTools.select(
         plants_generic_model_callback_paras_func(
             state_vars_idx,
             plants_states_syms;
             kwd_para =
                 plants_cb_paras_kwd_para ) ,
         (:plants_cb_paras_switches,
          :list_selected_plants_state_event_cb_paras,
          :list_selected_plants_state_affect_cb_paras,

          :plants_avr_gov_cb_para_sw_in_plant,
          :plants_avr_gov_cb_para_sw_idx_in_plant))

cb = cb_fun_make_state_callbacks(
    list_selected_plants_state_event_cb_paras,
    list_selected_plants_state_affect_cb_paras )


#----------------------------------------
#########################################
#----------------------------------------

#----------------------------------------
# Composition and aggregations
#----------------------------------------

(pf_kw_para,
 red_types_Idxs_etc,
 pf_PQ_param) =
    NamedTupleTools.select(
        pf_sta_ΔPQ_mismatch_parameters,
        (:pf_kw_para,
         :red_types_Idxs_etc,
         :pf_PQ_param) )

(red_vh_Idxs,
 red_θh_Idxs) =
    NamedTupleTools.select(
        red_types_Idxs_etc,
        (:red_vh_Idxs,
         :red_θh_Idxs) )

#----------------------------------------

sta_red_vh_θh_0 =
   [ ones(length(red_vh_Idxs));
     zeros(length(red_θh_Idxs))]

#----------------------------------------
# Powerflow func and prob
#----------------------------------------

kwd_sta_sta_ΔPQ_sol_by_json =
   (;
    pf_alg,
    pf_kw_para,
    red_vh_Idxs,
    red_θh_Idxs,
    sta_red_vh_θh_0) 


#----------------------------------------
# Powerflow func and prob
#----------------------------------------

pf_sol =
    get_pf_sta_ΔPQ_mismatch_sol_by_generic(
        pf_PQ_param;
        kwd_para =
            kwd_sta_sta_ΔPQ_sol_by_json )

#----------------------------------------
# Results    
#----------------------------------------

generic_red_sol_kwd_para =
    (;Ybr_cal_and_edges_orientation,
      Ynet_wt_nodes_idx_wt_adjacent_nodes,
      sta_pf_PQ_para,
      ode_gens_generic_para,
      pf_kw_para) 

# generic_dyn_sol_kwd_para =
#    (;loc_load_exist,
#     sta_pf_PQ_para,
#     # ode_gens_generic_para,
#     # dyn_pf_flat_vh_flat_θh_id_iq_Idx,
#     dyn_pf_fun_kwd_n2s_idxs,
#     dyn_pf_fun_kwd_net_idxs)


generic_results_pf_sta_red_sol =
    get_generic_results_pf_sta_red_sol_u(
        pf_sol;
        generic_red_sol_kwd_para =
            generic_red_sol_kwd_para,
        baseMVA =
            baseMVA,
        basekV =
            1.0 )

#----------------------------------------
    
(pf_P_gens,
 pf_Q_gens,
 vh,
 θh,
 gens_vh,
 gens_θh) =
    NamedTupleTools.select(
        generic_results_pf_sta_red_sol,
        (:pf_P_gens,
         :pf_Q_gens,
         :vh,
         :θh,
         :gens_vh,
         :gens_θh ) )

#----------------------------------------
# Init
#----------------------------------------

plants_init_kwd_para =
    (generic_gens_para ,
     generic_avrs_para,
     generic_govs_para ,
     comps_init_funs )

plants_generic_states_init_wt_ref =
    plants_generic_model_init_func(
        gens_vh,
        gens_θh,
        pf_P_gens,
        pf_Q_gens,
        ωs;
        kwd_para =
            plants_init_kwd_para )

(plants_states_init,
 plants_refs ) =
     NamedTupleTools.select(
         plants_generic_states_init_wt_ref,
         (:plants_states_init,
          :plants_refs))


( nt_vec_per_paras,
  vec_vec_per_paras ) =
      get_nt_vec_wt_vec_vec_per_paras(
    plants_refs ;
    nt_syms =
        (:ωs,
         :ω_ref,
         :v_ref,
         :p_order,
         :i_d,
         :i_q,
         :gen_vh ) )

(ω_ref,
 v_ref,
 p_order,
 gens_i_d,
 gens_i_q ) =
     NamedTupleTools.select(
         nt_vec_per_paras, (
             :ω_ref,
             :v_ref,
             :p_order,
             :i_d,
             :i_q))

#----------------------------------------
# System model init
#----------------------------------------

u0_model_states_init =
    Float64[plants_states_init;
            vh;
            θh;
            gens_i_d;
            gens_i_q]

du0_model_states_init =
    zeros(length(u0_model_states_init))

res = similar(u0_model_states_init)

#----------------------------------------
# System model para
#----------------------------------------

(P_non_gens,
 Q_non_gens, 
 P_g_loc_load,
 Q_g_loc_load) =
    NamedTupleTools.select(
        sta_pf_PQ_para,
        (:P_non_gens,
         :Q_non_gens,
         :P_g_loc_load,
         :Q_g_loc_load ) )

generic_model_dynamics_para =
    Float64[ω_ref;
            v_ref;
            p_order;
            P_non_gens;
            Q_non_gens;
            P_g_loc_load;
            Q_g_loc_load]


ω_ref_v_ref_p_order_Png_Qng_Pll_Qll =
    Float64[ω_ref;
            v_ref;
            p_order;
            P_non_gens;
            Q_non_gens;
            P_g_loc_load;
            Q_g_loc_load]        

ωref0_vref0_porder0_id_iq_vh =
    [ω_ref;
     v_ref;
     p_order;
     gens_i_d;
     gens_i_q;
     gens_vh]


flat_vh_flat_θh_id_iq_u0 =
    [vh;
     θh;
     gens_i_d;
     gens_i_q ]

dyn_pf_solver =
    (;use_init_u0,
     use_nlsolve,
     pf_alg,
     abstol,
     reltol )

algebraic_generic_model_kwd_para =
    (;loc_load_exist,

     dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     pf_generic_gens_para,

     Ynet_wt_nodes_idx_wt_adjacent_nodes )

algebraic_generic_model_sol_kwd_para =
    (;dyn_pf_flat_vh_flat_θh_id_iq_Idx,
     flat_vh_flat_θh_id_iq_u0,
     dyn_pf_solver,
     algebraic_generic_model_kwd_para
     )


algebraic_generic_model_wt_fault_kwd_para =
    (;loc_load_exist,

     dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     pf_generic_gens_para,

     Ynet_wt_nodes_idx_wt_adjacent_nodes,

     dyn_pf_vh_θh_id_iq_vhf_θhf_Idx,
     dyn_pf_vh_vhf_θh_θhf_id_iq_Idx,

     on_fault_net_para,

     clear_fault_selection_list,

     no_lines_fault,
     no_cleared_lines_fault,

     list_fault_resistance,

     with_faults,

     cleared_selected_lines_faults_net_para )

algebraic_generic_model_wt_fault_sol_kwd_para =
    (;dyn_pf_flat_vh_flat_θh_id_iq_Idx,
     flat_vh_flat_θh_id_iq_u0,
     dyn_pf_solver,
     algebraic_generic_model_wt_fault_kwd_para,
     cleared_selected_lines_faults_net_para
     )

#----------------------------------------
#----------------------------------------
# generic model_dynamics_kwd_para
#----------------------------------------
#----------------------------------------

#----------------------------------------
# ODE system dyamanics kwd parameters
#----------------------------------------    


ode_plants_kwd_para =
    (;state_vars_idx,

     ωref0_vref0_porder0_id_iq_vh_Idx,

     generic_gens_para,
     generic_avrs_para,
     generic_govs_para,

     vec_comp_states_Idx,

     avrs_govs_cb_sw,
     avrs_govs_cb_sw_Idx,

     ode_comps_dyn_funs,
     comps_output_funs,
     ωs)


plants_kwd_para =
    deepcopy(ode_plants_kwd_para)


ode_generic_model_dynamics_kwd_para =
    (;
     gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     # pf_generic_gens_para,

     ode_plants_kwd_para,
     plants_kwd_para,

     algebraic_generic_model_sol_kwd_para )



ode_generic_model_kwd_para =
    (;
     gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     ode_plants_kwd_para,

     algebraic_generic_model_sol_kwd_para )


#----------------------------------------
# DAE system dyamanics kwd parameters
#----------------------------------------    

dae_plants_kwd_para =
    (;state_vars_idx,

     ωref0_vref0_porder0_id_iq_vh_Idx,

     generic_gens_para,
     generic_avrs_para,
     generic_govs_para,

     vec_comp_states_Idx,

     avrs_govs_cb_sw,
     avrs_govs_cb_sw_Idx,

     dae_comps_dyn_funs,
     comps_output_funs,
     ωs)


plants_kwd_para =
    (;state_vars_idx,

     ωref0_vref0_porder0_id_iq_vh_Idx,

     generic_gens_para,
     generic_avrs_para,
     generic_govs_para,

     vec_comp_states_Idx,

     avrs_govs_cb_sw,
     avrs_govs_cb_sw_Idx,

     comps_dyn_funs,
     comps_output_funs,

    ωs) 


dae_generic_model_dynamics_kwd_para =
    (;
     ωs,
     loc_load_exist,
     state_vars_idx,

     id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     pf_generic_gens_para,

     Ynet_wt_nodes_idx_wt_adjacent_nodes,

     dae_plants_kwd_para )


dae_generic_model_kwd_para =
    (;
     gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_net_idxs,

     dae_plants_kwd_para,
     
     algebraic_generic_model_kwd_para )


#----------------------------------------
# ODE mass matrix system dyamanics kwd parameters
#----------------------------------------    

mm_generic_model_dynamics_kwd_para = 
    (;
     ωs,
     loc_load_exist,
     state_vars_idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx, #

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs, #
     dyn_pf_fun_kwd_net_idxs, #

     ode_plants_kwd_para,

     algebraic_generic_model_sol_kwd_para ) 


mm_generic_model_kwd_para = 
    (;gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx, #

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_fun_kwd_n2s_idxs, #
     dyn_pf_fun_kwd_net_idxs, #

     ode_plants_kwd_para,

     algebraic_generic_model_kwd_para ) 


#----------------------------------------
# System dyamanics kwd parameters with faults
#----------------------------------------    

generic_system_dynamics_wt_fault_kwd_para =
    (;
     gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     # id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
     dyn_δ_ed_dash_eq_dash_Png_Qng_Pll_Qll_Idx,

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,

     state_vars_and_i_dq_wt_fault_Idx_in_state,

     state_algebraic_vars_Idx_in_state,
     state_algebraic_vars_wt_fault_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     dyn_pf_vh_θh_id_iq_vhf_θhf_Idx,
     dyn_pf_vh_vhf_θh_θhf_id_iq_Idx,

     dyn_pf_vh_vhf_Idx,
     dyn_pf_θh_θhf_Idx,

     dyn_pf_fun_kwd_n2s_idxs,
     dyn_pf_fun_kwd_net_idxs,

     pf_generic_gens_para,

     Ynet_wt_nodes_idx_wt_adjacent_nodes,

     ode_plants_kwd_para,
     dae_plants_kwd_para,

     algebraic_generic_model_wt_fault_kwd_para,
     algebraic_generic_model_wt_fault_sol_kwd_para,

     algebraic_generic_model_kwd_para,
     algebraic_generic_model_sol_kwd_para,

     no_lines_fault,
     no_current_lines_fault,

     cleared_selected_lines_faults_net_para,

     with_faults,
     generic_results_pf_sta_red_sol )

pre_post_generic_system_dynamics_wt_fault_kwd_para =
    (;
     gens_nodes_idx,
     ωs,
     loc_load_exist,
     state_vars_idx,

     id_iq_pg_vh_Idx,

     dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx, 

     gens_state_vars_idx_in_state,
     state_vars_and_i_dq_Idx_in_state,
     state_algebraic_vars_Idx_in_state,

     dyn_pf_flat_vh_flat_θh_id_iq_Idx,

     # dyn_pf_fun_kwd_n2s_idxs, 
     dyn_pf_fun_kwd_net_idxs, 
     # pf_generic_gens_para, 
     # Ynet_wt_nodes_idx_wt_adjacent_nodes,
     
     dae_plants_kwd_para,

     algebraic_generic_model_kwd_para,

     # cleared_selected_lines_faults_net_para,
     nodes_idx_with_adjacent_nodes_idx,
     pre_clear_fault_nodes_idx_with_adjacent_nodes_idx,
     post_clear_fault_nodes_idx_with_adjacent_nodes_idx)

#----------------------------------------
#----------------------------------------
# ODE system dyamanics simulation
#----------------------------------------    
#----------------------------------------

model_dynamics_kwd_para =
    ode_generic_model_dynamics_kwd_para

ODE_system_dynamics_fun! =
    ode_generic_system_model_by_funcs_dynamics!

#---------------------------------------------------


system_sol =
    DifferentialEquations.solve(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        ODE_system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms,
mass_matrix = model_mass_matrix ),
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para ),
        ode_alg,
        abstol = abstol,
        reltol = reltol )

nt_ode_results =
    (;system_sol,
     model_syms,
     gens_nodes_names,
     SM_gens_nodes_names,
     non_gens_nodes_names,
     sim_timespan)

#----------------------------------------
#----------------------------------------
# DAE system dyamanics simulation
#----------------------------------------    
#----------------------------------------


dae_model_dynamics_kwd_para =
    dae_generic_model_dynamics_kwd_para


DAE_system_dynamics_fun! =
    dae_generic_system_model_by_funcs_dynamics!

# dae_generic_system_dynamics_by_dae_pf_funcs!
# dae_generic_system_model_by_funcs_dynamics!

# dae_generic_system_model_dynamics!

# dae_generic_model_dynamics!

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        DAEProblem(
    DAEFunction(
    (res, dx,x,p,t) ->
        DAE_system_dynamics_fun!(
            res, dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                dae_model_dynamics_kwd_para);
    syms =
        model_syms),
    du0_model_states_init,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para,
    differential_vars =
        model_bool_dae_vars ),
        dae_alg,
        callback = cb,
        abstol   = abstol,
        reltol   = reltol )

#----------------------------------------

nt_dae_results =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan)


#---------------------------------------------------
#---------------------------------------------------
# Some  network aggregates parameters
#---------------------------------------------------

#---------------------------------------------------
#----------------------------------------
#----------------------------------------

# renewable_energy_net_optimisation_parameters = 
#     get_renewable_energy_net_optimisation_parameters(
#         case_file,

#         wind_gens_cost_scale,    
#         solar_gens_cost_scale,

#         wind_gens_capacity_scale,    
#         solar_gens_capacity_scale,

#         active_power_demand_deviation_scale,
#         reactive_power_demand_deviation_scale)

#----------------------------------------

    
opf_net_optimisation_parameters_by_case_file =
    get_opf_net_optimisation_parameters(
        case_file )

#----------------------------------------

system_net_data_wt_static_parameters = 
    get_system_net_data_wt_static_parameters(
        case_name
        ;script_dir = "",
        data_dir ="",
        json_net_data_by_components_file =
            dynamic_net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,
        basekV              = 1.0,    
        use_pu_in_PQ        = true,
        line_data_in_pu     = true,
        pf_alg              = NewtonRaphson())

#----------------------------------------


static_net_data_by_components_file =
    "opf-pf-net-default-static-data.json"

system_net_static_data =
    get_system_net_static_data(
        case_name ;
        script_dir="",
        data_dir = "",
        json_net_data_by_components_file =
            static_net_data_by_components_file,
        components_libs_dir = "",
        basekV              = 1.0,    
        use_pu_in_PQ        = true,
        line_data_in_pu     = true,
        pf_alg              =
            NewtonRaphson(),
        no_lines_fault = 1)

#----------------------------------------

generic_system_simulation_parameters = 
    get_generic_system_simulation_parameters(
        net_data_by_components_file;
        components_libs_dir =
            components_libs_dir,
        basekV = 1.0,    
        use_pu_in_PQ      = true,
        opf_use_pu_in_PQ  = true,
        line_data_in_pu   = true,
        with_faults       = false,
        pf_alg            = NewtonRaphson(),
        ode_alg           = Rodas4(),
        dae_alg           = IDA() )

#----------------------------------------

system_simulation_parameters_nothing =    
    get_system_simulation_parameters(
        net_data_by_components_file,
        nothing;
        components_libs_dir =
            components_libs_dir,
        basekV = 1.0,    
        use_pu_in_PQ = true,
        line_data_in_pu = true,

        use_init_u0 = false,
        use_nlsolve = false,
        pf_alg = NewtonRaphson(),
        abstol = abstol,
        reltol = reltol ) 

#---------

system_simulation_parameters =
    get_system_simulation_parameters(
        net_data_by_components_file;
        components_libs_dir =
            components_libs_dir,
        basekV          = 1.0,    
        use_pu_in_PQ    = true,
        line_data_in_pu = true,

        use_init_u0 = false,    
        use_nlsolve = false,    
        pf_alg      = NewtonRaphson(),    
        abstol      = abstol,
         reltol     = reltol  )

#----------------------------------------


status_steady_state_parameters =
    get_status_steady_state_parameters(
        net_data_by_components_file;
        components_libs_dir =
            components_libs_dir,
        
        basekV = 1.0,
        
        use_pu_in_PQ = true,
        
        line_data_in_pu = true,

        use_init_u0 = false,    
        use_nlsolve = false,

        pf_alg = NewtonRaphson(),

        abstol =
            abstol,
        
        reltol =
            reltol,

        on_fault_time    =
            on_fault_time,
        
        clear_fault_time =
            clear_fault_time,

        list_fault_point_from_node_a =
            list_fault_point_from_node_a,
        
        list_fault_resistance =
            list_fault_resistance,
        
        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault   =
            list_edges_to_have_fault,
        
        clear_fault_selection_list =
            clear_fault_selection_list,

        with_faults = false )

#----------------------------------------

pre_fault_steady_state_data =
    get_a_status_steady_state_data(
        :pre_fault_state;
        with_faults =
            false,

        # :pre_fault_state
        # :fault_state 
        # :post_fault_state ,
        # system_status = :pre_fault_state,

        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,

        timespan         = 10.0,
        on_fault_time    = 9.0,
        clear_fault_time = 9.001,

        list_fault_point_from_node_a = [0.3],
        list_fault_resistance        = [0.001],
        list_no_line_circuit         =  [4],

        list_edges_to_have_fault   = [ 2 ],
        clear_fault_selection_list = [1],

        basekV          = 1.0,    
        use_pu_in_PQ    = true,
        line_data_in_pu = true,

        #--------------------------------------    

        use_init_u0 = false,

        use_nlsolve = false,

        pf_alg        = NewtonRaphson(),

        #--------------------------------------    

        ode_alg       = Rodas4(),
        # ode_alg     = FBDF()
        # ode_alg     = QNDF()
        # ode_alg     = radau()
        # ode_alg     = RadauIIA5()
        # ode_alg     = DFBDF()

        dae_alg       = IDA(),

        abstol        = 1e-12,
        reltol        = 1e-12,

        dt            = 0.01)

#--------------

fault_steady_state_data =
    get_a_status_steady_state_data(
        :fault_state;
        with_faults =
            false,

        # :pre_fault_state
        # :fault_state 
        # :post_fault_state ,
        # system_status = :pre_fault_state,

        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,

        timespan         = 10.0,
        on_fault_time    = 9.0,
        clear_fault_time = 9.001,

        list_fault_point_from_node_a = [0.3],
        list_fault_resistance        = [0.001],
        list_no_line_circuit         =  [4],

        list_edges_to_have_fault   = [ 2 ],
        clear_fault_selection_list = [1],

        basekV          = 1.0,    
        use_pu_in_PQ    = true,
        line_data_in_pu = true,

        #--------------------------------------    

        use_init_u0 = false,

        use_nlsolve = false,

        pf_alg        = NewtonRaphson(),

        #--------------------------------------    

        ode_alg       = Rodas4(),
        # ode_alg     = FBDF()
        # ode_alg     = QNDF()
        # ode_alg     = radau()
        # ode_alg     = RadauIIA5()
        # ode_alg     = DFBDF()

        dae_alg       = IDA(),

        abstol        = 1e-12,
        reltol        = 1e-12,

        dt            = 0.01)

#--------------

post_fault_steady_state_data =
    get_a_status_steady_state_data(
        :post_fault_state;
        with_faults =
            false,

        # :pre_fault_state
        # :fault_state 
        # :post_fault_state ,
        # system_status = :pre_fault_state,

        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,

        timespan         = 10.0,
        on_fault_time    = 9.0,
        clear_fault_time = 9.001,

        list_fault_point_from_node_a = [0.3],
        list_fault_resistance        = [0.001],
        list_no_line_circuit         =  [4],

        list_edges_to_have_fault   = [ 2 ],
        clear_fault_selection_list = [1],

        basekV          = 1.0,    
        use_pu_in_PQ    = true,
        line_data_in_pu = true,

        #--------------------------------------    

        use_init_u0 = false,

        use_nlsolve = false,

        pf_alg        = NewtonRaphson(),

        #--------------------------------------    

        ode_alg       = Rodas4(),
        # ode_alg     = FBDF()
        # ode_alg     = QNDF()
        # ode_alg     = radau()
        # ode_alg     = RadauIIA5()
        # ode_alg     = DFBDF()

        dae_alg       = IDA(),

        abstol        = 1e-12,
        reltol        = 1e-12,

        dt            = 0.01)

#----------------------------------------

ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
    ;with_faults = with_faults,
    net_data_by_components_file =
        net_data_by_components_file,
    components_libs_dir =
        components_libs_dir,
    
        timespan =
            timespan,
        on_fault_time =
            on_fault_time,
        clear_fault_time =
            clear_fault_time,
    
        list_fault_point_from_node_a =
            list_fault_point_from_node_a,
        list_fault_resistance =
            list_fault_resistance,
        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,
        clear_fault_selection_list =
            clear_fault_selection_list,
    
        basekV =
            1.0,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu)



(;sta_pf_red_sol,
 dyn_pf_fun_kwd_net_idxs) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),
        (:sta_pf_red_sol,
         :dyn_pf_fun_kwd_net_idxs))


#---------------------------------------------------
#---------------------------------------------------
# Reading of models data from json, csv or xlsx
#---------------------------------------------------
#---------------------------------------------------


"""
Reading default model static data from csv or xlsx

`get_default_static_net_json_data_by_xlsx`
`get_default_static_net_json_data_by_mpc`

"""

default_static_net_json_data_by_xlsx = 
    get_default_static_net_json_data_by_xlsx(
        case_name;        
        data_dir            = "",
        components_libs_dir = "",
        by_components       = true,
        xlsx_data_file      = nothing,
        wt_plants_data_types_bool = false )

"""
Reading model static data from csv or xlsx

`get_net_data_by_static_components_by_xlsx`
`get_net_data_by_static_components_by_mpc`

"""

net_data_by_static_components_by_xlsx = 
    get_net_data_by_static_components_by_xlsx(
        ;case_name          = case_name,        
        data_dir            = "",
        components_libs_dir =
            components_libs_dir,
        by_components       = true,
        xlsx_data_file      = "" )

net_data_by_static_components_by_mpc = 
    get_net_data_by_static_components_by_mpc(
        ;case_name          =
            case_name,        
        data_dir            = "",
        components_libs_dir =
            components_libs_dir,
        by_components       = true )



"""
Multi gens and plants at a node system model data can be
read through:

`get_multi_gens_net_data_by_components_by_xlsx`

`get_multi_gens_net_data_by_components_by_mpc`

"""

multi_gens_net_data_by_components_by_xlsx = 
    get_multi_gens_net_data_by_components_by_xlsx(
        ;case_name          = "case9",        
        data_dir            = "",
        components_libs_dir = "",
        by_components       = true,
        xlsx_data_file      = nothing,
        wt_plants_data_types_bool = false)

"""
The entry point for reading a model data from
 system json file is:

`get_net_data_by_components_from_json_file`

A system model dynamic data can also be read from csv or xlsx
through:

`get_net_data_by_components_by_xlsx`

`get_net_data_by_components_by_mpc`

"""

(;plant_generators_data_from_json,
 plant_loads_data_from_json,
 plant_transmission_data_from_json,
 edge_data_from_json,
 shunt_data_from_json,
 baseMVA_data_from_json,
 gencost_data_from_json) =
    NamedTupleTools.select(
        get_net_data_by_components_from_json_file(
            net_data_by_components_file;
            in_components_type_sym =
                false ),
        (:plant_generators_data_from_json,
         :plant_loads_data_from_json,
         :plant_transmission_data_from_json,
         :edge_data_from_json,
         :shunt_data_from_json,
         :baseMVA_data_from_json,
         :gencost_data_from_json))

baseMVA = baseMVA_data_from_json

#---------------------------------------------------
#---------------------------------------------------
# Some basic parameters
#---------------------------------------------------
#---------------------------------------------------

pf_PQ_param =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA = baseMVA,
        use_pu_in_PQ = use_pu_in_PQ )

#---------------------------------------------------

ode_gens_para_selections  =
    (:H, :D,
     :X_d, :X_q,                  
     :X_d_dash, :X_q_dash,
     :T_d_dash, :T_q_dash, :Sn )

ode_gens_para_sequence_order =
    (:components_data, :gen)

ode_gens_generic_selections =
    (:H, :D,
     :ra, :xℓ,
     :X_d, :X_q,
     :X_d_dash,  :X_q_dash,
     :X_d_2dash, :X_q_2dash,
     :T_d_dash,  :T_q_dash, :Sn )

ode_gens_generic_sequence_order =
    (:components_data, :gen)

govs_and_avrs_sequence_order =
    ( :components_data,)

govs_and_avrs_selections =
    ( :gov, :avr )

#----------------------------------------

ode_gens_generic_para =
     get_ode_gens_generic_para(
         plant_generators_data_from_json;
         sequence_order =
             ode_gens_generic_sequence_order,
         selections =
             ode_gens_generic_selections)

#----------------------------------------


(;generic_gens_para,
 generic_govs_para,
 generic_avrs_para) =
     get_generic_gens_avr_gov_para(
         plant_generators_data_from_json;
         gens_sequence_order =
             ode_gens_generic_sequence_order,
        gens_selections =
            ode_gens_generic_selections,
        govs_and_avrs_sequence_order =
            govs_and_avrs_sequence_order,
        govs_and_avrs_selections =
            govs_and_avrs_selections)

#----------------------------------------

edges_ftbus_and_generic_data =
      get_edges_ftbus_and_generic_data_by_json(
         edge_data_from_json )

#----------------------------------------

edges_generic_data =
     get_edges_generic_data_by_json(
         edge_data_from_json )

#----------------------------------------

transmission_network_parameters =
    get_transmission_network_parameters_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json,
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA =
            baseMVA,
        basekV =
            1.0,
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu )

#----------------------------------------

sta_pf_PQ_para =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA =
            baseMVA,
        use_pu_in_PQ =
            use_pu_in_PQ)

#----------------------------------------

gens_vh_slack_θh_para =
    get_gens_vh_slack_θh_para_by_json(
        plant_generators_data_from_json )

#----------------------------------------

sta_pf_vars_and_paras_idx =
    get_sta_pf_vars_and_paras_idx_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

#----------------------------------------

pf_sta_ΔPQ_mismatch_parameters =
    get_pf_sta_ΔPQ_mismatch_parameters_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json,
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA = baseMVA,
        basekV = 1.0,
        use_pu_in_PQ = use_pu_in_PQ,
        line_data_in_pu = line_data_in_pu)

#----------------------------------------
#----------------------------------------

net_nodes_type_idxs =
    get_net_nodes_type_idxs_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

#----------------------------------------


dyn_pf_fun_kwd_net_idxs =
    NamedTupleTools.select(
        net_nodes_type_idxs,
        (:slack_gens_nodes_idx,
         :non_slack_gens_nodes_idx,
         :gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_with_loc_load_idx,
         :gens_nodes_with_loc_loads_idx,
         :all_nodes_idx))

#----------------------------------------

dyn_pf_fun_kwd_n2s_idxs =
    NamedTupleTools.select(
        get_dict_net_streamlined_idx_by_nodes_type_idxs(
            net_nodes_type_idxs ),
        (:n2s_slack_gens_idx,
         :n2s_non_slack_gens_idx,
         :n2s_gens_idx,
         :n2s_non_gens_idx,
         :n2s_gens_with_loc_load_idxs,
         :n2s_all_nodes_idx))

#----------------------------------------
#----------------------------------------


states_Idx_syms_wt_functions =
    get_states_Idx_syms_wt_functions(
        net_data_by_components_file,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs;
         components_libs_dir =
             components_libs_dir)

#----------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_nodes_with_loc_loads_idx,
 all_nodes_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx,
          :all_nodes_idx))


(;n2s_gens_idx,
n2s_non_gens_idx,
n2s_gens_with_loc_load_idxs,
n2s_all_nodes_idx ) =
    NamedTupleTools.select(
        dyn_pf_fun_kwd_n2s_idxs,
        (:n2s_gens_idx,
         :n2s_non_gens_idx,
         :n2s_gens_with_loc_load_idxs,
         :n2s_all_nodes_idx))

#----------------------------------------
# Some basic indices, labels and symbols
#----------------------------------------


(;state_vars_idx,
 vec_comp_states_Idx,
 plants_states_syms,
 generic_state_sym,
 state_labels,
 algebraic_vars_labels,
 network_vars_labels) =
     get_plants_states_syms_and_labels(
         gens_govs_avrs_states_syms,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs)

(;state_vars_idx,
 vec_comp_states_Idx,
 plants_states_syms,
 generic_state_sym,
 state_labels,
 algebraic_vars_labels,
 network_vars_labels,
 
 model_syms,
 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names) = 
    get_plants_states_syms_wt_labels_wt_names(
        gens_govs_avrs_states_syms,
        dyn_pf_fun_kwd_net_idxs,
        dyn_pf_fun_kwd_n2s_idxs)


get_model_syms(
    state_labels,
    dyn_pf_fun_kwd_net_idxs)


(;comps_callback_paras_funs,
 comps_init_funs,
 comps_output_funs,
 ode_comps_dyn_funs,
 dae_comps_dyn_funs,
 comps_dyn_funs) =
     get_dynamic_comps_init_out_dyn_callback_funcs(
    gens_govs_avrs_types)


(;nodes_names,
 gens_nodes_names,
 non_gens_nodes_names) =
     get_model_nodes_types_names(
          dyn_pf_fun_kwd_net_idxs,
          dyn_pf_fun_kwd_n2s_idxs )


get_model_states_comp_idxs_in_Idx(
        network_vars_labels,
        all_nodes_idx,
        n2s_all_nodes_idx;
    vars =
        [:δ, :ω, :ed_dash, :eq_dash] )

(;model_mass_matrix,
 model_bool_dae_vars,
 ode_gens_mass_matrix,
 ode_gens_bool_dae_vars) =
     get_mass_matrix_and_bool_dae_vars(
    state_labels,
    algebraic_vars_labels)


#----------------------------------------
#----------------------------------------

get_generic_nodes_names(
    dyn_pf_fun_kwd_net_idxs,
     n2s_all_nodes_idx)

get_generic_algebraic_state_sym(
    gens_nodes_idx,
    all_nodes_idx)

"""
generate_labels_by_nodes_idxs_and_vars(
    nodes_idxs,
    nodes_vars_syms;
    label_prefix = "bus" )

See usage below:
"""

generate_labels_by_nodes_idxs_and_vars(
            all_nodes_idx,
            [:vh];
    label_prefix = "bus")

generate_labels_by_nodes_idxs_and_vars(
            all_nodes_idx,
            [:θh];
    label_prefix = "bus")

generate_labels_by_nodes_idxs_and_vars(
            gens_nodes_idx,
            [:id];
    label_prefix = "bus")


"""

get_labels_by_nodes_idxs_and_vec_vec_syms(
    nodes_idxs,
    plants_states_syms;
    label_prefix = "bus" )


See usage below:
"""
get_labels_by_nodes_idxs_and_vec_vec_syms(
            gens_nodes_idx,
            plants_states_syms;
    label_prefix = "bus")


(;state_labels,
 algebraic_vars_labels,
 network_vars_labels) =
     get_generic_network_vars_labels(
         plants_states_syms,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs
         ;label_prefix = "bus",
         plants_states_by_per_comp = false,
         plants_states_by_per_plant = true)


#----------------------------------------

#----------------------------------------
"""
 get_idxs_in_flattened_by_nodes_idx_wt_vars_syms(
    list_state_vars_syms,
     gens_nodes_idx )

See usage below:

list_state_vars_syms = [:δ, :ω, :eq_dash, :E_fd]

 get_idxs_in_flattened_by_nodes_idx_wt_vars_syms(
    list_state_vars_syms,
     gens_nodes_idx )

"""


 get_states_idx_by_nodes_idx_wt_vars_syms(
    vec_nodes_states_vars_syms )

get_a_node_state_algb_vars_indices_in_syms(
    ; node_syms_labels =
        node_syms_labels,
    bus_name = bus_name,
    vars = [:ω, :δ])

get_a_node_state_algb_vars_indices_in_system(
    ; network_vars_labels =
        network_vars_labels,
    bus_name = "bus1", # bus_name,
    vars = [:ω, :δ])

get_nodes_state_algb_vars_indices_in_system(
    ; network_vars_labels =
        network_vars_labels,
    nodes_name = ["bus1", "bus2"],
    vars = [:ω, :δ])

# get_a_node_states_vars_syms_in_system(
#     ; network_vars_labels =
#         network_vars_labels,
#     bus_name = "bus1", # bus_name,
#     vars = [:δ, :ed_dash, :eq_dash])


#  get_a_node_states_indices_in_system(
#      ; network_vars_labels =
#          network_vars_labels,
#     bus_name = "bus1", # bus_name,
#      vars = [:δ, :ed_dash, :eq_dash])

#----------------------------------------
#----------------------------------------

#----------------------------------------

#----------------------------------------
#----------------------------------------

get_edges_r_x_b_ratio_angle_idx(
    edges_size)

#---------------------------------------------------
#---------------------------------------------------
# Dynamic modeling and simulations
#---------------------------------------------------
#---------------------------------------------------

sauer_net_wt_avr_string    = "net-static-data-avr-sauer-"

rtds_net_wt_avr_string     = "net-static-data-avr-rtds-"

sauer_gov_string           = "gov-sauer"

ieee_tgov2sauer_gov_string = "gov-ieee-tgov2sauer"

ieee_tgov1_gov_string      = "gov-ieee-tgov1"

#---------------------------------------------------

net_wt_avr_string = rtds_net_wt_avr_string

gov_string        = ieee_tgov1_gov_string


json_net_data_by_components_file =
    "$(net_wt_avr_string)"*
    "$(gov_string)" *
    ".json"

#---------------------------------------------------
#  full model distributed_
#---------------------------------------------------


full_model_distributed_slack_pf =
    sim_full_model_distributed_slack_pf(
        net_data_by_components_file;
        components_libs_dir = "",
        basekV            = 1.0,    
        use_pu_in_PQ      = true,
        line_data_in_pu   = true,
        with_faults       = false,
        wt_network_loss_by_sta_pf_PQ_para_bool = true,
        fractional_digits = 6,
        pf_alg            = NewtonRaphson(),
        abstol            = 1e-12,

        reltol            = 1e-12 )


#---------------------------------------------------
#  reduced model distributed_
#---------------------------------------------------

red_model_distributed_slack_pf =
    sim_red_model_distributed_slack_pf(
        net_data_by_components_file;
        components_libs_dir = "",
        basekV            = 1.0,    
        use_pu_in_PQ      = true,
        line_data_in_pu   = true,
        with_faults       = false,
        wt_network_loss_by_sta_pf_PQ_para_bool = true,
        fractional_digits = 6,
        pf_alg            = pf_alg,
        abstol            = abstol,

        reltol            = reltol )


#---------------------------------------------------
#  System dynamics
#---------------------------------------------------


"""
sim_model_by_mass_matrix_ode_by_funcs_dynamics!
sim_model_by_mass_matrix_by_ode_pf_funcs!

not working
sim_model_by_mass_matrix_ode_by_model_dynamics!

"""


"""

# Possible system_status

system_status = :pre_fault_state
system_status = :fault_state
system_status = :post_fault_state

system_state = :pre_fault_state

"""

#---------------------------------------------------
#---------------------------------------------------


(;plant_generators_data_from_json,
 plant_loads_data_from_json,
 plant_transmission_data_from_json,
 edge_data_from_json,
 shunt_data_from_json,
 baseMVA_data_from_json,
 gencost_data_from_json) =
    NamedTupleTools.select(
        get_net_data_by_components_from_json_file(
            net_data_by_components_file;
            in_components_type_sym =
                false ),
        (:plant_generators_data_from_json,
         :plant_loads_data_from_json,
         :plant_transmission_data_from_json,
         :edge_data_from_json,
         :shunt_data_from_json,
         :baseMVA_data_from_json,
         :gencost_data_from_json))

baseMVA = baseMVA_data_from_json

#---------------------------------------------------


pf_PQ_param =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA = baseMVA,
        use_pu_in_PQ = use_pu_in_PQ )

#---------------------------------------------------

ode_gens_para_selections  =
    (:H, :D,
     :X_d, :X_q,                  
     :X_d_dash, :X_q_dash,
     :T_d_dash, :T_q_dash, :Sn )

ode_gens_para_sequence_order =
    (:components_data, :gen)

ode_gens_generic_selections =
    (:H, :D,
     :ra, :xℓ,
     :X_d, :X_q,
     :X_d_dash,  :X_q_dash,
     :X_d_2dash, :X_q_2dash,
     :T_d_dash,  :T_q_dash, :Sn )

ode_gens_generic_sequence_order =
    (:components_data, :gen)

govs_and_avrs_sequence_order =
    ( :components_data,)

govs_and_avrs_selections =
    ( :gov, :avr )

#----------------------------------------

ode_gens_generic_para =
     get_ode_gens_generic_para(
         plant_generators_data_from_json;
         sequence_order =
             ode_gens_generic_sequence_order,
         selections =
             ode_gens_generic_selections)

#----------------------------------------


(;generic_gens_para,
 generic_govs_para,
 generic_avrs_para) =
     get_generic_gens_avr_gov_para(
         plant_generators_data_from_json;
         gens_sequence_order =
             ode_gens_generic_sequence_order,
        gens_selections =
            ode_gens_generic_selections,
        govs_and_avrs_sequence_order =
            govs_and_avrs_sequence_order,
        govs_and_avrs_selections =
            govs_and_avrs_selections)

#----------------------------------------


sta_pf_PQ_para =
    get_pf_PQ_param_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json;
        baseMVA =
            baseMVA,
        use_pu_in_PQ =
            use_pu_in_PQ)

#----------------------------------------


gens_vh_slack_θh_para =
    get_gens_vh_slack_θh_para_by_json(
        plant_generators_data_from_json )

#----------------------------------------

sta_pf_vars_and_paras_idx =
    get_sta_pf_vars_and_paras_idx_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

#----------------------------------------

pf_sta_ΔPQ_mismatch_parameters =
    get_pf_sta_ΔPQ_mismatch_parameters_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json,
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA = baseMVA,
        basekV = 1.0,
        use_pu_in_PQ = use_pu_in_PQ,
        line_data_in_pu = line_data_in_pu)

#----------------------------------------


(;gens_govs_avrs_states_syms,
 gens_govs_avrs_types) =
     get_gens_govs_avrs_states_syms_by_json(
            net_data_by_components_file;
            components_libs_dir =
                components_libs_dir )

#----------------------------------------


net_nodes_type_idxs =
    get_net_nodes_type_idxs_by_json(
        plant_generators_data_from_json,
        plant_loads_data_from_json,
        plant_transmission_data_from_json )

#----------------------------------------


dyn_pf_fun_kwd_net_idxs =
    NamedTupleTools.select(
        net_nodes_type_idxs,
        (:slack_gens_nodes_idx,
         :non_slack_gens_nodes_idx,
         :gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_with_loc_load_idx,
         :gens_nodes_with_loc_loads_idx,
         :all_nodes_idx))

#----------------------------------------

dyn_pf_fun_kwd_n2s_idxs =
    NamedTupleTools.select(
        get_dict_net_streamlined_idx_by_nodes_type_idxs(
            net_nodes_type_idxs ),
        (:n2s_slack_gens_idx,
         :n2s_non_slack_gens_idx,
         :n2s_gens_idx,
         :n2s_non_gens_idx,
         :n2s_gens_with_loc_load_idxs,
         :n2s_all_nodes_idx))

#----------------------------------------
# Some basic indices, labels and symbols
#----------------------------------------

(;state_vars_idx,
 vec_comp_states_Idx,
 plants_states_syms,
 generic_state_sym,
 state_labels,
 algebraic_vars_labels,
 network_vars_labels) =
     get_plants_states_syms_and_labels(
         gens_govs_avrs_states_syms,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs)

#----------------------------------------

get_model_syms(
    state_labels,
    dyn_pf_fun_kwd_net_idxs)

#----------------------------------------


(;comps_callback_paras_funs,
 comps_init_funs,
 comps_output_funs,
 ode_comps_dyn_funs,
 dae_comps_dyn_funs,
 comps_dyn_funs) =
     get_dynamic_comps_init_out_dyn_callback_funcs(
    gens_govs_avrs_types)

#----------------------------------------

(;state_vars_and_i_dq_Idx_in_state,
 state_vars_and_i_dq_wt_fault_Idx_in_state,
 state_algebraic_vars_Idx_in_state,
 state_algebraic_vars_wt_fault_Idx_in_state) =
     get_state_and_algebraic_vars_Idx_in_state(
         state_labels,
         dyn_pf_fun_kwd_net_idxs,
         dyn_pf_fun_kwd_n2s_idxs;
         no_lines_fault = 1 )

#----------------------------------------


(;nodes_names,
 gens_nodes_names,
 non_gens_nodes_names) =
     get_model_nodes_types_names(
          dyn_pf_fun_kwd_net_idxs,
          dyn_pf_fun_kwd_n2s_idxs )


get_model_states_comp_idxs_in_Idx(
        network_vars_labels,
        all_nodes_idx,
        n2s_all_nodes_idx;
    vars =
        [:δ, :ω, :ed_dash, :eq_dash] )

(;model_mass_matrix,
 model_bool_dae_vars,
 ode_gens_mass_matrix,
 ode_gens_bool_dae_vars) =
     get_mass_matrix_and_bool_dae_vars(
    state_labels,
    algebraic_vars_labels)


#----------------------------------------


#---------------------------------------------------
#---------------------------------------------------

(u0_model_states_init,
 model_syms,
 model_mass_matrix,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
 plants_cb_paras_switches,

 generic_system_dynamics_kwd_para,

 gens_nodes_names,
 SM_gens_nodes_names,
 non_gens_nodes_names,

 cb_states) =
     NamedTupleTools.select(
                 getproperty(
                     get_a_status_steady_state_data(
                         system_state;
                          with_faults,
                          net_data_by_components_file,
                          components_libs_dir,        

                          timespan,

                          on_fault_time,
                          clear_fault_time,

                          list_fault_point_from_node_a,
                          list_fault_resistance,
                          list_no_line_circuit,

                          list_edges_to_have_fault,
                          clear_fault_selection_list,

                          basekV,    
                          use_pu_in_PQ,
                          line_data_in_pu),
                     :static_prefault_paras) ,             
         (:u0_model_states_init,
          :model_syms,
          :model_mass_matrix,

          :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
          :plants_cb_paras_switches,

          :generic_system_dynamics_wt_fault_kwd_para,

          :gens_nodes_names,
          :SM_gens_nodes_names,
          :non_gens_nodes_names,

          :cb_states ))

#----------------------------------------
# ODE system dyamanics simulation
#----------------------------------------    

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

model_dynamics_para =
    (;generic_model_dynamics_para,
  plants_cb_paras_switches )


system_dynamics_fun! =
    mm_ode_generic_system_model_by_funcs_dynamics!

#----------------------------------------

model_dynamics_kwd_para =
    generic_system_dynamics_kwd_para

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms,
mass_matrix = model_mass_matrix ) ,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para ),
        ode_alg,
        callback = cb_states,
        abstol = abstol,
        reltol = reltol )

retsult= (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan)    



#----------------------------------------
#----------------------------------------

(u0_model_states_init,
 model_syms,
 model_mass_matrix,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
 plants_cb_paras_switches,

 generic_system_dynamics_kwd_para,

 gens_nodes_names,
 SM_gens_nodes_names,
 non_gens_nodes_names,

 cb_states) =
     NamedTupleTools.select(
                 getproperty(
                     get_a_status_steady_state_data(
                         system_state;
                          with_faults,
                          net_data_by_components_file,
                          components_libs_dir,        

                          timespan,

                          on_fault_time,
                          clear_fault_time,

                          list_fault_point_from_node_a,
                          list_fault_resistance,
                          list_no_line_circuit,

                          list_edges_to_have_fault,
                          clear_fault_selection_list,

                          basekV,    
                          use_pu_in_PQ,
                          line_data_in_pu),
                     :static_prefault_paras) ,             
         (:u0_model_states_init,
          :model_syms,
          :model_mass_matrix,

          :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
          :plants_cb_paras_switches,

          :generic_system_dynamics_wt_fault_kwd_para,

          :gens_nodes_names,
          :SM_gens_nodes_names,
          :non_gens_nodes_names,

          :cb_states ))

#----------------------------------------
# ODE system dyamanics simulation
#----------------------------------------    

model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

system_dynamics_fun! =
    mm_ode_generic_system_dynamics_by_ode_pf_funcs!

#----------------------------------------

model_dynamics_kwd_para =
    generic_system_dynamics_kwd_para

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms,
mass_matrix = model_mass_matrix ) ,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para ),
        ode_alg,
        abstol = abstol,
        reltol = reltol )

result =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan)    

#----------------------------------------
# Sundden load change
# dae_generic_system_model_by_funcs_dynamics!
#----------------------------------------


(;u0_model_states_init,
 model_syms,
 model_bool_dae_vars,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
 plants_cb_paras_switches,

 generic_system_dynamics_kwd_para,

 gens_nodes_names,
 SM_gens_nodes_names,
 non_gens_nodes_names,

 cb_states,

 plants_states_syms,

 gens_nodes_idx,

 state_labels,
 algebraic_vars_labels,
 network_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
     NamedTupleTools.select(
         get_system_simulation_parameters(
             net_data_by_components_file;
             components_libs_dir =
                 components_libs_dir,
             basekV = basekV,    
             use_pu_in_PQ = use_pu_in_PQ,
             line_data_in_pu = line_data_in_pu,

             use_init_u0 = use_init_u0,
             use_nlsolve = use_nlsolve,

             pf_alg = pf_alg,

             abstol = abstol,
             reltol = reltol),

         (:u0_model_states_init,
          :model_syms,
          :model_bool_dae_vars,

          :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
          :plants_cb_paras_switches,

          :generic_system_dynamics_kwd_para,

          :gens_nodes_names,
          :SM_gens_nodes_names,
          :non_gens_nodes_names,

          :cb_states,

          :plants_states_syms,
          :gens_nodes_idx,

          :state_labels,
          :algebraic_vars_labels,
          :network_vars_labels,

          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :Ybr_cal_and_edges_orientation,
          :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------


(;loc_load_exist,
 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 gens_state_vars_idx_in_state,
 state_vars_and_i_dq_Idx_in_state,

 state_labels,
 algebraic_vars_labels) =
     NamedTupleTools.select(
         generic_system_dynamics_kwd_para ,
         (:loc_load_exist,
          :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :gens_state_vars_idx_in_state,
          :state_vars_and_i_dq_Idx_in_state,

          :state_labels,
          :algebraic_vars_labels))

#---------------------------------------------------
## ODE system dyamanics simulation
#---------------------------------------------------

system_dynamics_fun! =
    dae_generic_system_model_by_funcs_dynamics!

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll
    # deepcopy(ω_ref_v_ref_p_order_Png_Qng_Pll_Qll)

model_dynamics_para =
    (;generic_model_dynamics_para,
      plants_cb_paras_switches )          

model_dynamics_kwd_para =
    generic_system_dynamics_kwd_para

#----------------------------------------
#----------------------------------------

du0_model_states_init =
    zeros(length(u0_model_states_init))

res = similar(u0_model_states_init)

#----------------------------------------
# integrator
#----------------------------------------    

system_integrator =
    DifferentialEquations.init(
        DAEProblem(
    DAEFunction(
    (res, dx, x, p, t) ->
        system_dynamics_fun!(
            res, dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms),
    du0_model_states_init,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para,
    differential_vars =
        model_bool_dae_vars ),
        dae_alg,
        dt = dt,
        callback = cb_states,
        tstops = [time_final],
        advance_to_tstop = true )

#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
    get_make_df_header_generic_model_dynamics_para(
        loc_load_exist,
        dyn_pf_fun_kwd_net_idxs)

parameter_df =
    DataFrame(
        OrderedDict(a_header => Float64[]
            for a_header in
                generic_model_dynamics_para_df_header_sym))


#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_with_loc_loads_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx))

bus_name = target_bus_name

bus_no_or_bus_name = bus_name

P_or_Q_or_Pll_or_Qll_sym = :P

var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        P_or_Q_or_Pll_or_Qll_sym;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

P_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :P;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

Q_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :Q;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :vh ] )[1]

θh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ;network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
    Symbol(
        "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
    OrderedDict(
        :t => Float64[],
        target_parameter_sym =>
                Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
    system_integrator.p.generic_model_dynamics_para[
        var_idx]
push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

add_tstop!(system_integrator,
           tstop1 )

step!(system_integrator)

push!(parameter_df,
    tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

system_sol =
    system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 2
# -------------------------------------

# A pertubation of Active power at bus 4

pertubation_factor =
    pertubation_factor

pertubation_tstop = tstop2

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 4
# -------------------------------------

# Continute simulation 

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym  )

system_sol = system_integrator.sol


push!( parameter_df, tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)


final_intg_model_dynamics_para =
    getproperty(
        system_integrator.p,
        :generic_model_dynamics_para)

push!(change_in_parameter_dict[
    target_parameter_sym],
      final_intg_model_dynamics_para[var_idx] )

#---------------------------------------------------
# Save results to files
#---------------------------------------------------


sd_dynamics_sim_df = DataFrame(system_sol)

sd_dynamics_sim_df[!, :] =
    round.(
        sd_dynamics_sim_df[:, :],
        digits=fractional_digits)

sd_dynamics_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                 "$(bus_name)-" *
                 "$(sim_type)-states.csv")

CSV.write(sd_dynamics_sim_csv_filename,
          sd_dynamics_sim_df )

#---------------------------------------------------

parameter_df[!, :] =
    round.(
        parameter_df[:, :],
        digits=fractional_digits)

sd_dynamics_para_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-parameters.csv")

CSV.write(sd_dynamics_para_sim_csv_filename,
          parameter_df )

#---------------------------------------------------

generic_model_dynamics_para_df_header_idx =
    1:length(generic_model_dynamics_para_df_header_sym)

paras_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-para-df-header-idx.csv")

CSV.write(paras_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
                  generic_model_dynamics_para_df_header_idx,
              :parameters =>
                  generic_model_dynamics_para_df_header_sym)) )

#---------------------------------------------------

generic_model_dynamics_state_df_header_sym =
    [[:t];model_syms]

generic_model_dynamics_state_df_header_idx =
    1:length( generic_model_dynamics_state_df_header_sym )

states_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-states-df-header-idx.csv")

CSV.write(states_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
                  generic_model_dynamics_state_df_header_idx,
              :states =>
                  generic_model_dynamics_state_df_header_sym) ) )

#---------------------------------------------------

save_pertubation_stage_plot(
    case_name,
    system_sol;
    model_syms,
    gens_nodes_names,
    SM_gens_nodes_names,
    non_gens_nodes_names,
    sim_timespan,
    figure_dir,
    P_or_Q_or_Pll_or_Qll_sym,
    bus_idx = bus_no_or_bus_name)

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
    get_sol_auxilliary_results(
        system_sol;
        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

auxilliary_results_plot =
    make_plot_gens_streamedlined_auxilliary_results(;
        sol_auxilliary_results... )


names_vars_plots =
    propertynames(auxilliary_results_plot)

for a_vars_plots in names_vars_plots

    plots_fig =
        getproperty(
            auxilliary_results_plot,
            a_vars_plots)

    local filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "$(String(a_vars_plots)).pdf"

    savefig(plots_fig,
            joinpath(
                figure_dir,
                filename))

end

#---------------------------------------------------

target_parameter_plot =
    plot(change_in_parameter_dict[:t],
         change_in_parameter_dict[target_parameter_sym],
         linetype=:steppre,
         yminorticks = 10,
         xminorticks = 10,
         fmt = :pdf,
         lw = 1,
         xlabel = "t [s]",
         ylabel = "$(target_parameter_sym) [p.u]",
         labels = "$(target_parameter_sym)",
         bottom_margin=2Plots.mm,  # Adjust bottom margin
         left_margin=5Plots.mm,   # Adjust left margin
         right_margin=2Plots.mm,  # Adjust right margin
         top_margin=2Plots.mm )

target_parameter_plot_filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "target-parameter-" *
        "$(String(target_parameter_sym)).pdf"

savefig(target_parameter_plot,
            joinpath(
                figure_dir,
                target_parameter_plot_filename))


result =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan,

        sol_auxilliary_results,
        target_parameter_plot)


#----------------------------------------
# Sudden load change
# dae_generic_system_model_by_funcs_dynamics!
#----------------------------------------


(;u0_model_states_init,
 model_syms,
 model_bool_dae_vars,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
 plants_cb_paras_switches,

 generic_system_dynamics_kwd_para,

 gens_nodes_names,
 SM_gens_nodes_names,
 non_gens_nodes_names,

 cb_states,

 plants_states_syms,

 gens_nodes_idx,

 state_labels,
 algebraic_vars_labels,
 network_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
     NamedTupleTools.select(
         get_system_simulation_parameters(
             net_data_by_components_file;
             components_libs_dir =
                 components_libs_dir,
             basekV = basekV,    
             use_pu_in_PQ = use_pu_in_PQ,
             line_data_in_pu = line_data_in_pu,

             use_init_u0 = use_init_u0,
             use_nlsolve = use_nlsolve,

             pf_alg = pf_alg,

             abstol = abstol,
             reltol = reltol),

         (:u0_model_states_init,
          :model_syms,
          :model_bool_dae_vars,

          :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
          :plants_cb_paras_switches,

          :generic_system_dynamics_kwd_para,

          :gens_nodes_names,
          :SM_gens_nodes_names,
          :non_gens_nodes_names,

          :cb_states,

          :plants_states_syms,
          :gens_nodes_idx,

          :state_labels,
          :algebraic_vars_labels,
          :network_vars_labels,

          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :Ybr_cal_and_edges_orientation,
          :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------


(;loc_load_exist,
 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 gens_state_vars_idx_in_state,
 state_vars_and_i_dq_Idx_in_state,

 state_labels,
 algebraic_vars_labels) =
     NamedTupleTools.select(
         generic_system_dynamics_kwd_para ,
         (:loc_load_exist,
          :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :gens_state_vars_idx_in_state,
          :state_vars_and_i_dq_Idx_in_state,

          :state_labels,
          :algebraic_vars_labels))

#---------------------------------------------------
## ODE system dyamanics simulation
#---------------------------------------------------

system_dynamics_fun! =
    dae_generic_system_model_by_funcs_dynamics!

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll
    # deepcopy(ω_ref_v_ref_p_order_Png_Qng_Pll_Qll)

model_dynamics_para =
    (;generic_model_dynamics_para,
      plants_cb_paras_switches )          

model_dynamics_kwd_para =
    generic_system_dynamics_kwd_para

#----------------------------------------
#----------------------------------------

du0_model_states_init =
    zeros(length(u0_model_states_init))

res = similar(u0_model_states_init)

#----------------------------------------
# integrator
#----------------------------------------    

system_integrator =
    DifferentialEquations.init(
        DAEProblem(
    DAEFunction(
    (res, dx, x, p, t) ->
        system_dynamics_fun!(
            res, dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms),
    du0_model_states_init,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para,
    differential_vars =
        model_bool_dae_vars ),
        dae_alg,
        dt = dt,
        callback = cb_states,
        tstops = [time_final],
        advance_to_tstop = true )

#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
    get_make_df_header_generic_model_dynamics_para(
        loc_load_exist,
        dyn_pf_fun_kwd_net_idxs)

parameter_df =
    DataFrame(
        OrderedDict(a_header => Float64[]
            for a_header in
                generic_model_dynamics_para_df_header_sym  ))


#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_with_loc_loads_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx))

bus_name = target_bus_name

bus_no_or_bus_name = bus_name

P_or_Q_or_Pll_or_Qll_sym = :P

var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        P_or_Q_or_Pll_or_Qll_sym;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

P_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :P;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

Q_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :Q;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :vh ] )[1]

θh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
    Symbol(
        "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
    OrderedDict(
        :t => Float64[],
        target_parameter_sym =>
                Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
    system_integrator.p.generic_model_dynamics_para[
        var_idx]
push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

add_tstop!(system_integrator,
           tstop1 )

step!(system_integrator)

push!(parameter_df,
    tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

system_sol =
    system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 2
# -------------------------------------

# A pertubation of Active power at bus 4

pertubation_factor =
    pertubation_factor

pertubation_tstop = tstop2

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 4
# -------------------------------------

# Continute simulation 

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym  )

system_sol = system_integrator.sol


push!( parameter_df, tuple(
        [[system_integrator.t];
         system_integrator.p.generic_model_dynamics_para]...
             ))

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

final_intg_model_dynamics_para =
    getproperty(
        system_integrator.p,
        :generic_model_dynamics_para)

push!(change_in_parameter_dict[
    target_parameter_sym],
      final_intg_model_dynamics_para[var_idx] )

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
    get_sol_auxilliary_results(
        system_sol;
        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

auxilliary_results_plot =
    make_plot_gens_streamedlined_auxilliary_results(
        ; sol_auxilliary_results... )

#---------------------------------------------------

target_parameter_plot =
    plot(change_in_parameter_dict[:t],
         change_in_parameter_dict[target_parameter_sym],
         linetype=:steppre,
         yminorticks = 10,
         xminorticks = 10,
         fmt = :pdf,
         lw = 1,
         xlabel = "t [s]",
         ylabel = "$(target_parameter_sym) [p.u]",
         labels = "$(target_parameter_sym)",
         bottom_margin=2Plots.mm,  # Adjust bottom margin
         left_margin=5Plots.mm,   # Adjust left margin
         right_margin=2Plots.mm,  # Adjust right margin
         top_margin=2Plots.mm )

result =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan,

        sol_auxilliary_results,
        auxilliary_results_plot,
        target_parameter_plot)



#----------------------------------------
# Sudden load change
# mm mm_ode_generic_system_model_by_funcs_dynamics!
#----------------------------------------


(;u0_model_states_init,
model_syms,
model_bool_dae_vars,
model_mass_matrix,

ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
plants_cb_paras_switches,

generic_system_dynamics_kwd_para,

gens_nodes_names,
SM_gens_nodes_names,
non_gens_nodes_names,

cb_states,

plants_states_syms,

gens_nodes_idx,

state_labels,
algebraic_vars_labels,
network_vars_labels,

dyn_pf_fun_kwd_n2s_idxs,
dyn_pf_fun_kwd_net_idxs,

Ybr_cal_and_edges_orientation,
Ynet_wt_nodes_idx_wt_adjacent_nodes) =
    NamedTupleTools.select(
        get_system_simulation_parameters(
            net_data_by_components_file;
            components_libs_dir =
                components_libs_dir,
            basekV = basekV,    
            use_pu_in_PQ = use_pu_in_PQ,
            line_data_in_pu = line_data_in_pu,

            use_init_u0 = use_init_u0,
            use_nlsolve = use_nlsolve,

            pf_alg = pf_alg,

            abstol = abstol,
            reltol = reltol),

        (:u0_model_states_init,
         :model_syms,
         :model_bool_dae_vars,
         :model_mass_matrix,


         :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
         :plants_cb_paras_switches,

         :generic_system_dynamics_kwd_para,

         :gens_nodes_names,
         :SM_gens_nodes_names,
         :non_gens_nodes_names,

         :cb_states,

         :plants_states_syms,
         :gens_nodes_idx,

         :state_labels,
         :algebraic_vars_labels,
         :network_vars_labels,

         :dyn_pf_fun_kwd_n2s_idxs,
         :dyn_pf_fun_kwd_net_idxs,

         :Ybr_cal_and_edges_orientation,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------


(;loc_load_exist,
dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
dyn_pf_fun_kwd_n2s_idxs,
dyn_pf_fun_kwd_net_idxs,

gens_state_vars_idx_in_state,
state_vars_and_i_dq_Idx_in_state,

state_labels,
algebraic_vars_labels) =
    NamedTupleTools.select(
        generic_system_dynamics_kwd_para ,
        (:loc_load_exist,
         :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
         :dyn_pf_fun_kwd_n2s_idxs,
         :dyn_pf_fun_kwd_net_idxs,

         :gens_state_vars_idx_in_state,
         :state_vars_and_i_dq_Idx_in_state,

         :state_labels,
         :algebraic_vars_labels))

#----------------------------------------
# ODE system dyamanics simulation
#----------------------------------------    

system_dynamics_fun! =
   mm_ode_generic_system_model_by_funcs_dynamics!
   # mm_ode_generic_system_dynamics_by_ode_pf_funcs!

#----------------------------------------

model_dynamics_kwd_para =
   generic_system_dynamics_kwd_para


generic_model_dynamics_para =
   ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

model_dynamics_para =
   (;generic_model_dynamics_para,
     plants_cb_paras_switches )          

# model_dynamics_para =
#     ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

#----------------------------------------
# integrator
#----------------------------------------    

system_integrator =
   DifferentialEquations.init(
       ODEProblem(
   ODEFunction(
   (dx,x,p,t) ->
       system_dynamics_fun!(
           dx, x,
           model_dynamics_para,
           t;
           kwd_para =
               model_dynamics_kwd_para);
   syms =
       model_syms,
mass_matrix = model_mass_matrix ) ,
   u0_model_states_init,
   sim_timespan,
   model_dynamics_para ),
       ode_alg,
       # dt = dt,

       callback = cb_states,
       tstops = [time_final],
       advance_to_tstop = true,

       abstol = abstol,
       reltol = reltol )

#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
   get_make_df_header_generic_model_dynamics_para(
       loc_load_exist,
       dyn_pf_fun_kwd_net_idxs)

parameter_df =
   DataFrame(
       OrderedDict(a_header => Float64[]
           for a_header in
               generic_model_dynamics_para_df_header_sym))


#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
non_gens_nodes_idx,
gens_with_loc_loads_idx) =
    NamedTupleTools.select(
        dyn_pf_fun_kwd_net_idxs,
        (:gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_nodes_with_loc_loads_idx))

bus_name = target_bus_name

bus_no_or_bus_name = bus_name

P_or_Q_or_Pll_or_Qll_sym = :P

var_idx =
   get_P_or_Q_idx_in_generic_model_dynamics_para(
       bus_no_or_bus_name,
       P_or_Q_or_Pll_or_Qll_sym;
       loc_load_exist,
       dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
       dyn_pf_fun_kwd_n2s_idxs,
       dyn_pf_fun_kwd_net_idxs )

P_var_idx =
   get_P_or_Q_idx_in_generic_model_dynamics_para(
       bus_no_or_bus_name,
       :P;
       loc_load_exist,
       dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
       dyn_pf_fun_kwd_n2s_idxs,
       dyn_pf_fun_kwd_net_idxs )

Q_var_idx =
   get_P_or_Q_idx_in_generic_model_dynamics_para(
       bus_no_or_bus_name,
       :Q;
       loc_load_exist,
       dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
       dyn_pf_fun_kwd_n2s_idxs,
       dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
   get_a_node_state_algb_vars_indices_in_system(
       ; network_vars_labels =
           model_syms,
       bus_name = bus_name,
       vars = [ :vh ] )[1]

θh_var_idx_in_state =
   get_a_node_state_algb_vars_indices_in_system(
       ; network_vars_labels =
           model_syms,
       bus_name = bus_name,
       vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
   Symbol(
       "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
   OrderedDict(
       :t => Float64[],
       target_parameter_sym =>
               Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
   system_integrator.p.generic_model_dynamics_para[
       var_idx]
push!(
   parameter_df,
   tuple(
       [[system_integrator.t];
        system_integrator.p.generic_model_dynamics_para]...
            ))

#----------------------------------------

push!(change_in_parameter_dict[:t],
             system_integrator.t)

push!(change_in_parameter_dict[
   target_parameter_sym],
     var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
             system_integrator.t)

push!(change_in_parameter_dict[
   target_parameter_sym],
     var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

add_tstop!(system_integrator,
          tstop1 )

step!(system_integrator)

push!(parameter_df,
   tuple(
       [[system_integrator.t];
        system_integrator.p.generic_model_dynamics_para]...
            ))

system_sol =
   system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
             system_integrator.t)

push!(change_in_parameter_dict[
   target_parameter_sym],
     var_normal_value)

# -------------------------------------
# Steps 2
# -------------------------------------

# A pertubation of Active power at bus 4

pertubation_factor =
   pertubation_factor

pertubation_tstop = tstop2

pertubation_by_itegrator(
   var_normal_value,
   pertubation_factor,
   pertubation_tstop,
   var_idx,
   system_integrator;
   parameter_df,
   change_in_parameter_dict,
   target_parameter_sym )

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_factor =
   restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
   var_normal_value,
   pertubation_factor,
   pertubation_tstop,
   var_idx,
   system_integrator;
   parameter_df,
   change_in_parameter_dict,
   target_parameter_sym )

# -------------------------------------
# Step 4
# -------------------------------------

# Continute simulation 

pertubation_factor =
   restoration_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
   var_normal_value,
   pertubation_factor,
   pertubation_tstop,
   var_idx,
   system_integrator;
   parameter_df,
   change_in_parameter_dict,
   target_parameter_sym  )

system_sol = system_integrator.sol


push!( parameter_df, tuple(
       [[system_integrator.t];
        system_integrator.p.generic_model_dynamics_para]...
            ))

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
             system_integrator.t)


final_intg_model_dynamics_para =
   getproperty(
       system_integrator.p,
       :generic_model_dynamics_para)

push!(change_in_parameter_dict[
   target_parameter_sym],
     final_intg_model_dynamics_para[var_idx] )

#---------------------------------------------------
# Save results to files
#---------------------------------------------------


sd_dynamics_sim_df = DataFrame(system_sol)

sd_dynamics_sim_df[!, :] =
   round.(
       sd_dynamics_sim_df[:, :],
       digits=fractional_digits)

sd_dynamics_sim_csv_filename =
   joinpath(results_dir,
            "$(case_name)-" *
                "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                "$(bus_name)-" *
                "$(sim_type)-states.csv")

CSV.write(sd_dynamics_sim_csv_filename,
         sd_dynamics_sim_df )

#---------------------------------------------------

parameter_df[!, :] =
   round.(
       parameter_df[:, :],
       digits=fractional_digits)

sd_dynamics_para_sim_csv_filename =
   joinpath(results_dir,
            "$(case_name)-" *
                "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                "$(bus_no_or_bus_name)-" *
                "$(sim_type)-parameters.csv")

CSV.write(sd_dynamics_para_sim_csv_filename,
         parameter_df )

#---------------------------------------------------

generic_model_dynamics_para_df_header_idx =
   1:length(generic_model_dynamics_para_df_header_sym)

paras_df_header_idx_csv_filename =
   joinpath(results_dir,
            "$(case_name)-" *
                "$(bus_no_or_bus_name)-" *
                "$(sim_type)-para-df-header-idx.csv")

CSV.write(paras_df_header_idx_csv_filename,
         DataFrame(OrderedDict(
             :idx =>
                 generic_model_dynamics_para_df_header_idx,
             :parameters =>
                 generic_model_dynamics_para_df_header_sym)) )

#---------------------------------------------------

generic_model_dynamics_state_df_header_sym =
   [[:t];model_syms]

generic_model_dynamics_state_df_header_idx =
   1:length( generic_model_dynamics_state_df_header_sym )

states_df_header_idx_csv_filename =
   joinpath(results_dir,
            "$(case_name)-" *
                "$(bus_no_or_bus_name)-" *
                "$(sim_type)-states-df-header-idx.csv")

CSV.write(states_df_header_idx_csv_filename,
         DataFrame(OrderedDict(
             :idx =>
                 generic_model_dynamics_state_df_header_idx,
             :states =>
                 generic_model_dynamics_state_df_header_sym) ) )


#---------------------------------------------------

save_pertubation_stage_plot(
   case_name,
   system_sol;
   model_syms,
   gens_nodes_names,
   SM_gens_nodes_names,
   non_gens_nodes_names,
   sim_timespan,
   figure_dir,
   P_or_Q_or_Pll_or_Qll_sym,
   bus_idx = bus_no_or_bus_name)

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
   get_sol_auxilliary_results(
       system_sol;
       state_labels,
       algebraic_vars_labels,

       dyn_pf_fun_kwd_n2s_idxs,
       dyn_pf_fun_kwd_net_idxs )

auxilliary_results_plot =
   make_plot_gens_streamedlined_auxilliary_results(;
       sol_auxilliary_results... )


names_vars_plots =
   propertynames(auxilliary_results_plot)

for a_vars_plots in names_vars_plots

   plots_fig =
       getproperty(
           auxilliary_results_plot,
           a_vars_plots)

   local filename =
       "$(case_name)-" *
       "$(bus_no_or_bus_name)-" *
       "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
       "pertubation-" *
       "$(String(a_vars_plots)).pdf"

   savefig(plots_fig,
           joinpath(
               figure_dir,
               filename))

end

#---------------------------------------------------

target_parameter_plot =
   plot(change_in_parameter_dict[:t],
        change_in_parameter_dict[target_parameter_sym],
        linetype=:steppre,
        yminorticks = 10,
        xminorticks = 10,
        fmt = :pdf,
        lw = 1,
        xlabel = "t [s]",
        ylabel = "$(target_parameter_sym) [p.u]",
        labels = "$(target_parameter_sym)",
        bottom_margin=2Plots.mm,  # Adjust bottom margin
        left_margin=5Plots.mm,   # Adjust left margin
        right_margin=2Plots.mm,  # Adjust right margin
        top_margin=2Plots.mm )

target_parameter_plot_filename =
       "$(case_name)-" *
       "$(bus_no_or_bus_name)-" *
       "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
       "pertubation-" *
       "target-parameter-" *
       "$(String(target_parameter_sym)).pdf"

savefig(target_parameter_plot,
           joinpath(
               figure_dir,
               target_parameter_plot_filename))


result =  (;system_sol,
       model_syms,
       gens_nodes_names,
       SM_gens_nodes_names,
       non_gens_nodes_names,
       sim_timespan,

       sol_auxilliary_results,
       target_parameter_plot)


#----------------------------------------
# Sudden load change
# mm mm_line_outage_generic_dynamics_wt_pre_post_fault_by_ode_pf_funcs!
#----------------------------------------

ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
        ;with_faults =
            with_faults,
        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,

        timespan =
            timespan,
        on_fault_time =
            on_fault_time,
        clear_fault_time =
            clear_fault_time,

        list_fault_point_from_node_a =
            list_fault_point_from_node_a,
        list_fault_resistance =
            list_fault_resistance,
        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,
        clear_fault_selection_list =
            clear_fault_selection_list,

        basekV =
            basekV,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu,
        list_network_status =
            list_network_status )

#---------------------------------------------------

(;loc_load_exist,
 state_labels,
 algebraic_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 system_fault_status,
 generic_system_dynamics_wt_fault_kwd_para,
 on_fault_net_para,
 cleared_selected_lines_faults_net_para,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

 # model_bool_dae_vars_wt_fault,
 # model_syms_wt_fault,         
 # u0_model_states_init_wt_fault,

 model_bool_dae_vars,     
 model_syms,
 u0_model_states_init,
 model_mass_matrix,     

 cb_states,
 plants_cb_paras_switches,

 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names,

 ωref0_vref0_porder0_id_iq_vh_Idx,
 dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

 edges_r,
 edges_x,
 edges_b,
 edges_ratio,
 edges_angle,
 edges_type,
 Gs,
 Bs,
 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),        
        (:loc_load_exist,
         :state_labels,
         :algebraic_vars_labels,
         :dyn_pf_fun_kwd_n2s_idxs,
         :dyn_pf_fun_kwd_net_idxs,

         :system_fault_status,
         :generic_system_dynamics_wt_fault_kwd_para,
         :on_fault_net_para,
         :cleared_selected_lines_faults_net_para,

         :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

         # :model_bool_dae_vars_wt_fault,
         # :model_syms_wt_fault,         
         # :u0_model_states_init_wt_fault,

         :model_bool_dae_vars,     
         :model_syms,
         :u0_model_states_init,
         :model_mass_matrix,             

         :cb_states,
         :plants_cb_paras_switches,

         :nodes_names,
         :gens_nodes_names,
         :non_gens_nodes_names,
         :SM_gens_nodes_names,
         :SC_gens_nodes_names,

         :ωref0_vref0_porder0_id_iq_vh_Idx,
         :dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

         :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

         :edges_r,
         :edges_x,
         :edges_b,
         :edges_ratio,
         :edges_angle,
         :edges_type,
         :Gs,
         :Bs,
         :Ybr_cal_and_edges_orientation,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes))


#----------------------------------------

# po := post_outage

(po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :post_fault_state),
            :dynamic_status_paras),
        (:ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,))

#----------------------------------------
#----------------------------------------


(Ynet, ) =
     NamedTupleTools.select(
    Ynet_wt_nodes_idx_wt_adjacent_nodes,
         (:Ynet, ) )

#----------------------------------------

(fault_Ynet,
 post_fault_Ynet) =
    NamedTupleTools.select(
    cleared_selected_lines_faults_net_para,
        (:pre_clear_fault_Ynet,
         :post_clear_fault_Ynet, ))

#----------------------------------------
(;dyn_ω_ref_Idx,
 dyn_v_ref_Idx,
 dyn_p_order_Idx,
 dyn_Png_Idx,
 dyn_Qng_Idx,
 dyn_Pll_Idx,
 dyn_Qll_Idx ) =
     NamedTupleTools.select(
         dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
         (:dyn_ω_ref_Idx,
          :dyn_v_ref_Idx,
          :dyn_p_order_Idx,
          :dyn_Png_Idx,
          :dyn_Qng_Idx,
          :dyn_Pll_Idx,
          :dyn_Qll_Idx))

#---------------------------------------

@show system_fault_status

if system_fault_status[1] != 0

    system_fault_status[1] = 0

end

#---------------------------------------
#---------------------------------------
# line loss with only porder_adj
#---------------------------------------
#---------------------------------------

cb_line_outage = DiscreteCallback(
    (u, t, integrator) ->
        on_line_outage_condition(
            u, t, integrator,
            line_outage_time),

   on_line_outage_affect!;
    save_positions=(true, true),
    initializealg =
        ShampineCollocationInit() )

cb_outage_set =
    CallbackSet(cb_line_outage,)

tstop_outage =
    [line_outage_time]


if outage_type == :line_outage_wt_pref_adjs

    gens_porder_adj =
        po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll[
            dyn_p_order_Idx]

    cb_gens_porder_adjustment = DiscreteCallback(
        (u, t, integrator) ->
            on_generation_adjustment_condition(
                u, t, integrator,
                generation_adjustment_time),

        (integrator) ->
            on_generation_adjustment_affect!(
                integrator,
                gens_porder_adj,
                dyn_p_order_Idx );
        save_positions=(true, true),
        initializealg =
            ShampineCollocationInit() )


    cb_outage_set =
        CallbackSet(cb_line_outage,
        cb_gens_porder_adjustment)

    tstop_outage =
        [line_outage_time,
         generation_adjustment_time]


elseif outage_type == :line_outage_wt_vpref_adjs

    vref_and_porder_Idx =
        [ dyn_v_ref_Idx; dyn_p_order_Idx]

    vref_and_porder_adj =
        po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll[
            vref_and_porder_Idx]

    cb_vref_and_porder_adj = DiscreteCallback(
        (u, t, integrator) ->
            on_generation_adjustment_condition(
                u, t, integrator,
                generation_adjustment_time),

        (integrator) ->
            on_generation_adjustment_affect!(
            integrator,
            vref_and_porder_adj,
            vref_and_porder_Idx);
        save_positions=(true, true),
        initializealg =
            ShampineCollocationInit() )

    cb_outage_set =
        CallbackSet(cb_line_outage,
        cb_vref_and_porder_adj)

    tstop_outage =
        [line_outage_time,
         generation_adjustment_time]

else # :line_outage

    nothing
end

#----------------------------------------
#---------------------------------------

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

model_dynamics_para =
    (;generic_model_dynamics_para,
     Ynet,
     post_fault_Ynet,
     system_fault_status,
     plants_cb_paras_switches )

model_dynamics_kwd_para =
    generic_system_dynamics_wt_fault_kwd_para

#----------------------------------------


system_dynamics_fun! =
    mm_line_outage_generic_dynamics_wt_pre_post_fault_by_ode_pf_funcs!

#----------------------------------------
# integrator
#----------------------------------------    

system_integrator =
    DifferentialEquations.init(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms,
        mass_matrix =
            model_mass_matrix ) ,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para ),
        ode_alg,
        # dt = dt,

        callback = cb_states,
        tstops = [time_final],
        advance_to_tstop = true,

        abstol = abstol,
        reltol = reltol )

#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
    get_make_df_header_generic_model_dynamics_para(
        loc_load_exist,
        dyn_pf_fun_kwd_net_idxs)

parameter_df =
    DataFrame(
        OrderedDict(a_header => Float64[]
            for a_header in
          generic_model_dynamics_para_df_header_sym))

#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_with_loc_loads_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx))

bus_name =
    target_bus_name

bus_no_or_bus_name =
    bus_name

P_or_Q_or_Pll_or_Qll_sym =
    :P

var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        P_or_Q_or_Pll_or_Qll_sym;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs)

P_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :P;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs)

Q_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :Q;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :vh ] )[1]

θh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
    Symbol(
        "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
    OrderedDict(
        :t => Float64[],
        target_parameter_sym =>
                Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
    system_integrator.p.generic_model_dynamics_para[
        var_idx]
push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
   system_integrator.p.generic_model_dynamics_para]...))

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

add_tstop!(
    system_integrator, tstop1 )

step!(system_integrator)

push!(parameter_df,
    tuple(
        [[system_integrator.t];
   system_integrator.p.generic_model_dynamics_para]...))

system_sol =
    system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

@show "step 1"

# -------------------------------------
# Steps 2
# -------------------------------------

# A pertubation of Active power at bus 4

pertubation_factor =
    pertubation_factor

pertubation_tstop =
    tstop2

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

@show "step 2"

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

@show "step 3"

# -------------------------------------
# Step 4
# -------------------------------------

# Continute simulation 

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

system_sol = system_integrator.sol

push!( parameter_df, tuple(
        [[system_integrator.t];
  system_integrator.p.generic_model_dynamics_para]...))

@show "step 4"

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

final_intg_model_dynamics_para =
    getproperty(
        system_integrator.p,
        :generic_model_dynamics_para)

push!(change_in_parameter_dict[
    target_parameter_sym],
      final_intg_model_dynamics_para[var_idx] )

@show "step 5"

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
    get_sol_auxilliary_results(
        system_sol;
        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs)

auxilliary_results_plot =
    make_plot_gens_streamedlined_auxilliary_results(
        ;sol_auxilliary_results...)

#---------------------------------------------------

target_parameter_plot =
    plot(change_in_parameter_dict[:t],
         change_in_parameter_dict[target_parameter_sym],
         linetype=:steppre,
         yminorticks = 10,
         xminorticks = 10,
         fmt = :pdf,
         lw = 1,
         xlabel = "t [s]",
         ylabel = "$(target_parameter_sym) [p.u]",
         labels = "$(target_parameter_sym)",
         bottom_margin=2Plots.mm, # Adjust bottom margin
         left_margin=5Plots.mm,   # Adjust left margin
         right_margin=2Plots.mm,  # Adjust right margin
         top_margin=2Plots.mm )


result =  (;system_sol,
       model_syms,
       gens_nodes_names,
       SM_gens_nodes_names,
       non_gens_nodes_names,
       sim_timespan,

       sol_auxilliary_results,
       target_parameter_plot)

#----------------------------------------
# Sudden load change
# mm mm_ode_generic_system_model_by_funcs_dynamics!
#----------------------------------------

ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
        ;with_faults =
            with_faults,
        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,

        timespan =
            timespan,
        on_fault_time =
            on_fault_time,
        clear_fault_time =
            clear_fault_time,

        list_fault_point_from_node_a =
            list_fault_point_from_node_a,
        list_fault_resistance =
            list_fault_resistance,
        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,
        clear_fault_selection_list =
            clear_fault_selection_list,

        basekV =
            basekV,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu,
        list_network_status =
            list_network_status )

#---------------------------------------------------

(;loc_load_exist,
 state_labels,
 algebraic_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 system_fault_status,
 generic_system_dynamics_wt_fault_kwd_para,
 on_fault_net_para,
 cleared_selected_lines_faults_net_para,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

 # model_bool_dae_vars_wt_fault,
 # model_syms_wt_fault,         
 # u0_model_states_init_wt_fault,

 model_bool_dae_vars,     
 model_syms,
 u0_model_states_init,
 model_mass_matrix,     

 cb_states,
 plants_cb_paras_switches,

 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names,

 ωref0_vref0_porder0_id_iq_vh_Idx,
 dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

 edges_r,
 edges_x,
 edges_b,
 edges_ratio,
 edges_angle,
 edges_type,
 Gs,
 Bs,
 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),        
        (:loc_load_exist,
         :state_labels,
         :algebraic_vars_labels,
         :dyn_pf_fun_kwd_n2s_idxs,
         :dyn_pf_fun_kwd_net_idxs,

         :system_fault_status,
         :generic_system_dynamics_wt_fault_kwd_para,
         :on_fault_net_para,
         :cleared_selected_lines_faults_net_para,

         :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

         # :model_bool_dae_vars_wt_fault,
         # :model_syms_wt_fault,         
         # :u0_model_states_init_wt_fault,

         :model_bool_dae_vars,     
         :model_syms,
         :u0_model_states_init,
         :model_mass_matrix,             

         :cb_states,
         :plants_cb_paras_switches,

         :nodes_names,
         :gens_nodes_names,
         :non_gens_nodes_names,
         :SM_gens_nodes_names,
         :SC_gens_nodes_names,

         :ωref0_vref0_porder0_id_iq_vh_Idx,
         :dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

         :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

         :edges_r,
         :edges_x,
         :edges_b,
         :edges_ratio,
         :edges_angle,
         :edges_type,
         :Gs,
         :Bs,
         :Ybr_cal_and_edges_orientation,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#---------------------------------------------------
## ODE system dyamanics simulation
#---------------------------------------------------

system_dynamics_fun! =
    mm_ode_generic_system_model_by_funcs_dynamics!
    # mm_ode_generic_system_dynamics_by_ode_pf_funcs!

#----------------------------------------

model_dynamics_kwd_para =
    generic_system_dynamics_wt_fault_kwd_para
    # generic_system_dynamics_kwd_para

model_dynamics_para =
    (;generic_model_dynamics_para =
     ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
     plants_cb_paras_switches )          

#----------------------------------------
# integrator
#----------------------------------------    

system_integrator =
    DifferentialEquations.init(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms,
mass_matrix = model_mass_matrix ) ,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para ),
        ode_alg,
        # dt = dt,

        callback = cb_states,
        tstops = [time_final],
        advance_to_tstop = true )

#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
    get_make_df_header_generic_model_dynamics_para(
        loc_load_exist,
        dyn_pf_fun_kwd_net_idxs)

parameter_df =
    DataFrame(
        OrderedDict(a_header => Float64[]
            for a_header in
           generic_model_dynamics_para_df_header_sym))


#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_with_loc_loads_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx))

bus_name =
    target_bus_name

bus_no_or_bus_name =
    bus_name

# bus_name = "bus4"

P_or_Q_or_Pll_or_Qll_sym = :P


var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        P_or_Q_or_Pll_or_Qll_sym;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

P_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :P;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

Q_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :Q;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :vh ] )[1]

θh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
    Symbol(
        "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
    OrderedDict(
        :t => Float64[],
        target_parameter_sym =>
                Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
    system_integrator.p.generic_model_dynamics_para[
        var_idx]

push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
   system_integrator.p.generic_model_dynamics_para]...))

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

add_tstop!(system_integrator,
           tstop1 )

step!(system_integrator)

push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
   system_integrator.p.generic_model_dynamics_para]...))

system_sol =
    system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

@show "step 1"

# -------------------------------------
# Steps 2
# -------------------------------------

# A pertubation of Active power at bus 4

pertubation_factor =
    pertubation_factor

pertubation_tstop =
    tstop2

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

@show "step 2"

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

@show "step 3"

# -------------------------------------
# Step 4
# -------------------------------------

# Continute simulation 

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym  )

system_sol = system_integrator.sol

push!( parameter_df, tuple(
        [[system_integrator.t];
  system_integrator.p.generic_model_dynamics_para]...))

@show "step 4"

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)


final_intg_model_dynamics_para =
    getproperty(
        system_integrator.p,
        :generic_model_dynamics_para)

push!(change_in_parameter_dict[
    target_parameter_sym],
      final_intg_model_dynamics_para[var_idx] )

@show "step 5"

#---------------------------------------------------

fractional_digits = 6

sd_dynamics_sim_df = DataFrame(system_sol)

sd_dynamics_sim_df[!, :] =
    round.(
        sd_dynamics_sim_df[:, :],
        digits=fractional_digits)

sd_dynamics_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                 "$(bus_name)-" *
                 "$(sim_type)-states.csv")

CSV.write(sd_dynamics_sim_csv_filename,
          sd_dynamics_sim_df )

#---------------------------------------------------

parameter_df[!, :] =
    round.(
        parameter_df[:, :],
        digits=fractional_digits)

sd_dynamics_para_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-parameters.csv")

CSV.write(sd_dynamics_para_sim_csv_filename,
          parameter_df )

#---------------------------------------------------

generic_model_dynamics_para_df_header_idx =
    1:length(generic_model_dynamics_para_df_header_sym)

paras_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-para-df-header-idx.csv")

CSV.write(paras_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
            generic_model_dynamics_para_df_header_idx,
              :parameters =>
          generic_model_dynamics_para_df_header_sym)))

#---------------------------------------------------

generic_model_dynamics_state_df_header_sym =
    [[:t];model_syms]

generic_model_dynamics_state_df_header_idx =
  1:length( generic_model_dynamics_state_df_header_sym )

states_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(bus_no_or_bus_name)-" *
                 "$(sim_type)-states-df-header-idx.csv")

CSV.write(states_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
            generic_model_dynamics_state_df_header_idx,
              :states =>
       generic_model_dynamics_state_df_header_sym)))

#---------------------------------------------------

save_pertubation_stage_plot(
    case_name,
    system_sol;
    model_syms,
    gens_nodes_names,
    SM_gens_nodes_names,
    non_gens_nodes_names,
    sim_timespan,
    figure_dir,
    P_or_Q_or_Pll_or_Qll_sym,
    bus_idx = bus_no_or_bus_name)

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
    get_sol_auxilliary_results(
        system_sol;
        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

auxilliary_results_plot =
    make_plot_gens_streamedlined_auxilliary_results(;
        sol_auxilliary_results... )


names_vars_plots =
    propertynames(auxilliary_results_plot)

for a_vars_plots in names_vars_plots

    plots_fig =
        getproperty(
            auxilliary_results_plot,
            a_vars_plots)

    local filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "$(String(a_vars_plots)).pdf"

    savefig(plots_fig,
            joinpath(
                figure_dir,
                filename))

end

#---------------------------------------------------

target_parameter_plot =
    plot(change_in_parameter_dict[:t],
         change_in_parameter_dict[target_parameter_sym],
         linetype=:steppre,
         yminorticks = 10,
         xminorticks = 10,
         fmt = :pdf,
         lw = 1,
         xlabel = "t [s]",
         ylabel = "$(target_parameter_sym) [p.u]",
         labels = "$(target_parameter_sym)",
         bottom_margin=2Plots.mm,  # Adjust bottom margin
         left_margin=5Plots.mm,   # Adjust left margin
         right_margin=2Plots.mm,  # Adjust right margin
         top_margin=2Plots.mm )

target_parameter_plot_filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "target-parameter-" *
        "$(String(target_parameter_sym)).pdf"

savefig(target_parameter_plot,
            joinpath(
                figure_dir,
                target_parameter_plot_filename))    

#---------------------------------------------------
# Save results to files
#---------------------------------------------------

 results =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan )

#----------------------------------------
# Sudden load change
# mm mm_ode_generic_system_model_by_funcs_dynamics!
#----------------------------------------

(;u0_model_states_init,
 model_syms,
 model_bool_dae_vars,

 model_mass_matrix,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
 plants_cb_paras_switches,

 generic_system_dynamics_kwd_para,

 gens_nodes_names,
 SM_gens_nodes_names,
 non_gens_nodes_names,

 cb_states,

 plants_states_syms,

 gens_nodes_idx,

 state_labels,
 algebraic_vars_labels,
 network_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
     NamedTupleTools.select(
         get_system_simulation_parameters(
             net_data_by_components_file;
             components_libs_dir =
                 components_libs_dir,
             basekV = basekV,    
             use_pu_in_PQ = use_pu_in_PQ,
             line_data_in_pu = line_data_in_pu,

             use_init_u0 = use_init_u0,
             use_nlsolve = use_nlsolve,

             pf_alg = pf_alg,

             abstol = abstol,
             reltol = reltol),

         (:u0_model_states_init,
          :model_syms,
          :model_bool_dae_vars,

          :model_mass_matrix,

          :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
          :plants_cb_paras_switches,

          :generic_system_dynamics_kwd_para,

          :gens_nodes_names,
          :SM_gens_nodes_names,
          :non_gens_nodes_names,

          :cb_states,

          :plants_states_syms,
          :gens_nodes_idx,

          :state_labels,
          :algebraic_vars_labels,
          :network_vars_labels,

          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :Ybr_cal_and_edges_orientation,
          :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------


(;loc_load_exist,
 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 gens_state_vars_idx_in_state,
 state_vars_and_i_dq_Idx_in_state,

 state_labels,
 algebraic_vars_labels) =
     NamedTupleTools.select(
         generic_system_dynamics_kwd_para ,
         (:loc_load_exist,
          :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
          :dyn_pf_fun_kwd_n2s_idxs,
          :dyn_pf_fun_kwd_net_idxs,

          :gens_state_vars_idx_in_state,
          :state_vars_and_i_dq_Idx_in_state,

          :state_labels,
          :algebraic_vars_labels))

#---------------------------------------------------
## ODE system dyamanics simulation
#---------------------------------------------------

system_dynamics_fun! =
    mm_ode_generic_system_model_by_funcs_dynamics!
    # dae_generic_system_model_by_funcs_dynamics!

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll
    # deepcopy(ω_ref_v_ref_p_order_Png_Qng_Pll_Qll)

model_dynamics_para =
    (;generic_model_dynamics_para,
      plants_cb_paras_switches )          

model_dynamics_kwd_para =
    generic_system_dynamics_kwd_para

#----------------------------------------
# integrator
#----------------------------------------    


if  use_saveat == true

    system_integrator =
        DifferentialEquations.init(
            ODEProblem(
        ODEFunction(
        (dx,x,p,t) ->
            system_dynamics_fun!(
                dx, x,
                model_dynamics_para,
                t;
                kwd_para =
                    model_dynamics_kwd_para);
        syms =
            model_syms,
    mass_matrix = model_mass_matrix ) ,
        u0_model_states_init,
        sim_timespan,
        model_dynamics_para ),
            ode_alg,

            dt = dt,
            saveat = ts,

            callback = cb_states,
            tstops = [time_final],
            advance_to_tstop = true )

else

    system_integrator =
        DifferentialEquations.init(
            ODEProblem(
        ODEFunction(
        (dx,x,p,t) ->
            system_dynamics_fun!(
                dx, x,
                model_dynamics_para,
                t;
                kwd_para =
                    model_dynamics_kwd_para);
        syms =
            model_syms,
    mass_matrix = model_mass_matrix ) ,
        u0_model_states_init,
        sim_timespan,
        model_dynamics_para ),
            ode_alg,
            dt = dt,

            callback = cb_states,
            tstops = [time_final],
            advance_to_tstop = true )

end


#---------------------------------------------------
# parameters df header
#---------------------------------------------------

generic_model_dynamics_para_df_header_sym =
    get_make_df_header_generic_model_dynamics_para(
        loc_load_exist,
        dyn_pf_fun_kwd_net_idxs)

parameter_df =
    DataFrame(
        OrderedDict(a_header => Float64[]
            for a_header in
       generic_model_dynamics_para_df_header_sym))

#---------------------------------------------------
# parameters to be perturbed
#---------------------------------------------------

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_with_loc_loads_idx) =
     NamedTupleTools.select(
         dyn_pf_fun_kwd_net_idxs,
         (:gens_nodes_idx,
          :non_gens_nodes_idx,
          :gens_nodes_with_loc_loads_idx))

# bus_no_or_bus_name = 4

bus_no_or_bus_name = target_bus_name

bus_name = target_bus_name

# bus_name = "bus4"

P_or_Q_or_Pll_or_Qll_sym = :P


var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        P_or_Q_or_Pll_or_Qll_sym;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

P_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :P;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

Q_var_idx =
    get_P_or_Q_idx_in_generic_model_dynamics_para(
        bus_no_or_bus_name,
        :Q;
        loc_load_exist,
        dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

vh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :vh ] )[1]

θh_var_idx_in_state =
    get_a_node_state_algb_vars_indices_in_system(
        ; network_vars_labels =
            model_syms,
        bus_name = bus_name,
        vars = [ :θh ] )[1]

#---------------------------------------------------

target_parameter_sym =
    Symbol(
        "$(bus_name)_$(P_or_Q_or_Pll_or_Qll_sym)")

change_in_parameter_dict =
    OrderedDict(
        :t => Float64[],
        target_parameter_sym =>
                Float64[] )

#---------------------------------------------------
# Save parameters base value
#---------------------------------------------------

# Get the Power at bus 4

var_normal_value =
    system_integrator.p.generic_model_dynamics_para[
        var_idx]

push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
  system_integrator.p.generic_model_dynamics_para]...))

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

#----------------------------------------
# simulation steps
#----------------------------------------    

tstop1 = pertubation_time             # time_final/10
tstop2 = restoration_time             # time_final/8
tstop3 = restoration_time + Δt1       # time_final/6
tstop4 = restoration_time + Δt1 + Δt2 # time_final/2
tstop5 = time_final/1.0    

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 1
# -------------------------------------

pertubation_count = 1

add_tstop!(system_integrator,
           tstop1 )

step!(system_integrator)

push!(
    parameter_df,
    tuple(
        [[system_integrator.t];
 system_integrator.p.generic_model_dynamics_para]...))

system_sol =
    system_integrator.sol

#----------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)

push!(change_in_parameter_dict[
    target_parameter_sym],
      var_normal_value)

# -------------------------------------
# Steps 2
# -------------------------------------

pertubation_count = 2

pertubation_factor =
    pertubation_factor

pertubation_tstop = tstop2

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 3
# -------------------------------------

# Bring back to normal the Power at bus 4

pertubation_count = 3

# pertubation_factor = 1.0

pertubation_factor =
    restoration_factor

pertubation_tstop = tstop3

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym )

# -------------------------------------
# Step 4
# -------------------------------------

# maintaint the Power at bus 4

pertubation_count = 4

# pertubation_factor = 1.0

pertubation_factor =
    pertubation_factor

pertubation_tstop = tstop4

pertubation_by_itegrator(
    var_normal_value,
    pertubation_factor,
    pertubation_tstop,
    var_idx,
    system_integrator;
    parameter_df,
    change_in_parameter_dict,
    target_parameter_sym  )

system_sol = system_integrator.sol


push!( parameter_df, tuple(
        [[system_integrator.t];
 system_integrator.p.generic_model_dynamics_para]...
             ))

#---------------------------------------------------
# simulate tstop4 till the end
#---------------------------------------------------

DifferentialEquations.solve!(system_integrator)

system_sol = system_integrator.sol

#---------------------------------------------------

push!(change_in_parameter_dict[:t],
              system_integrator.t)


final_intg_model_dynamics_para =
    getproperty(
        system_integrator.p,
        :generic_model_dynamics_para)

push!(change_in_parameter_dict[
    target_parameter_sym],
      final_intg_model_dynamics_para[var_idx] )

#---------------------------------------------------
# Save results to files
#---------------------------------------------------

fractional_digits = fractional_digits

sd_dynamics_sim_df = DataFrame(system_sol)

sd_dynamics_sim_df[!, :] =
    round.(
        sd_dynamics_sim_df[:, :],
        digits=fractional_digits)

# sd_dynamics_sim_csv_filename =
#         joinpath(results_dir,
#                  "$(case_name)-" *
#                      "$(sim_type)-" *
#                      "sim-sd-dynamics.csv")


sd_dynamics_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-"*
              "$(String(P_or_Q_or_Pll_or_Qll_sym))-"*
              "$(bus_name)-"*
              "$(sim_type)-states.csv")

CSV.write(sd_dynamics_sim_csv_filename,
          sd_dynamics_sim_df )

#---------------------------------------------------

parameter_df[!, :] =
    round.(
        parameter_df[:, :],
        digits=fractional_digits)

sd_dynamics_para_sim_csv_filename =
    joinpath(results_dir,
             "$(case_name)-"*
             "$(String(P_or_Q_or_Pll_or_Qll_sym))-"*
             "$(bus_no_or_bus_name)-"*
             "$(sim_type)-parameters.csv")

CSV.write(sd_dynamics_para_sim_csv_filename,
          parameter_df )

#---------------------------------------------------

generic_model_dynamics_para_df_header_idx =
    1:length(generic_model_dynamics_para_df_header_sym)

paras_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-"*
             "$(bus_no_or_bus_name)-"*
             "$(sim_type)-para-df-header-idx.csv")

CSV.write(paras_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
          generic_model_dynamics_para_df_header_idx,
              :parameters =>
          generic_model_dynamics_para_df_header_sym)))

#---------------------------------------------------

generic_model_dynamics_state_df_header_sym =
    [[:t];model_syms]

generic_model_dynamics_state_df_header_idx =
    1:length(
        generic_model_dynamics_state_df_header_sym)

states_df_header_idx_csv_filename =
    joinpath(results_dir,
             "$(case_name)-" *
             "$(bus_no_or_bus_name)-" *
             "$(sim_type)-states-df-header-idx.csv")

CSV.write(states_df_header_idx_csv_filename,
          DataFrame(OrderedDict(
              :idx =>
         generic_model_dynamics_state_df_header_idx,
              :states =>
         generic_model_dynamics_state_df_header_sym)))

#---------------------------------------------------

save_pertubation_stage_plot(
    case_name,
    system_sol;
    model_syms,
    gens_nodes_names,
    SM_gens_nodes_names,
    non_gens_nodes_names,
    sim_timespan,
    figure_dir,
    P_or_Q_or_Pll_or_Qll_sym,
    bus_idx = bus_no_or_bus_name)

#---------------------------------------------------
# extract solution auxilliary results
#---------------------------------------------------

sol_auxilliary_results =
    get_sol_auxilliary_results(
        system_sol;
        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs )

auxilliary_results_plot =
    make_plot_gens_streamedlined_auxilliary_results(;
        sol_auxilliary_results... )


names_vars_plots =
    propertynames(auxilliary_results_plot)

for a_vars_plots in names_vars_plots

    plots_fig =
        getproperty(
            auxilliary_results_plot,
            a_vars_plots)

    local filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "$(String(a_vars_plots)).pdf"

    savefig(plots_fig,
            joinpath(
                figure_dir,
                filename))

end

#---------------------------------------------------

system_sol_jld2 =
    joinpath("$(results_dir)",
             "system-sol.jld2")

JLD2.@save "$(system_sol_jld2)" system_sol 

#---------------------------------------------------

target_parameter_plot =
    plot(change_in_parameter_dict[:t],
         change_in_parameter_dict[
             target_parameter_sym],
         linetype=:steppre,
         yminorticks = 10,
         xminorticks = 10,
         fmt = :pdf,
         lw = 1,
         xlabel = "t [s]",
         ylabel = "$(target_parameter_sym) [p.u]",
         labels = "$(target_parameter_sym)",
         bottom_margin=2Plots.mm,# Adjust bottom margin
         left_margin=5Plots.mm,  # Adjust left margin
         right_margin=2Plots.mm, # Adjust right margin
         top_margin=2Plots.mm )

target_parameter_plot_filename =
        "$(case_name)-" *
        "$(bus_no_or_bus_name)-" *
        "$(String(P_or_Q_or_Pll_or_Qll_sym))-" *
        "pertubation-" *
        "target-parameter-" *
        "$(String(target_parameter_sym)).pdf"

savefig(target_parameter_plot,
            joinpath(
                figure_dir,
                target_parameter_plot_filename))

result_sol_plot =
    get_guick_single_vars_plots_dae_or_ode_sol(
        ;system_sol =
        system_sol,
        model_syms =
            model_syms,
        gens_nodes_names =
            gens_nodes_names,
        SM_gens_nodes_names =
            SM_gens_nodes_names,
        non_gens_nodes_names =
            non_gens_nodes_names,
        sim_timespan = sim_timespan )

result = (; result_sol_plot,
        target_parameter_plot)

#----------------------------------------
# line_outage_pertubation
# mm mm_ode_generic_system_model_by_funcs_dynamics!
#----------------------------------------


ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
        ;with_faults =
            with_faults,

        net_data_by_components_file =
            net_data_by_components_file,

        components_libs_dir =
            components_libs_dir,

        timespan =
            timespan,

        on_fault_time =
            on_fault_time,

        clear_fault_time =
            clear_fault_time,

        list_fault_point_from_node_a =
            list_fault_point_from_node_a,

        list_fault_resistance =
            list_fault_resistance,

        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,

        clear_fault_selection_list =
            clear_fault_selection_list,

        basekV =
            basekV,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu,
        list_network_status =
            list_network_status )

#---------------------------------------------------

(;state_labels,
 algebraic_vars_labels,

 dyn_pf_fun_kwd_n2s_idxs,
 dyn_pf_fun_kwd_net_idxs,

 system_fault_status,
 generic_system_dynamics_wt_fault_kwd_para,
 on_fault_net_para,
 cleared_selected_lines_faults_net_para,

 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

 # model_bool_dae_vars_wt_fault,
 # model_syms_wt_fault,         
 # u0_model_states_init_wt_fault,

 model_bool_dae_vars,     
 model_syms,
 u0_model_states_init,
 model_mass_matrix,     

 cb_states,
 plants_cb_paras_switches,

 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names,

 ωref0_vref0_porder0_id_iq_vh_Idx,
 dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

 dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

 edges_r,
 edges_x,
 edges_b,
 edges_ratio,
 edges_angle,
 edges_type,
 Gs,
 Bs,
 Ybr_cal_and_edges_orientation,
 Ynet_wt_nodes_idx_wt_adjacent_nodes) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),        
        (:state_labels,
         :algebraic_vars_labels,
         :dyn_pf_fun_kwd_n2s_idxs,
         :dyn_pf_fun_kwd_net_idxs,

         :system_fault_status,
         :generic_system_dynamics_wt_fault_kwd_para,
         :on_fault_net_para,
         :cleared_selected_lines_faults_net_para,

         :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,

         # :model_bool_dae_vars_wt_fault,
         # :model_syms_wt_fault,         
         # :u0_model_states_init_wt_fault,

         :model_bool_dae_vars,     
         :model_syms,
         :u0_model_states_init,
         :model_mass_matrix,             

         :cb_states,
         :plants_cb_paras_switches,

         :nodes_names,
         :gens_nodes_names,
         :non_gens_nodes_names,
         :SM_gens_nodes_names,
         :SC_gens_nodes_names,

         :ωref0_vref0_porder0_id_iq_vh_Idx,
         :dyn_ωref0_vref0_porder0_id_iq_vh_Idx,

         :dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,

         :edges_r,
         :edges_x,
         :edges_b,
         :edges_ratio,
         :edges_angle,
         :edges_type,
         :Gs,
         :Bs,
         :Ybr_cal_and_edges_orientation,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes))

#----------------------------------------

# po := post_outage

(po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :post_fault_state),
            :dynamic_status_paras),
        (:ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,))

#----------------------------------------
#----------------------------------------

(Ynet, ) =
     NamedTupleTools.select(
    Ynet_wt_nodes_idx_wt_adjacent_nodes,
         (:Ynet, ) )

#----------------------------------------

(fault_Ynet,
 post_fault_Ynet) =
    NamedTupleTools.select(
    cleared_selected_lines_faults_net_para,
        (:pre_clear_fault_Ynet,
         :post_clear_fault_Ynet, ))

#----------------------------------------
(;dyn_ω_ref_Idx,
 dyn_v_ref_Idx,
 dyn_p_order_Idx,
 dyn_Png_Idx,
 dyn_Qng_Idx,
 dyn_Pll_Idx,
 dyn_Qll_Idx ) =
     NamedTupleTools.select(
         dyn_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll_Idx,
         (:dyn_ω_ref_Idx,
          :dyn_v_ref_Idx,
          :dyn_p_order_Idx,
          :dyn_Png_Idx,
          :dyn_Qng_Idx,
          :dyn_Pll_Idx,
          :dyn_Qll_Idx))

#---------------------------------------

@show system_fault_status

if system_fault_status[1] != 0

    system_fault_status[1] = 0

end

#---------------------------------------
#---------------------------------------
# line loss with only porder_adj
#---------------------------------------
#---------------------------------------

cb_line_outage = DiscreteCallback(
    (u, t, integrator) ->
        on_line_outage_condition(
            u, t, integrator,
            line_outage_time),

   on_line_outage_affect!;
    save_positions=(true, true),
    initializealg =
        ShampineCollocationInit() )

cb_outage_set =
    CallbackSet(cb_line_outage,)

tstop_outage =
    [line_outage_time]


if outage_type == :line_outage_wt_pref_adjs

    gens_porder_adj =
        po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll[
            dyn_p_order_Idx]

    cb_gens_porder_adjustment = DiscreteCallback(
        (u, t, integrator) ->
            on_generation_adjustment_condition(
                u, t, integrator,
                generation_adjustment_time),

        (integrator) ->
            on_generation_adjustment_affect!(
                integrator,
                gens_porder_adj,
                dyn_p_order_Idx );
        save_positions=(true, true),
        initializealg =
            ShampineCollocationInit() )


    cb_outage_set =
        CallbackSet(cb_line_outage,
        cb_gens_porder_adjustment)

    tstop_outage =
        [line_outage_time,
         generation_adjustment_time]


elseif outage_type == :line_outage_wt_vpref_adjs

    vref_and_porder_Idx =
        [ dyn_v_ref_Idx; dyn_p_order_Idx]

    vref_and_porder_adj =
        po_ω_ref_v_ref_p_order_Png_Qng_Pll_Qll[
            vref_and_porder_Idx]

    cb_vref_and_porder_adj = DiscreteCallback(
        (u, t, integrator) ->
            on_generation_adjustment_condition(
                u, t, integrator,
                generation_adjustment_time),

        (integrator) ->
            on_generation_adjustment_affect!(
            integrator,
            vref_and_porder_adj,
            vref_and_porder_Idx);
        save_positions=(true, true),
        initializealg =
            ShampineCollocationInit() )

    cb_outage_set =
        CallbackSet(cb_line_outage,
        cb_vref_and_porder_adj)

    tstop_outage =
        [line_outage_time,
         generation_adjustment_time]

else # :line_outage

    nothing
end

#----------------------------------------
#---------------------------------------

generic_model_dynamics_para =
    ω_ref_v_ref_p_order_Png_Qng_Pll_Qll

model_dynamics_para =
    (;generic_model_dynamics_para,
     Ynet,
     post_fault_Ynet,
     system_fault_status,
     plants_cb_paras_switches )

model_dynamics_kwd_para =
    generic_system_dynamics_wt_fault_kwd_para

#----------------------------------------

system_dynamics_fun! =
    mm_line_outage_generic_dynamics_wt_pre_post_fault_by_ode_pf_funcs!

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        ODEProblem(
    ODEFunction(
    (dx,x,p,t) ->
        system_dynamics_fun!(
            dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
        syms =
            model_syms,
        mass_matrix =
            model_mass_matrix ) ,
            u0_model_states_init,
            sim_timespan,
            model_dynamics_para,
            callback =
                cb_states),
            ode_alg,
            callback =
                cb_outage_set,
            tstops =
                tstop_outage,
            abstol = abstol,
            reltol = reltol )

results =  (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan,

        state_labels,
        algebraic_vars_labels,

        dyn_pf_fun_kwd_n2s_idxs,
        dyn_pf_fun_kwd_net_idxs,

        edges_r,
        edges_x,
        edges_b,
        edges_ratio,
        edges_angle,
        edges_type,
        Gs,
        Bs,
        Ybr_cal_and_edges_orientation,
        Ynet_wt_nodes_idx_wt_adjacent_nodes,
        ntuple_status_steady_state_data )    

#----------------------------------------
# Ynet_pertubation
# mm mm_ode_generic_system_model_by_funcs_dynamics!
#----------------------------------------


ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
        ;with_faults =
            with_faults,

        net_data_by_components_file =
            net_data_by_components_file,

        components_libs_dir =
            components_libs_dir,

        timespan =
            timespan,

        on_fault_time =
            on_fault_time,

        clear_fault_time =
            clear_fault_time,

        list_fault_point_from_node_a =
            list_fault_point_from_node_a,

        list_fault_resistance =
            list_fault_resistance,

        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,

        clear_fault_selection_list =
            clear_fault_selection_list,

        basekV =
            basekV,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu,
        list_network_status =
            list_network_status )

(;system_fault_status,
 generic_system_dynamics_wt_fault_kwd_para,
 Ynet_wt_nodes_idx_wt_adjacent_nodes,
 on_fault_net_para,
 cleared_selected_lines_faults_net_para,

 model_bool_dae_vars_wt_fault,
 model_syms_wt_fault,         
 u0_model_states_init_wt_fault,

 cb_states,

 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names,

 δ_ed_dash_eq_dash_Png_Qng_Pll_Qll,
 ωref0_vref0_porder0_id_iq_vh,
 ω_ref_v_ref_p_order_Png_Qng_Pll_Qll) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),        
        (:system_fault_status,
         :generic_system_dynamics_wt_fault_kwd_para,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes,
         :on_fault_net_para,
         :cleared_selected_lines_faults_net_para,

         :model_bool_dae_vars_wt_fault,
         :model_syms_wt_fault,         
         :u0_model_states_init_wt_fault,

         :cb_states,

         :nodes_names,
         :gens_nodes_names,
         :non_gens_nodes_names,
         :SM_gens_nodes_names,
         :SC_gens_nodes_names,

         :δ_ed_dash_eq_dash_Png_Qng_Pll_Qll,
         :ωref0_vref0_porder0_id_iq_vh,
         :ω_ref_v_ref_p_order_Png_Qng_Pll_Qll))

#----------------------------------------

(Ynet, ) =
     NamedTupleTools.select(
    Ynet_wt_nodes_idx_wt_adjacent_nodes,
         (:Ynet, ) )

#----------------------------------------

(fault_Ynet,
 post_fault_Ynet) =
    NamedTupleTools.select(
    cleared_selected_lines_faults_net_para,
        (:pre_clear_fault_Ynet,
         :post_clear_fault_Ynet,))

#----------------------------------------

post_fault_paras =
    getproperty(
        getproperty(
            ntuple_status_steady_state_data,
            :post_fault_state),
        :dynamic_status_paras)

#----------------------------------------
# DAE system dyamanics simulation
#----------------------------------------

cb_on_fault = DiscreteCallback(
    (u, t, integrator) ->
        on_fault_condition(
            u, t, integrator,
            on_fault_time),

    on_fault_Ynet_affect!; 
    save_positions=(true,true),
    initializealg =
        ShampineCollocationInit() )

cb_clear_fault = DiscreteCallback(
    (u, t, integrator) ->
        clear_fault_condition(
            u, t, integrator,
            clear_fault_time),

   clear_fault_Ynet_affect!;
    save_positions=(true,true),
    initializealg =
        ShampineCollocationInit())

#--------------------------------------

cb_faults =
    CallbackSet(
        cb_on_fault,
        cb_clear_fault )

#----------------------------------------

model_dynamics_para =
    (;ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
     Ynet,
     fault_Ynet,
     post_fault_Ynet,
     system_fault_status )          

model_dynamics_kwd_para =
    generic_system_dynamics_wt_fault_kwd_para

system_dynamics_fun! =
    Ynet_generic_dynamics_wt_pre_fault_post_by_dae_pf_funcs!

#----------------------------------------

model_bool_dae_vars =
    model_bool_dae_vars_wt_fault

model_syms =
    model_syms_wt_fault

u0_model_states_init =
    u0_model_states_init_wt_fault

#----------------------------------------

du0_model_states_init =
    zeros(length(u0_model_states_init))

res = similar(u0_model_states_init)

#----------------------------------------

faults_and_clear_times =
    [on_fault_time,
     clear_fault_time]

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        DAEProblem(
    DAEFunction(
    (res, dx, x, p, t) ->
        system_dynamics_fun!(
            res, dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms),
    du0_model_states_init,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para,
    differential_vars =
        model_bool_dae_vars,
            callback = cb_states),
        dae_alg,
        callback = cb_faults,
        tstops = faults_and_clear_times,
        abstol = abstol,
        reltol = reltol )

result = (;system_sol,
        model_syms,
        gens_nodes_names,
        SM_gens_nodes_names,
        non_gens_nodes_names,
        sim_timespan)


#----------------------------------------
#----------------------------------------

# Works

result_guick_sol =
    sim_sudden_load_change(
        ;case_name,
        script_dir,
        json_net_data_by_components_file,        
        sim_type,
        timespan=20,

        target_bus_name="bus5",

        pertubation_factor,
        restoration_factor,
        
        pertubation_time,
        restoration_time,
        
        Δt1,
        Δt2,

        fractional_digits=6,
        
        dt = 0.001,
        use_saveat = true,
        ts=0.001,

        ode_alg = RadauIIA5() )


pre_fault_state_model_by_mass_matrix_ode_by_model_dynamics = 
    sim_model_by_mass_matrix_ode_by_funcs_dynamics!(
       # system_state = :pre_fault_state
       :pre_fault_state ;
       with_faults = false,
       net_data_by_components_file =
           net_data_by_components_file,
       components_libs_dir =
           components_libs_dir,        

       timespan         = 20,    
       on_fault_time    = 5.0,
       clear_fault_time = 7.0,

       list_fault_point_from_node_a = [0.3],
       list_fault_resistance = [0.001],
       list_no_line_circuit =  [1],

       list_edges_to_have_fault = [ 8 ],
       clear_fault_selection_list = [1],

       basekV = 1.0,    
       use_pu_in_PQ = true,
       line_data_in_pu = true,

       use_init_u0 = false,
       use_nlsolve = false,

       # # solvers and settings
       pf_alg        = pf_alg,    
       ode_alg       = ode_alg,
       dae_alg       = dae_alg,
       abstol        = abstol,
       reltol        = reltol,

       # # Simulation timespan
       dt            = dt ,
       Δt            =  Δt )


#---------------------------------------------------
# sudden load change
#---------------------------------------------------
#---------------------------------------------------

sim_results_sudden_load_change =
    sim_mm_sudden_load_change(
        1.10,  # pertubation_factor
        1.0,   # restoration_factor
        10.0,  # pertubation_time,
        10.5;  # restoration_time
    
        Δt1 = 1.5,
        Δt2 = 1.5,
        
        net_data_by_components_file,

        # target_bus_name = "bus5",
        target_bus_name = "bus5",
        # pertubation_factor = 1.10,
        # restoration_factor = 1.0,

        sim_type,

        components_libs_dir )


rtds_plot_sudden_load_change =
    get_guick_single_vars_plots_dae_or_ode_sol(
        ;NamedTupleTools.select(
            sim_results_sudden_load_change,
            (:system_sol,
             :model_syms,
             :gens_nodes_names,
             :SM_gens_nodes_names,
             :non_gens_nodes_names,
             :sim_timespan ) )... )

rtds_plot_sudden_target_parameter_plot =
    getproperty(
        sim_results_sudden_load_change,
        :target_parameter_plot)


δ_a_plot =
    getproperty(
        rtds_plot_sudden_load_change,
        :δ_a_plot)


ω_a_plot =
    getproperty(
        rtds_plot_sudden_load_change,
        :ω_a_plot)


vf_tilade_a_plot =
    getproperty(
        rtds_plot_sudden_load_change,
        :vf_tilade_a_plot)

xg2_a_plot =
    getproperty(
        rtds_plot_sudden_load_change,
        :xg2_a_plot)

plot_gens_vh =
    getproperty(
        rtds_plot_sudden_load_change,
        :plot_gens_vh)

plot_gens_θh =
    getproperty(
        rtds_plot_sudden_load_change,
        :plot_gens_θh)

plot_non_gens_vh =
    getproperty(
        rtds_plot_sudden_load_change,
        :plot_non_gens_vh)

plot_non_gens_θh =
    getproperty(
        rtds_plot_sudden_load_change,
        :plot_non_gens_θh)



"""
sim_model_by_mass_matrix_ode_by_funcs_dynamics!
sim_model_by_mass_matrix_by_ode_pf_funcs!

not working
sim_model_by_mass_matrix_ode_by_model_dynamics!

"""
rtds_plot_sim_model_mass_matrix_ode =
    get_guick_single_vars_plots_dae_or_ode_sol(
        ;sim_model_by_mass_matrix_ode_by_funcs_dynamics!(
            :pre_fault_state ;
            with_faults = false,
            
            net_data_by_components_file,
            components_libs_dir,
            
            timespan=100,
            on_fault_time,
            clear_fault_time,

            list_fault_point_from_node_a,
            list_fault_resistance,
            list_no_line_circuit,

            list_edges_to_have_fault,
            clear_fault_selection_list,


            ode_alg = Rodas4()
        )...)

mm_δ_a_plot =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :δ_a_plot)


mm_ω_a_plot =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :ω_a_plot)

mm_vf_tilade_a_plot =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :vf_tilade_a_plot)

mm_xg2_a_plot =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :xg2_a_plot)

mm_plot_gens_vh =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :plot_gens_vh)

mm_plot_gens_θh =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :plot_gens_θh)

mm_plot_non_gens_vh =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :plot_non_gens_vh)

mm_plot_non_gens_θh =
    getproperty(
        rtds_plot_sim_model_mass_matrix_ode,
        :plot_non_gens_θh)

#---------------------------------------------------
#---------------------------------------------------

# sim_model_by_dae_pf_funcs!

# sim_model_by_dae_funcs_dynamics!

# sim_model_by_dae_model_dynamics!

rtds_plot_sim_model_dae =
    get_guick_single_vars_plots_dae_or_ode_sol(
        ;sim_model_by_dae_funcs_dynamics!(
            :pre_fault_state ;
            with_faults = false,
            
            net_data_by_components_file,
            components_libs_dir,

            timespan=10,
            on_fault_time,
            clear_fault_time,

            list_fault_point_from_node_a,
            list_fault_resistance,
            list_no_line_circuit,

            list_edges_to_have_fault,
            clear_fault_selection_list )...)

δ_a_plot =
    getproperty(
        rtds_plot_sim_model_dae,
        :δ_a_plot)


ω_a_plot =
    getproperty(
        rtds_plot_sim_model_dae,
        :ω_a_plot)


vf_tilade_a_plot =
    getproperty(
        rtds_plot_sim_model_dae,
        :vf_tilade_a_plot)

xg2_a_plot =
    getproperty(
        rtds_plot_sim_model_dae,
        :xg2_a_plot)

plot_gens_vh =
    getproperty(
        rtds_plot_sim_model_dae,
        :plot_gens_vh)

plot_gens_θh =
    getproperty(
        rtds_plot_sim_model_dae,
        :plot_gens_θh)

plot_non_gens_vh =
    getproperty(
        rtds_plot_sim_model_dae,
        :plot_non_gens_vh)

plot_non_gens_θh =
    getproperty(
        rtds_plot_sim_model_dae,
        :plot_non_gens_θh)


#---------------------------------------------------
# line outage pertubation
#---------------------------------------------------


rtds_plot_sim_line_outage_pertubation =
    get_guick_single_vars_plots_dae_or_ode_sol(
        ;NamedTupleTools.select(
            sim_line_outage_pertubation_by_mm_ode(
                :line_outage_wt_pref_adjs, # outage_type

                on_fault_time,
                clear_fault_time,

                line_outage_time,
                generation_adjustment_time;

                net_data_by_components_file,

                timespan = 50,

                components_libs_dir,

                list_fault_point_from_node_a = [0.3],
                list_fault_resistance = [0.001],
                list_no_line_circuit  = [1],

                list_edges_to_have_fault  = [ 8 ],
                clear_fault_selection_list = [1] ),

            (:system_sol,
            :model_syms,
            :gens_nodes_names,
            :SM_gens_nodes_names,
            :non_gens_nodes_names,:sim_timespan))...)


δ_a_plot =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :δ_a_plot)


ω_a_plot =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :ω_a_plot)


vf_tilade_a_plot =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :vf_tilade_a_plot)

xg2_a_plot =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :xg2_a_plot)

plot_gens_vh =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :plot_gens_vh)

plot_gens_θh =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :plot_gens_θh)

plot_non_gens_vh =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :plot_non_gens_vh)

plot_non_gens_θh =
    getproperty(
        rtds_plot_sim_line_outage_pertubation,
        :plot_non_gens_θh)


#---------------------------------------------------
## ntuple_status_steady_state_data
#---------------------------------------------------

ntuple_status_steady_state_data =
    get_ntuple_status_steady_state_data(
        ;with_faults =
            with_faults,
        net_data_by_components_file =
            net_data_by_components_file,
        components_libs_dir =
            components_libs_dir,
    
        timespan =
            timespan,
        on_fault_time =
            on_fault_time,
        clear_fault_time =
            clear_fault_time,
    
        list_fault_point_from_node_a =
            list_fault_point_from_node_a,
        list_fault_resistance =
            list_fault_resistance,
        list_no_line_circuit =
            list_no_line_circuit,

        list_edges_to_have_fault =
            list_edges_to_have_fault,
        clear_fault_selection_list =
            clear_fault_selection_list,
    
        basekV =
            basekV,    
        use_pu_in_PQ =
            use_pu_in_PQ,
        line_data_in_pu =
            line_data_in_pu,
        list_network_status = 
            [:pre_fault_state,
             :post_fault_state] )


(;sta_pf_red_sol,
 dyn_pf_fun_kwd_net_idxs) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),
        (:sta_pf_red_sol,
         :dyn_pf_fun_kwd_net_idxs))

#---------------------------------------------------

# propertynames(sta_pf_red_sol)

# (:gens_current_injection, :gens_loc_load_current, :gens_nodes_network_current, :non_gens_nodes_network_current, :nodes_network_current, :S_gens, :pf_P_gens, :pf_Q_gens, :gens_S, :pf_P_g_gens, :pf_Q_g_gens, :Igen, :Inet, :Iinj, :pu_Igen, :Sbus_n, :GenSinj, :If, :It, :Ibranches, :vh, :θh, :θh_deg, :Vbus, :gens_E, :gens_mag_E, :gens_ang_E, :gens_vh, :gens_θh, :gens_nodes_idx)


# propertynames(dyn_pf_fun_kwd_net_idxs)

# (:slack_gens_nodes_idx, :non_slack_gens_nodes_idx, :gens_nodes_idx, :non_gens_nodes_idx, :gens_nodes_with_loc_loads_idx, :all_nodes_idx)

#---------------------------------------------------

(;pf_P_gens,
  pf_Q_gens,
  vh,
  θh,
  θh_deg) =
    NamedTupleTools.select(
        sta_pf_red_sol,
        (:pf_P_gens,
         :pf_Q_gens,
         :vh,
         :θh,
         :θh_deg))

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_nodes_with_loc_loads_idx,) =
    NamedTupleTools.select(
        dyn_pf_fun_kwd_net_idxs,
        (:gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_nodes_with_loc_loads_idx))

#---------------------------------------------------

gens_vh =
    round.( vh[gens_nodes_idx]; digits=4)


gens_θh =
    round.( θh[gens_nodes_idx]; digits=4)


gens_θh_deg =
    round.( θh_deg[gens_nodes_idx]; digits=4)

#---------------------------------------------------

non_gens_vh =
    round.( vh[non_gens_nodes_idx]; digits=4)

non_gens_θh =
    round.( θh[non_gens_nodes_idx]; digits=4)

non_gens_θh_deg =
    round.( θh_deg[non_gens_nodes_idx]; digits=4)

#---------------------------------------------------

t_pf_P_gens = round.( pf_P_gens; digits=4)

t_pf_Q_gens = round.( pf_Q_gens; digits=4)

#---------------------------------------------------

# Gens

pf_gens_results =
    hcat(gens_vh,
         gens_θh_deg,
         t_pf_P_gens,
         t_pf_Q_gens)

# IEEE 9

# 3×4 Matrix{Float64}:

#  vh     θh      P_gens   Q_gens

#  1.04   0.0     0.7164   0.2705
#  1.025  9.28    1.63     0.0665
#  1.025  4.6648  0.85    -0.1086


# IEEE 14

# 5×4 Matrix{Float64}:

#  vh       θh       P_gens   Q_gens

#  1.06     0.0      2.3239  -0.1655
#  1.045   -4.9826   0.4      0.4356
#  1.01   -12.7251   0.0      0.2508
#  1.07   -14.2209  -0.0      0.1273
#  1.09   -13.3596  -0.0      0.1762

#---------------------------------------------------

# Non gens

pf_non_gens_results =
    hcat(non_gens_vh,
         non_gens_θh_deg )

# IEEE 9

# 6×2 Matrix{Float64}:

#   vh     θh_deg

#  1.0258  -2.2168
#  1.0127  -3.6874
#  1.0324   1.9667
#  1.0159   0.7275
#  1.0258   3.7197
#  0.9956  -3.9888

# IEEE 14

# 9×2 Matrix{Float64}:

#   vh     θh_deg

#  1.0177  -10.3129
#  1.0195   -8.7739
#  1.0615  -13.3596
#  1.0559  -14.9385
#  1.051   -15.0973
#  1.0569  -14.7906
#  1.0552  -15.0756
#  1.0504  -15.1563
#  1.0355  -16.0336


#---------------------------------------------------
#---------------------------------------------------
# Static modeling and simulations
#---------------------------------------------------
#---------------------------------------------------

pf_alg = NewtonRaphson()

abstol = 1e-12

reltol  = 1e-12

#-------------------------------


static_net_data_by_components_file =
    "opf-pf-net-default-static-data.json"


json_net_data_by_components_file =
    static_net_data_by_components_file

if  (json_net_data_by_components_file == "" ||
    json_net_data_by_components_file == nothing) 

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            "opf-pf-net-default-static-data.json")
else

    net_data_by_components_file =
        joinpath(
            json_case_dir,
            json_net_data_by_components_file)
end

#---------------------------------------------------


sim_type  = "sim-static-sim-validation"


results_dir =
    joinpath(
        script_dir,
        "results",
        sim_type)

if !(isdir(results_dir))
    
    mkpath(results_dir)
    
end

figure_dir =
    joinpath(
        script_dir,
        "figure",
        sim_type)

if !(isdir(figure_dir))
    
    mkpath(figure_dir)
    
end

tex_filename =
    joinpath(results_dir,
             "$(case_name)-" *
                 "$(sim_type)-" *
                 "sim-results.tex")

sd_dynamics_sim_csv_filename =
    joinpath(
        results_dir,
        "$(case_name)-" *
            "$(sim_type)-" *
            "sim-results.csv")

#---------------------------------------------------

# get_net_data_by_components_from_json_file

# get_net_generic_parameters

# get_net_generic_parameters_and_idx

system_net_static_data =
    get_system_net_static_data(
        case_name ;
        script_dir="",
        data_dir = "",
        json_net_data_by_components_file =
            static_net_data_by_components_file,
        components_libs_dir = "",
        basekV              = 1.0,    
        use_pu_in_PQ        = true,
        line_data_in_pu     = true,
        pf_alg              =
            NewtonRaphson(),
        no_lines_fault = 1)


#-------------------------------

(;plant_generators_data_from_json,
 plant_loads_data_from_json,
 plant_transmission_data_from_json,
 edge_data_from_json,
 shunt_data_from_json,
 baseMVA,
 all_nodes_idx,
 n2s_all_nodes_idx) =
     NamedTupleTools.select(
         system_net_static_data,
         (:plant_generators_data_from_json,
          :plant_loads_data_from_json,
          :plant_transmission_data_from_json,
          :edge_data_from_json,
          :shunt_data_from_json,
          :baseMVA,
          :all_nodes_idx,
          :n2s_all_nodes_idx )  )

#------------------------------- 
#-------------------------------


sh_Ynet_wt_nodes_idx_wt_adjacent_nodes =
    get_Ynet_sp_sh(
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA = baseMVA,
        basekV = 1.0,
        baseShunt = baseMVA,
        line_data_in_pu = true)


Ynet_wt_nodes_idx_wt_adjacent_nodes =
    get_Ynet(
        edge_data_from_json,
        shunt_data_from_json;
        baseMVA = baseMVA,
        basekV = 1.0,
        baseShunt = baseMVA,
        line_data_in_pu = true)


Ybus = getproperty(get_Ybus(
    edge_data_from_json,
    shunt_data_from_json;
    basekV = 1.0,
    baseMVA = baseMVA,
    line_data_in_pu = true ), :Ybus)


#-------------------------------

(sta_red_vh_θh_0,
 pf_PQ_param,
 pf_kw_para) =
     NamedTupleTools.select(
         system_net_static_data,
         (:sta_red_vh_θh_0,
          :pf_PQ_param,
          :pf_kw_para))

generic_red_sol_kwd_para =
    getproperty(system_net_static_data,
                :generic_red_sol_kwd_para)

pf_kw_net_para =
    getproperty(
        getproperty(
            generic_red_sol_kwd_para,
            :pf_kw_para),
        :pf_kw_net_para)


#-------------------------------
# Ordinary Power flow Ynet
#-------------------------------

Ynet_pf_fun_mismatch =
    # get_ΔI_mismatch_by_Ynet
    get_ΔPQ_mismatch_by_Ynet


 Ynet_pf_sol =  NonlinearSolve.solve(
    NonlinearProblem(
        NonlinearFunction( ( g, x, p ) ->
            Ynet_pf_fun_mismatch(
                g, x, p;
                pf_kw_para =
                    disaggregate_sta_pf_keywords_parameter(
                        pf_kw_para ),
                Ynet_wt_nodes_idx_wt_adjacent_nodes =
                    Ynet_wt_nodes_idx_wt_adjacent_nodes ) ),
        sta_red_vh_θh_0,
        pf_PQ_param ),
    pf_alg ;
    abstol =
        abstol,
    reltol =
        reltol )


(;pf_P_gens, pf_Q_gens,
 pf_P_g_gens, pf_Q_g_gens,
 vh, θh, θh_deg
 # gens_nodes_idx,
 # transformed_slack_gens_nodes_idx,
 # transformed_gens_nodes_idx,
 # transformed_non_gens_nodes_idx,
 # transformed_all_nodes_idx
  ) = NamedTupleTools.select(
         get_results_static_pf_red_sol_u(
             Ynet_pf_sol;
             generic_red_sol_kwd_para =
                 generic_red_sol_kwd_para,
             baseMVA = baseMVA,
             basekV = 1.0) ,
             (:pf_P_gens, :pf_Q_gens,             
              :pf_P_g_gens, :pf_Q_g_gens,
             
              :vh, :θh, :θh_deg
              
             # :gens_nodes_idx,
             # :transformed_slack_gens_nodes_idx,
             # :transformed_gens_nodes_idx,
             # :transformed_non_gens_nodes_idx,
             # :transformed_all_nodes_idx
              ) )

#-------------------------------
# Distributed Power flow Ynet
#-------------------------------

get_model_distributed_slack_pf_ΔPQ_mismatch!

get_red_model_distributed_slack_pf_ΔPQ_mismatch!


#-------------------------------
# Optimal Power flow Ynet
#-------------------------------

get_opf_net_optimisation_parameters
get_opf_wt_generic_system_simulation_parameters

opf
opf_by_relaxation

get_economic_dispatch_by_scenario
get_unit_commitment_by_scenario
get_renewable_energy_net_optimisation_parameters

#-------------------------------
# Power flow Ybus
#-------------------------------

Ybus_pf_fun_mismatch =
    get_ΔPQ_mismatch_by_Ybus
    # get_ΔPQ_mismatch_by_sparse_Ybus
    # get_ΔI_mismatch_by_Ybus


 Ybus_pf_sol =  NonlinearSolve.solve(
    NonlinearProblem(
        NonlinearFunction( ( g, x, p ) ->
            Ybus_pf_fun_mismatch(
                g, x, p;
                pf_kw_para =
                    disaggregate_sta_pf_keywords_parameter(
                        pf_kw_para),
                Ybus = Ybus,
            use_autodiff = true ) ),
        sta_red_vh_θh_0,
        pf_PQ_param ),
    pf_alg ;
    abstol =
        abstol,
    reltol =
        reltol )


#-------------------------------
# Ynet  NonlinearSolve with Jac
#-------------------------------

red_ΔPQ_x = similar(sta_red_vh_θh_0)


Jac_row_size =
    Jac_col_size = length( sta_red_vh_θh_0 )


Jac_vh_θh =
    spzeros( Jac_row_size, Jac_col_size )


Ynet_pf_fun_mismatch =
    get_generic_sta_pf_ΔPQ_mismatch
    # get_a_model_integrated_pf_sta_ΔPQ_mismatch


 jac_Ynet_pf_sol =  NonlinearSolve.solve(
    NonlinearProblem(
        NonlinearFunction( ( g, x, p ) ->
            Ynet_pf_fun_mismatch(
                g, x, p;
                pf_kw_para =
                    pf_kw_para),
                           jac = (Jac_vh_θh, x, p) ->
                               sta_pf_Jac!_df_dx_by_Ynet_or_Yπ_net!(
                                   Jac_vh_θh, x, p;
                                   pf_kw_para =
                                       pf_kw_para,
                                   func =
                                       Ynet_pf_fun_mismatch,
                                   net_addmitance_tuple =
                                       Ynet_wt_nodes_idx_wt_adjacent_nodes,
                                   by_Ynet_or_Yπ_net =
                                       :Ynet ) ),
        sta_red_vh_θh_0,
        pf_PQ_param ),
    NewtonRaphson() ;
    abstol =
        abstol,
    reltol =
        reltol )

#-------------------------------

Ynet_pf_fun_mismatch =
    # get_ΔI_mismatch_by_Ynet
    get_ΔPQ_mismatch_by_Ynet


 jac_Ynet_pf_sol =  NonlinearSolve.solve(
    NonlinearProblem(
        NonlinearFunction( ( g, x, p ) ->
            Ynet_pf_fun_mismatch(
                g, x, p;
                pf_kw_para =  disaggregate_sta_pf_keywords_parameter(
                                           pf_kw_para),
                Ynet_wt_nodes_idx_wt_adjacent_nodes =
                    Ynet_wt_nodes_idx_wt_adjacent_nodes),
                           jac = (Jac_vh_θh, x, p) ->
                               sta_pf_Jac!_df_dx_by_Ynet_or_Yπ_net!(
                                   Jac_vh_θh, x, p;
                                   pf_kw_para = pf_kw_para,
                                   func =
                                       Ynet_pf_fun_mismatch,
                                   net_addmitance_tuple =
                                       Ynet_wt_nodes_idx_wt_adjacent_nodes,
                                   by_Ynet_or_Yπ_net =
                                       :Ynet ) ),
        sta_red_vh_θh_0,
        pf_PQ_param ),
    NewtonRaphson() ;
    abstol =
        abstol,
    reltol =
        reltol )

#-------------------------------
# Ybus  NonlinearSolve with Jac
#-------------------------------


red_ΔPQ_x = similar(sta_red_vh_θh_0)


Jac_row_size =
    Jac_col_size = length( sta_red_vh_θh_0 )


Jac_vh_θh =
    spzeros( Jac_row_size, Jac_col_size )


Ybus_pf_fun_mismatch =
    get_ΔPQ_mismatch_by_sparse_Ybus
    # get_ΔPQ_mismatch_by_Ybus
    # get_ΔI_mismatch_by_Ybus


jac_nonlinearsolve_pf_sol = NonlinearSolve.solve(
    NonlinearProblem(
        NonlinearFunction(
            ( g, x, p ) ->
                Ybus_pf_fun_mismatch(
                g, x, p;
                pf_kw_para =
                    disaggregate_sta_pf_keywords_parameter(
                        pf_kw_para),
                    Ybus = Ybus,
                    use_autodiff =
                        false ),
        jac = (Jac_vh_θh, x, p) -> sta_pf_Jac!(
            Jac_vh_θh, x, p;
            Ybus =
                Ybus,
            pf_kw_para =
                disaggregate_sta_pf_keywords_parameter(
                    pf_kw_para ) )  ) ,
        sta_red_vh_θh_0,
        pf_PQ_param),
    NewtonRaphson();
        abstol = 1e-10,
    reltol = 1e-10)


#---------------------------------------------------

# propertynames(sta_pf_red_sol)

# (:gens_current_injection, :gens_loc_load_current, :gens_nodes_network_current, :non_gens_nodes_network_current, :nodes_network_current, :S_gens, :pf_P_gens, :pf_Q_gens, :gens_S, :pf_P_g_gens, :pf_Q_g_gens, :Igen, :Inet, :Iinj, :pu_Igen, :Sbus_n, :GenSinj, :If, :It, :Ibranches, :vh, :θh, :θh_deg, :Vbus, :gens_E, :gens_mag_E, :gens_ang_E, :gens_vh, :gens_θh, :gens_nodes_idx)


# propertynames(dyn_pf_fun_kwd_net_idxs)

# (:slack_gens_nodes_idx, :non_slack_gens_nodes_idx, :gens_nodes_idx, :non_gens_nodes_idx, :gens_nodes_with_loc_loads_idx, :all_nodes_idx)

#---------------------------------------------------

(;pf_P_gens,
  pf_Q_gens,
  vh,
  θh,
  θh_deg) =
    NamedTupleTools.select(
        sta_pf_red_sol,
        (:pf_P_gens,
         :pf_Q_gens,
         :vh,
         :θh,
         :θh_deg))

(gens_nodes_idx,
 non_gens_nodes_idx,
 gens_nodes_with_loc_loads_idx,) =
    NamedTupleTools.select(
        dyn_pf_fun_kwd_net_idxs,
        (:gens_nodes_idx,
         :non_gens_nodes_idx,
         :gens_nodes_with_loc_loads_idx))

#---------------------------------------------------

gens_vh =
    round.( vh[gens_nodes_idx]; digits=4)


gens_θh =
    round.( θh[gens_nodes_idx]; digits=4)


gens_θh_deg =
    round.( θh_deg[gens_nodes_idx]; digits=4)

#---------------------------------------------------

non_gens_vh =
    round.( vh[non_gens_nodes_idx]; digits=4)

non_gens_θh =
    round.( θh[non_gens_nodes_idx]; digits=4)

non_gens_θh_deg =
    round.( θh_deg[non_gens_nodes_idx]; digits=4)

#---------------------------------------------------

t_pf_P_gens = round.( pf_P_gens; digits=4)

t_pf_Q_gens = round.( pf_Q_gens; digits=4)

#---------------------------------------------------

# Gens

pf_gens_results =
    hcat(gens_vh,
         gens_θh_deg,
         t_pf_P_gens,
         t_pf_Q_gens)

# IEEE 9

# 3×4 Matrix{Float64}:

#  1.04   0.0     0.7164   0.2705
#  1.025  9.28    1.63     0.0665
#  1.025  4.6648  0.85    -0.1086

#---------------------------------------------------

# Non gens

pf_non_gens_results =
    hcat(non_gens_vh,
         non_gens_θh_deg )

# IEEE 9

# 6×2 Matrix{Float64}:

#  1.0258  -2.2168
#  1.0127  -3.6874
#  1.0324   1.9667
#  1.0159   0.7275
#  1.0258   3.7197
#  0.9956  -3.9888

#---------------------------------------------------
# save julia object to latex file
#---------------------------------------------------

pf_tuple_julia_object =
    (;pf_gens_results,
      pf_non_gens_results)

pf_names_julia_object =
    propertynames(pf_tuple_julia_object)

open(tex_filename, "a") do file_handle
    
    for (name_object, a_julia_object) in
        zip(pf_names_julia_object,
            pf_tuple_julia_object)
        
        write(file_handle,"\n $(String(name_object)) = ")
        
        write( file_handle, latexify(
            a_julia_object;
            fmt=FancyNumberFormatter()))
    end
    
end


#---------------------------------------------------
#---------------------------------------------------


(s_pf_P_gens,
 s_pf_Q_gens,
 s_vh,
 s_θh,
 s_gens_vh,
 s_gens_θh,
 s_gens_id,
 s_gens_iq,
 
 s_gens_mag_E,
 s_gens_ang_E,
 s_post_sta_PQ,
 s_Yred,
 s_Yint,

 s_ω_ref, s_v_ref, s_p_order,
 s_gens_i_d, s_gens_i_q,
 
 s_flat_vh_flat_θh_id_iq_u0,
 s_flat_vh_flat_θh_id_iq_vfh_θfh,
 s_gens_δ,
 s_gens_ed_dash,
 s_gens_eq_dash) =
     NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),
        (:pf_P_gens,
         :pf_Q_gens,
         :vh,
         :θh,
         :gens_vh,
         :gens_θh,
         :gens_id,
         :gens_iq,
         
         :gens_mag_E,
         :gens_ang_E,
         :post_sta_PQ,
         :Yred,
         :Yint,
         
         :ω_ref, :v_ref, :p_order,
         :gens_i_d, :gens_i_q,
         
         :flat_vh_flat_θh_id_iq_u0,
         :flat_vh_flat_θh_id_iq_vfh_θfh,
         :gens_δ,
         :gens_ed_dash,
         :gens_eq_dash ) )


(f_dyn_pf_P_gens,
 f_dyn_pf_Q_gens,
 f_dyn_vh,
 f_dyn_θh,
 f_dyn_gens_vh,
 f_dyn_gens_θh,
 f_dyn_gens_id,
 f_dyn_gens_iq,
 f_dyn_gens_mag_E,
 f_dyn_gens_ang_E,
 f_post_dyn_PQ,
 f_dyn_Yred,
 f_dyn_Yint,
 f_flat_vh_flat_θh_id_iq_vfh_θfh,
 f_dyn_gens_δ,
 f_dyn_gens_ed_dash,
 f_dyn_gens_eq_dash) =
     NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :fault_state),
            :dynamic_status_paras),
        (:dyn_pf_P_gens,
         :dyn_pf_Q_gens,
         :dyn_vh,
         :dyn_θh,
         :dyn_gens_vh,
         :dyn_gens_θh,
         :dyn_gens_id,
         :dyn_gens_iq,
         :dyn_gens_mag_E,
         :dyn_gens_ang_E,
         :post_dyn_PQ,
         :dyn_Yred, :dyn_Yint,
         :flat_vh_flat_θh_id_iq_vfh_θfh,
         :dyn_gens_δ,
         :dyn_gens_ed_dash,
         :dyn_gens_eq_dash ) )

#----------------------------------------

(p_dyn_pf_P_gens,
 p_dyn_pf_Q_gens,
 p_dyn_vh,
 p_dyn_θh,
 p_dyn_gens_vh,
 p_dyn_gens_θh,
 p_dyn_gens_id,
 p_dyn_gens_iq,
 p_dyn_gens_mag_E,
 p_dyn_gens_ang_E,
 p_post_dyn_PQ,
 p_dyn_Yred,
 p_dyn_Yint,
 p_flat_vh_flat_θh_id_iq_vfh_θfh,
 p_dyn_gens_δ,
 p_dyn_gens_ed_dash,
 p_dyn_gens_eq_dash) =
     NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :post_fault_state),
            :dynamic_status_paras),
        (:dyn_pf_P_gens,
         :dyn_pf_Q_gens,
         :dyn_vh,
         :dyn_θh,
         :dyn_gens_vh,
         :dyn_gens_θh,
         :dyn_gens_id,
         :dyn_gens_iq,
         :dyn_gens_mag_E,
         :dyn_gens_ang_E,
         :post_dyn_PQ,
         :dyn_Yred, :dyn_Yint,
         :flat_vh_flat_θh_id_iq_vfh_θfh,
         :dyn_gens_δ,
         :dyn_gens_ed_dash,
         :dyn_gens_eq_dash) )

#----------------------------------------
# Dynamics
#----------------------------------------
"""

Se(efd) = Ax * exp( Bx * efd)

S_e_max = Ax * exp(Bx * efd_max )

S_e_075 = Ax * exp(Bx * 3/4 * efd_max )

(S_e_max/S_e_075) = exp(Bx * efd_max * 1/4)

Bx = (4/efd_max) * log(S_e_max/S_e_075)

Ax = S_e_max/exp(Bx * efd_max )


ex1 = 3.3

ex2 = 4.5

S_ex1 = 0.6602

S_ex2 = 4.2662

tBx = (4/ex2) * log(S_ex2/S_ex1)

# 1.65860

tAx = S_ex2/exp(tBx * ex2 )

# 0.00244

"""

#----------------------------------------
#----------------------------------------

# static_prefault_paras =
#     getproperty(
#         getproperty(
#             ntuple_status_steady_state_data,
#             :pre_fault_state),
#             :static_prefault_paras)

fault_paras =
    getproperty(
        getproperty(
            ntuple_status_steady_state_data,
            :fault_state),
        :dynamic_status_paras)

post_fault_paras =
    getproperty(
        getproperty(
            ntuple_status_steady_state_data,
            :post_fault_state),
        :dynamic_status_paras)

(;system_fault_status,
 generic_system_dynamics_wt_fault_kwd_para,
 Ynet_wt_nodes_idx_wt_adjacent_nodes,
 on_fault_net_para,
 cleared_selected_lines_faults_net_para,

 model_bool_dae_vars_wt_fault,
 model_syms_wt_fault,         
 u0_model_states_init_wt_fault,

 nodes_names,
 gens_nodes_names,
 non_gens_nodes_names,
 SM_gens_nodes_names,
 SC_gens_nodes_names) =
    NamedTupleTools.select(
        getproperty(
            getproperty(
                ntuple_status_steady_state_data,
                :pre_fault_state),
            :static_prefault_paras),        
        (:system_fault_status,
         :generic_system_dynamics_wt_fault_kwd_para,
         :Ynet_wt_nodes_idx_wt_adjacent_nodes,
         :on_fault_net_para,
         :cleared_selected_lines_faults_net_para,

         :model_bool_dae_vars_wt_fault,
         :model_syms_wt_fault,         
         :u0_model_states_init_wt_fault,

         :nodes_names,
         :gens_nodes_names,
         :non_gens_nodes_names,
         :SM_gens_nodes_names,
         :SC_gens_nodes_names))

#----------------------------------------

(Ynet, ) =
     NamedTupleTools.select(
    Ynet_wt_nodes_idx_wt_adjacent_nodes,
         (:Ynet, ) )

#----------------------------------------

(faulty_Ynet,
 faulty_nodes_idx_with_adjacent_nodes_idx) =
    NamedTupleTools.select(
    on_fault_net_para,
        (:faulty_Ynet,
         :faulty_nodes_idx_with_adjacent_nodes_idx))

(fault_Ynet,
 post_fault_Ynet) =
    NamedTupleTools.select(
    cleared_selected_lines_faults_net_para,
        (:pre_clear_fault_Ynet,
         :post_clear_fault_Ynet,))

mismatch_faulty_fault_Ynet =
    map(x -> round.(x; digits=4),
        [t1_array - t2_array
         for (t1_array, t2_array) in
             zip(faulty_Ynet,
                 fault_Ynet)])

t_Ynet =
    map(x -> round.(x; digits=4),
        Ynet)

t_faulty_Ynet =
    map(x -> round.(x; digits=4),
        faulty_Ynet)

t_post_fault_Ynet =
    map(x -> round.(x; digits=4),
        post_fault_Ynet)

#----------------------------------------
# DAE system dyamanics simulation
#----------------------------------------

cb_on_fault = DiscreteCallback(
    (u, t, integrator) ->
        on_fault_condition(
            u, t, integrator,
            on_fault_time),

    on_fault_Ynet_affect!; 
    save_positions=(true,true),
    initializealg =
        ShampineCollocationInit() )

cb_clear_fault = DiscreteCallback(
    (u, t, integrator) ->
        clear_fault_condition(
            u, t, integrator,
            clear_fault_time),

   clear_fault_Ynet_affect!;
    save_positions=(true,true),
    initializealg =
        ShampineCollocationInit())

#--------------------------------------

cb_faults = CallbackSet(
    cb_on_fault,
    cb_clear_fault)

#----------------------------------------

model_dynamics_para =
    (;ω_ref_v_ref_p_order_Png_Qng_Pll_Qll,
     Ynet,
     fault_Ynet,
     post_fault_Ynet,
     system_fault_status )          

model_dynamics_kwd_para =
    generic_system_dynamics_wt_fault_kwd_para

system_dynamics_fun! =
    Ynet_generic_dynamics_wt_pre_fault_post_by_dae_pf_funcs!

#----------------------------------------

model_bool_dae_vars =
    model_bool_dae_vars_wt_fault

model_syms =
    model_syms_wt_fault

u0_model_states_init =
    u0_model_states_init_wt_fault

#----------------------------------------

du0_model_states_init =
    zeros(length(u0_model_states_init))

res = similar(u0_model_states_init)

#----------------------------------------

faults_and_clear_times =
    [on_fault_time,
     clear_fault_time]

#----------------------------------------

system_sol =
    DifferentialEquations.solve(
        DAEProblem(
    DAEFunction(
    (res, dx, x, p, t) ->
        system_dynamics_fun!(
            res, dx, x,
            model_dynamics_para,
            t;
            kwd_para =
                model_dynamics_kwd_para);
    syms =
        model_syms),
    du0_model_states_init,
    u0_model_states_init,
    sim_timespan,
    model_dynamics_para,
    differential_vars =
        model_bool_dae_vars ),
        dae_alg,
        callback = cb_faults,
        tstops = faults_and_clear_times,
        abstol = abstol,
        reltol = reltol )



#---------------------------------------------------
# case model 
#---------------------------------------------------

# fault_status =
#     (no_fault = 0,
#      on_fault = 1,
#      clear_fault = 2,
#      partial_clear_fault = 3)

# system_fault_status =
#     [ fault_status.no_fault]

#---------------------------------------------------

# list_network_status = list_system_status =
#     [:pre_fault_state,
#      :fault_state,
#      :post_fault_state]

#     list_network_status = 
#         [:pre_fault_state,
#          :fault_state,
#          :post_fault_state ]


# dict_status_steady_state_data =
#     Dict{Symbol, NamedTuple }()

# for a_system_status in list_network_status

#     dict_status_steady_state_data[a_system_status] =
#         get_a_status_steady_state_data(
#             a_system_status;
#             with_faults = true,
#             # case_name = "case9",
#             net_data_by_components_file =
#                 net_data_by_components_file,
#             components_libs_dir =
#                 components_libs_dir,

#             timespan      = timespan,
#             on_fault_time = on_fault_time,
#             clear_fault_time = clear_fault_time,    

#             list_fault_point_from_node_a =
#                 list_fault_point_from_node_a,
#             list_fault_resistance =
#                 list_fault_resistance,
#             list_no_line_circuit =
#                 list_no_line_circuit,

#             list_edges_to_have_fault =
#                 list_edges_to_have_fault,
#             clear_fault_selection_list =
#                 clear_fault_selection_list,

#             basekV = basekV,    
#             use_pu_in_PQ =
#                 use_pu_in_PQ,
#             line_data_in_pu =
#                 line_data_in_pu)

# end

# status_steady_state_data =
#     NamedTupleTools.namedtuple(
#         dict_status_steady_state_data)



# timespan   = 50


# generic_network_fault_pertubation_plot =
#     get_guick_group_vars_plots_dae_or_ode_sol(
#         ;include_v_θ_plot =
#             false,
#          sim_timespan =
#              (0, timespan),
#          get_generic_network_fault_pertubation(
#              ;case_name = "case9",
#              timespan   = timespan,

#              on_fault_time = 5.0,
#              clear_fault_time = 7.0,

#              list_fault_point_from_node_a = [0.3],
#              list_fault_resistance = [0.001],
#              list_no_line_circuit =  [1],

#              list_edges_to_have_fault = [ 8 ],
#              clear_fault_selection_list = [1],

#              basekV = 1.0,    
#              use_pu_in_PQ = true,
#              line_data_in_pu = true,

#              with_faults =
#                  false,
#              use_state_in_on_clear_fault =
#                  false,
#              return_extended_results =
#                  false,

#              json_net_data_by_components_file =
#                  json_net_data_by_components_file,
#              components_libs_dir =
#                  components_libs_dir,
#              data_dir =
#                  data_dir )...)


# save_network_pertubation_sim_plot(
#     "case9";
#     sim_timespan = (0, timespan),
#     figure_dir,
#     sim_type = "network-pertubation",
#     line_in_fault_name = "line-8",
#     get_generic_network_fault_pertubation_by_cb(
#              ;case_name = "case9",
#              timespan   = timespan,

#              on_fault_time = 5.0,
#              clear_fault_time = 7.0,

#              list_fault_point_from_node_a = [0.3],
#              list_fault_resistance = [0.001],
#              list_no_line_circuit =  [1],

#              list_edges_to_have_fault = [ 8 ],
#              clear_fault_selection_list = [1],

#              basekV = 1.0,    
#              use_pu_in_PQ = true,
#              line_data_in_pu = true,

#              with_faults =
#                  false,
#              use_state_in_on_clear_fault =
#                  false,
#              return_extended_results =
#                  false,

#              json_net_data_by_components_file =
#                  json_net_data_by_components_file,
#              components_libs_dir =
#                  components_libs_dir,
#              data_dir =
#                  data_dir )...)

