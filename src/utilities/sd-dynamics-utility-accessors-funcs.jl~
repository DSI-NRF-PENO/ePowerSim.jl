# (C) 2025 Power, Energy, Networks and Optimisation Research Group, Unisa, authors and contributors (see AUTHORS file)
# Licensed under GNU GPL v3 (see LICENSE file)

# AA Yusuff : yusufaa@unisa.ac.za


####################################################
# Accessors Functions
####################################################

# https://github.com/JuliaAPlavin/AccessorsExtra.jl

# https://discourse.julialang.org/t/recursive-accessor-descend-condition/128232/5

# https://juliaobjects.github.io/ConstructionBase.jl/dev/

# https://github.com/rafaqz/Flatten.jl

# https://github.com/rafaqz/ModelParameters.jl


#---------------------------------------------------
#---------------------------------------------------
# Definition of lenses or optics
#---------------------------------------------------
#---------------------------------------------------

#---------------------------------------------------
#---------------------------------------------------
# Accessors functions
#---------------------------------------------------
#---------------------------------------------------

#---------------------------------------------------
# plants nodes
#---------------------------------------------------


function get_plant_generators_in_net(comp_data)
    
    lens_plant_generators_in_net=
         @optic _.plant_generators

    return getall(comp_data,
                  lens_plant_generators_in_net)[1] 
end



function get_plant_loads_in_net(comp_data)
    
    lens_plant_loads_in_net=
         @optic _.plant_loads

    return getall(comp_data,
                  lens_plant_loads_in_net)[1] 
end


#---------------------------------------------------
# general components
#---------------------------------------------------


function get_comp_idx_in_net(comp_data)
    
    lens_comp_idx_in_net=
         @optic _.idx

    return getall(comp_data,
                  lens_comp_idx_in_net)[1] 
end


function get_comp_plant_type_in_net(comp_data)

    lens_comp_plant_type_in_net=
        @optic _.plant_type

    return getall(comp_data,
                  lens_comp_plant_type_in_net)[1] 
end


#---------------------------------------------------
# Generation nodes
#---------------------------------------------------


function get_gen_plant_isa_slack_in_net(comp_data)

    lens_gen_plant_isa_slack_in_net=
        @optic _.additional_data.isa_slack

    return getall(comp_data,
                  lens_gen_plant_isa_slack_in_net)[1] 
end


function get_gen_plant_p_order_in_net(comp_data)

    lens_gen_plant_p_order_in_net =
        @optic _.additional_data.p_order

    return getall(comp_data,
                  lens_gen_plant_p_order_in_net)[1] 
end

function get_gen_plant_v_ref_in_net(comp_data)

    lens_gen_plant_v_ref_in_net=
        @optic _.additional_data.v_ref

    return getall(comp_data,
                  lens_gen_plant_v_ref_in_net)[1] 
end

function get_gen_plant_ω_ref_in_net(comp_data)

    lens_gen_plant_ω_ref_in_net =
        @optic _.additional_data.ω_ref

    return getall(comp_data,
                  lens_gen_plant_ω_ref_in_net)[1] 
end


function get_gen_dyn_paras_in_net(comp_data)

    lens_gen_dyn_paras_in_net=
        @optic _.components_data.gen

    return getall(comp_data,
                  lens_gen_dyn_paras_in_net)[1] 
end

function get_gen_avr_paras_in_net(comp_data)

    lens_gen_avr_paras_in_net=
        @optic _.components_data.avr

    return getall(comp_data,
                  lens_gen_avr_paras_in_net)[1] 
end


function get_gen_gov_paras_in_net(comp_data)

    lens_gen_gov_paras_in_net=
        @optic _.components_data.gov

    return getall(comp_data,
                  lens_gen_gov_paras_in_net)[1] 
end


function get_gen_type_in_net(comp_data)

    lens_gen_type_in_net=
        @optic _.components_type.gen

    return getall(comp_data,
                  lens_gen_type_in_net)[1] 
end

function get_avr_type_in_net(comp_data)

    lens_avr_type_in_net=
        @optic _.components_type.avr

    return getall(comp_data,
                  lens_avr_type_in_net)[1] 
end

function get_gov_type_in_net(comp_data)

    lens_gov_type_in_net=
        @optic _.components_type.gov

    return getall(comp_data,
                  lens_gov_type_in_net)[1] 
end

#---------------------------------------------------
# load nodes
#---------------------------------------------------


function get_load_type_in_net(comp_data)

   lens_load_type_in_net=
       @optic _.components_type.load

    return getall(comp_data,
                  lens_load_type_in_net)[1] 
end


function get_load_data_in_net(comp_data)

    lens_load_data_in_net=
        @optic _.components_data.load

    return getall(comp_data,
                  lens_load_data_in_net)[1] 
end


function get_load_P_in_net(comp_data)

    lens_load_P_in_net=
        @optic _.components_data.load.P

    return getall(comp_data,
                  lens_load_P_in_net)[1] 
end


function get_load_Q_in_net(comp_data)

    lens_load_Q_in_net=
        @optic _.components_data.load.Q

    return getall(comp_data,
                  lens_load_Q_in_net)[1] 
end



function get_get_load_PQ_tuple_in_net(comp_data)
    # A lens to get power eld 

    lens_load_P_in_net=
        @optic _.components_data.load.P

    lens_load_Q_in_net=
        @optic _.components_data.load.Q
 
    return (getall(comp_data, lens_load_P_in_net)[1],
            getall(comp_data, lens_load_Q_in_net)[1])
end

#---------------------------------------------------
# transmission nodes
#---------------------------------------------------

function get_transmission_type_in_net(comp_data)

    lens_transmission_type_in_net=
        @optic _.components_type.transmission

    return getall(comp_data,
                  lens_transmission_type_in_net)[1] 
end

function get_transmission_data_in_net(comp_data)

    lens_transmission_data_in_net=
        @optic _.components_data.transmission

    return getall(comp_data,
                  lens_transmission_data_in_net)[1] 
end


function get_transmission_P_in_net(comp_data)

    lens_transmission_P_in_net=
        @optic _.components_data.transmission.P

    return getall(comp_data,
                  lens_transmission_P_in_net)[1] 
end


function get_transmission_Q_in_net(comp_data)

    lens_transmission_Q_in_net=
        @optic _.components_data.transmission.Q

    return getall(comp_data,
                  lens_transmission_Q_in_net)[1] 
end

#---------------------------------------------------
# branches 
#---------------------------------------------------


function get_edge_type_in_net(comp_data)

    lens_edge_type_in_net=
        @optic _.components_type.edge_type

    return getall(comp_data,
                  lens_edge_type_in_net)[1] 
end


#---------------------------------------------------
# selection
#---------------------------------------------------

"""
`get_selected_comp_properties_by_lens`

This is an utility function that return a subset of
properties determined by  `selections` as a vector of
namedtuple.

It first assets that the selection is a subset of properties
of `lensed_comp_data`.

`lensed_comp_data` is the result of application of lens_func
to comp_data.

"""
function get_selected_comp_properties_by_lens(
    lens_func,
    comp_data;
    selections = (:nothing,) )

    lensed_comp_data =
        getall(comp_data, lens_func)[1]

    @assert Set(selections) ⊆ Set(propertynames(
        lensed_comp_data))
            
    return  NamedTupleTools.select(
        lensed_comp_data,
        selections)
        
end



"""
`get_selected_comps_properties_by_lens`

This is an utility function that return a subset of
properties determined by  `selections` as a vector of
namedtuple.


selected_gens_paras =
    get_selected_comps_properties_by_lens(
        get_gen_dyn_paras_in_net,
        plant_generators;
        selections =
            gen_static_para_selections )

selected_gens_paras = [
    (P = 72.3, Q = 27.03, vh = 1.04,
     vmax = 1.1, vmin = 0.9,
     Qmax = 300, Qmin = -300,
     Pmax = 250, Pmin = 10,
     Sn = 390.51248379533274),
    (P = 72.3, Q = 27.03, vh = 1.04,
     vmax = 1.1, vmin = 0.9,
     Qmax = 300, Qmin = -300,
     Pmax = 250, Pmin = 10,
     Sn = 390.51248379533274),
    (P = 72.3, Q = 27.03, vh = 1.04,
     vmax = 1.1, vmin = 0.9,
     Qmax = 300, Qmin = -300,
     Pmax = 250, Pmin = 10,
     Sn = 390.51248379533274)]


It is like using a map on

`get_selected_comp_properties_by_lens`

selected_gens_paras =
    get_selected_comp_properties_by_lens.(
        get_gen_dyn_paras_in_net,
        plant_generators;
        selections =
            gen_static_para_selections )

selected_gens_paras =
    map((y) ->
    get_selected_comp_properties_by_lens(
        get_gen_dyn_paras_in_net,
        y;
        selections =
          gen_static_para_selections),    
    plant_generators )

"""
function get_selected_comps_properties_by_lens(
    lens_func,
    comps_data;
    selections = (:nothing,) )
    
    return  get_selected_comp_properties_by_lens.(
        lens_func,
        comps_data;
        selections =
            selections )        
end



"""
# `get_selected_comp_as_nt_vec_by_lens`

This is an utility function that return a subset of
properties determined by  `selections` as a namedtuple of
vectors.

It first assets that the selection is a subset of properties
of `lensed_comp_data`.

`lensed_comp_data` is the result of application of lens_func
to comp_data.


# get_selected_comp_as_nt_vec_by_lens(
#     get_gen_dyn_paras_in_net,
#     plant_generators;
#     selections =
#         gen_static_para_selections,
#     vec_datatype = Float64 )


selected_comp_as_nt_vec =
    (P = [72.3, 72.3, 72.3],
     Q = [27.03, 27.03, 27.03],
     vh = [1.04, 1.04, 1.04],
     vmax = [1.1, 1.1, 1.1],
     vmin = [0.9, 0.9, 0.9],
     Qmax = [300.0, 300.0, 300.0],
     Qmin = [-300.0, -300.0, -300.0],
     Pmax = [250.0, 250.0, 250.0],
     Pmin = [10.0, 10.0, 10.0],
     Sn = [390.512, 390.512, 390.512])

"""
function get_selected_vec_nt_as_nt_vec_by_lens(
    lens_func,
    comps_data;
    selections = (:nothing,),
    vec_datatype = Float64 )

    dim_selections =
        length( selections )
    
    vec_selected_nt =
        get_selected_comp_properties_by_lens.(
            lens_func,
            comps_data;
            selections =
                selections )
    
    vec_vec = Vector{vec_datatype}[
        [] for a_para in 1:dim_selections ]

    for (idx, a_property) in enumerate(selections)
        for a_namedtuple in vec_selected_nt
            push!(vec_vec[idx],
                  getproperty(a_namedtuple,
                              a_property))
        end
    end
    
    return namedtuple(
        OrderedDict(a_sym => a_value
             for (a_sym, a_value) in
                 zip(selections, vec_vec)))
        
end


#---------------------------------------------------
#---------------------------------------------------

"""
# `get_comp_vector_of_namedtuple_by_lens`

This functions uses a lens function for filtering.


The inputs are a `lens_func` and a collection of namedtuple data

"""
function get_comp_vector_of_nt_by_lens(
    lens_func,
    list_namedtuple_data )

    # if typeof(list_namedtuple_data) ∈ Union{OrderedDict, Dict}

    #     return map(lens_func,
    #             values(list_namedtuple_data))        
    # else

    #     return map(lens_func,
    #             list_namedtuple_data )        
    # end


    return map(lens_func,
            list_namedtuple_data )        
    

end

#---------------------------------------------------
#---------------------------------------------------

"""

obj = (a=1, b=(2, 3, "4"))

# multi-valued optics

lense_multi = @optic₊ (_.a, _.b[2])

lense_multi( obj )

@set lense_multi(obj) = (:x, :y)


obj = (a = (b = (c = 1,),),);


la = @optic _.a
lb = @optic _.b
lc = @optic _.c



"""


#---------------------------------------------------
#---------------------------------------------------
# Definition of lenses or optics
#---------------------------------------------------
#---------------------------------------------------


# test_nt = ( plant_generators = [
        
#             (idx = 1,
#             plant_type = "plant_cb_v6",
#             additional_data = (
#                 isa_slack = true,
#                 p_order = 1,
#                 v_ref = 1,
#                 ω_ref = 376.99111843077515
#             ),
#             components_type = (
#                 gen = "SM_2axis_cb_v6",
#                 gov = "gov_t1_cb_sauer",
#                 avr = "avr_t1_cb_sauer"
#             ),
#             components_data =(
#                 gen = (
#                     T_d_dash = 8.96,
#                     X_d_dash = 0.0608,
#                     D = 0.01254,
#                     X_d = 0.146,
#                     Ωb = 314.159,
#                     T_q_dash = 0.31,
#                     X_q_dash = 0.0969,
#                     ra = 0,
#                     X_q = 0.0969,
#                     X_q_2dash = 0.06,
#                     ωs = 376.99111843077515,
#                     xℓ = 0.0146,
#                     T_d_2dash = 0.01,
#                     H = 23.64,
#                     T_q_2dash = 0.01,
#                     X_d_2dash = 0.06,
#                     Bus = "bus1",
#                     P = 72.3,
#                     Q = 27.03,
#                     vh = 1.04,
#                     vmax = 1.1,
#                     vmin = 0.9,
#                     Qmax = 300,
#                     Qmin = -300,
#                     Pmax = 250,
#                     Pmin = 10,
#                     Sn = 390.51248379533274
#                 ),
#                 gov=(
#                     p_max = 2.2,
#                     R = 0.02,
#                     p_min = 0.1,
#                     Ts = 0.2,
#                     Tc = 0.4
#                 ),
#                 avr = (
#                     V_R_max = 5.2,
#                     Tf = 0.35,
#                     Be = 1.555,
#                     Tr = 0.001,
#                     Ka = 20,
#                     Kf = 0.063,
#                     Ta = 0.2,
#                     Ae = 0.0039,
#                     Te = 0.314,
#                     V_R_min = -4.16,
#                     Ke = 1 ) ) ),
        
#             (idx = 2,
#             plant_type = "plant_cb_v6",
#             additional_data = (
#                 isa_slack = false,
#                 p_order = 1,
#                 v_ref = 1,
#                 ω_ref = 376.99111843077515
#             ),
#             components_type = (
#                 gen = "SM_2axis_cb_v6",
#                 gov = "gov_t1_cb_sauer",
#                 avr = "avr_t1_cb_sauer"
#             ),
#             components_data =(
#                 gen = (
#                     T_d_dash = 8.96,
#                     X_d_dash = 0.0608,
#                     D = 0.01254,
#                     X_d = 0.146,
#                     Ωb = 314.159,
#                     T_q_dash = 0.31,
#                     X_q_dash = 0.0969,
#                     ra = 0,
#                     X_q = 0.0969,
#                     X_q_2dash = 0.06,
#                     ωs = 376.99111843077515,
#                     xℓ = 0.0146,
#                     T_d_2dash = 0.01,
#                     H = 23.64,
#                     T_q_2dash = 0.01,
#                     X_d_2dash = 0.06,
#                     Bus = "bus1",
#                     P = 72.3,
#                     Q = 27.03,
#                     vh = 1.04,
#                     vmax = 1.1,
#                     vmin = 0.9,
#                     Qmax = 300,
#                     Qmin = -300,
#                     Pmax = 250,
#                     Pmin = 10,
#                     Sn = 390.51248379533274
#                 ),
#                 gov=(
#                     p_max = 2.2,
#                     R = 0.02,
#                     p_min = 0.1,
#                     Ts = 0.2,
#                     Tc = 0.4
#                 ),
#                 avr = (
#                     V_R_max = 5.2,
#                     Tf = 0.35,
#                     Be = 1.555,
#                     Tr = 0.001,
#                     Ka = 20,
#                     Kf = 0.063,
#                     Ta = 0.2,
#                     Ae = 0.0039,
#                     Te = 0.314,
#                     V_R_min = -4.16,
#                     Ke = 1 ) ) ),
        
#             (idx = 3,
#             plant_type = "plant_cb_v6",
#             additional_data = (
#                 isa_slack = false,
#                 p_order = 1,
#                 v_ref = 1,
#                 ω_ref = 376.99111843077515
#             ),
#             components_type = (
#                 gen = "SM_2axis_cb_v6",
#                 gov = "gov_t1_cb_sauer",
#                 avr = "avr_t1_cb_sauer"
#             ),
#             components_data =(
#                 gen = (
#                     T_d_dash = 8.96,
#                     X_d_dash = 0.0608,
#                     D = 0.01254,
#                     X_d = 0.146,
#                     Ωb = 314.159,
#                     T_q_dash = 0.31,
#                     X_q_dash = 0.0969,
#                     ra = 0,
#                     X_q = 0.0969,
#                     X_q_2dash = 0.06,
#                     ωs = 376.99111843077515,
#                     xℓ = 0.0146,
#                     T_d_2dash = 0.01,
#                     H = 23.64,
#                     T_q_2dash = 0.01,
#                     X_d_2dash = 0.06,
#                     Bus = "bus1",
#                     P = 72.3,
#                     Q = 27.03,
#                     vh = 1.04,
#                     vmax = 1.1,
#                     vmin = 0.9,
#                     Qmax = 300,
#                     Qmin = -300,
#                     Pmax = 250,
#                     Pmin = 10,
#                     Sn = 390.51248379533274
#                 ),
#                 gov=(
#                     p_max = 2.2,
#                     R = 0.02,
#                     p_min = 0.1,
#                     Ts = 0.2,
#                     Tc = 0.4
#                 ),
#                 avr = (
#                     V_R_max = 5.2,
#                     Tf = 0.35,
#                     Be = 1.555,
#                     Tr = 0.001,
#                     Ka = 20,
#                     Kf = 0.063,
#                     Ta = 0.2,
#                     Ae = 0.0039,
#                     Te = 0.314,
#                     V_R_min = -4.16,
#                     Ke = 1 ) ) )],
# plant_loads = [
#     (
#         idx = 5,
#         plant_type = "plant_PQ_Const_I",
#         components_type = (
#             load = "PQ_Const_I",
#         ),
#         components_data = (
#             load = (
#                 Bus = "bus5",
#                 P = 90,
#                 Q =  30
#             ),
#         )
#     ),
#     (
#         idx = 7,
#         plant_type = "plant_PQ_Const_I",
#         components_type = (
#             load = "PQ_Const_I",
#         ),
#         components_data = (
#             load = (
#                 Bus = "bus7",
#                 P =  100,
#                 Q = 35
#             ),
#         )
#     ),
#     (
#         idx = 9,
#         plant_type = "plant_PQ_Const_I",
#         components_type = (
#             load =  "PQ_Const_I",
#         ),
#         components_data = (
#             load = (
#                 Bus = "bus9",
#                 P = 125,
#                 Q = 50
#             ),
#         )
#     )
# ]       
#        )



# plant_generators =
#     test_nt.plant_generators


# tt = (plant_type = "plant_cb_v6",
#       components_type =
#           Dict{Symbol, Any}(
#               :gen => "SM_2axis_cb_v6",
#               :avr => "avr_t1_cb_sauer",
#               :gov => "gov_t1_cb_sauer"),
#       idx = 1 )



# #---------------------------------------------------
# #---------------------------------------------------
# # test
# #---------------------------------------------------
# #---------------------------------------------------

# # test_nt 

# plant_generators =
#     get_plant_generators_in_net(test_nt)


# plant_loads =
#     get_plant_loads_in_net(test_nt)


# #---------------------------------------------------
# # selection
# #---------------------------------------------------


# (:Bus,

#  :Ωb,
#  :ωs,

#  :xℓ,
#  :ra,
#  :D,
#  :H,
 
#  :X_d,
#  :X_q,
#  :X_d_dash,
#  :X_q_dash,

#  :X_d_2dash,
#  :X_q_2dash,
    
#  :T_d_dash,
#  :T_q_dash,
#  :T_d_2dash,
#  :T_q_2dash,
  
#  :P, :Q, :vh, :vmax, :vmin, :Qmax, :Qmin, :Pmax, :Pmin, :Sn )

# gen_static_para_selections =
#     (:P, :Q, :vh,
#      :vmax, :vmin,
#      :Qmax, :Qmin,
#      :Pmax, :Pmin,
#      :Sn )

# selected_gen_paras =
#     get_selected_comp_properties_by_lens(
#         get_gen_dyn_paras_in_net,
#         plant_generators[1];
#         selections =
#             gen_static_para_selections )

# selected_gens_paras =
#     get_selected_comp_properties_by_lens.(
#         get_gen_dyn_paras_in_net,
#         plant_generators;
#         selections =
#             gen_static_para_selections )

# selected_gens_paras =
#     map((y) ->
#     get_selected_comp_properties_by_lens(
#         get_gen_dyn_paras_in_net,
#         y;
#         selections =
#           gen_static_para_selections),    
#     plant_generators )

# #---------------------------------------------------

# selected_gens_paras =
#     get_selected_comps_properties_by_lens(
#         get_gen_dyn_paras_in_net,
#         plant_generators;
#         selections =
#             gen_static_para_selections )

# #---------------------------------------------------

# # selected_comp_as_nt_vec =
# #     get_selected_comp_as_nt_vec_by_lens(
# #         get_gen_dyn_paras_in_net,
# #         plant_generators;
# #         selections =
# #             gen_static_para_selections,
# #         vec_datatype = Float64 )

# #---------------------------------------------------
# # plant_generators
# #---------------------------------------------------

# plant_generators_idxs =
#     map(get_comp_idx_in_net,
#         plant_generators)

# plant_generators_type =
#     map(get_comp_plant_type_in_net,
#         plant_generators)


# plants_isa_slack =
#     map(get_gen_plant_isa_slack_in_net,
#         plant_generators)


# gens_plant_p_order =
#     map(get_gen_plant_p_order_in_net,
#         plant_generators)

# gens_plant_v_ref =
#     map(get_gen_plant_v_ref_in_net,
#         plant_generators)


# gens_plant_ω_ref =
#     map(get_gen_plant_ω_ref_in_net,
#         plant_generators)


# gens_dyn_paras =
#     map(get_gen_dyn_paras_in_net,
#         plant_generators)

# gens_avr_paras =
#     map(get_gen_avr_paras_in_net,
#         plant_generators)


# gen_gov_paras =
#     map(get_gen_gov_paras_in_net,
#         plant_generators)


# #---------------------------------------------------
# # plant_loads
# #---------------------------------------------------


# loads_type =
#     map(get_load_type_in_net,
#         plant_loads)


# loads_data =
#     map(get_load_data_in_net,
#         plant_loads)



# loads_P =
#     map(get_load_P_in_net,
#         plant_loads)


# loads_Q =
#     map(get_load_Q_in_net,
#         plant_loads)



# loads_PQ_tuple =
#     map(get_get_load_PQ_tuple_in_net,
#         plant_loads)


#---------------------------------------------------
#---------------------------------------------------

# function get_node_Idx(node)
#     # A lens to get power eld 
#     lens_bus_num=@optic _.Bus_num
 
#     return getall(node, lens_bus_num)[1] 
# end


# function get_node_Idx_and_type_tuple(node)
#     # A lens to get power eld 
#     lens_bus_num  =@optic _.Bus_num
#     lens_Bus_type =@optic _.Bus_type
 
#     return (getall(node, lens_bus_num)[1],
#             getall(node, lens_Bus_type)[1])
# end


# function get_load_bus_Idx_and_power_tuple(node)
#     # A lens to get power eld 
#     lens_bus_num=@optic _.Bus_num
#     lens_P=@optic _.P
#     lens_Q=@optic _.Q

#     return (getall(node,lens_bus_num)[1],
#             getall(node,lens_P)[1] + 1im *
#                 getall(node,lens_Q)[1])
# end

# #---------------------------------------------------

# function get_nodes_Idx_and_type_tuple(nodes)

#     node_Idx_and_type_tuple =
#         map(get_node_Idx_and_type_tuple,
#             values(nodes) )
 
#     return node_Idx_and_type_tuple
# end


# function get_loads_bus_Idx_and_power_tuple(nodes)

#     load_nodes = filter_load_nodes(nodes)
    
#     load_bus_power_tuples =
#         map(get_load_bus_Idx_and_power_tuple,
#             load_nodes)

#     return load_bus_power_tuples
# end


# function get_nodes_Bus_name(nodes)
#     return map(get_node_Bus_name,
#                collect(values(nodes)))
# end


# function get_branches_name(branches)
#     return map(get_branch_name,
#                collect(values(branches)))
# end

# #---------------------------------------------------
# #---------------------------------------------------

